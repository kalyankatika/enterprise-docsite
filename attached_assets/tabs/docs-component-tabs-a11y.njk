section filter:
// FDS-Kalyan Katika - Extend FdsdNavToc to filter headings based on data-toc-ignored attribute
(function() {
  // Store the original getHeadings method
  const originalGetHeadings = FdsdNavToc.prototype.getHeadings;
  
  // Override the getHeadings method to filter out ignored headings
  FdsdNavToc.prototype.getHeadings = function(l1, l2) {
    let template = ``;
    this._headings = [
      [
        {
          name: '#' + this.heading,
          title: this.heading,
          el: '',
        },
      ],
    ];
    let current = 0;
    
    // Only select headings that don't have data-toc-ignored attribute
    document.querySelectorAll(`${l1}:not([data-toc-ignored]), ${l2}:not([data-toc-ignored])`).forEach((h) => {
      const heading = h;
      let name = this.kebab(heading.textContent);
      if (!heading.id) {
        heading.setAttribute('id', name);
      } else {
        name = heading.id;
      }
      
      if (heading.tagName.toLowerCase() === l2) {
        this._headings[current].push({
          name: '#' + name,
          title: heading.textContent,
          el: heading,
        });
      } else {
        current += 1;
        this._headings.push([
          {
            name: '#' + name,
            title: heading.textContent,
            el: heading,
          },
        ]);
      }
    });
    
    // Generate template same as original
    this._headings.forEach((group) => {
      template += `<div class="fds-stack-layout--half">`;
      group.forEach((child, i) => {
        if (i === 0) {
          template += `<h4 class="fds-text--label-legend">${child.title}</h4>`;
        } else {
          template += `<a href=${child.name} class="fds-link">
                    ${child.title}
                  </a>`;
        }
      });
      template += `</div>`;
    });
    
    return template;
  };
})();

// Filter headings based on active tab for TOC
document.addEventListener('DOMContentLoaded', function() {
  // Check if the page has component tabs by looking for the component-tabs class
  const hasComponentTabs = document.querySelector('.component-tabs') !== null;
  
  // Only apply the TOC filtering if we have component tabs
  if (hasComponentTabs) {
    // Function to update which headings are visible to the TOC
    function updateTOCVisibility() {
      // First, mark all headings to be ignored by TOC
      document.querySelectorAll('h2, h3').forEach(heading => {
        heading.setAttribute('data-toc-ignored', 'true');
      });
      
      // Then, make headings in the active tab visible to TOC
      // Works with both button-based tabs and proper tablist/tab/tabpanel setup
      const activeTab = document.querySelector('.tab-content.active, [role="tabpanel"]:not([hidden])');
      if (activeTab) {
        activeTab.querySelectorAll('h2, h3').forEach(heading => {
          heading.removeAttribute('data-toc-ignored');
        });
      }
      
      // Force TOC refresh by rebuilding it
      document.querySelectorAll('fdsd-nav-toc').forEach(toc => {
        // Clear content and trigger rebuild
        toc.innerHTML = '';
        toc.connectedCallback();
      });
    }
    
    // Update TOC when tab changes - support both old and new tab systems
    document.querySelectorAll('.tab-button, [role="tab"]').forEach(tab => {
      tab.addEventListener('click', () => {
        // Allow time for the tab content to become active
        setTimeout(updateTOCVisibility, 50);
      });
    });
    
    // Also listen for keydown events on tabs for keyboard navigation
    document.querySelectorAll('[role="tab"]').forEach(tab => {
      tab.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.key === ' ') {
          // Allow time for the tab content to become active
          setTimeout(updateTOCVisibility, 50);
        }
      });
    });
    
    // Initial setup after page loads
    setTimeout(updateTOCVisibility, 500);
    
    // Add a small amount of CSS for TOC stability
    const style = document.createElement('style');
    style.textContent = `
      fdsd-nav-toc {
        display: block;
        min-height: 100px; /* Adjust based on your typical TOC height */
      }
    `;
    document.head.appendChild(style);
  }
});

1. njk template
---
layout: assets/layouts/wrapper.njk
title: Docs
---

<div class="fds-global-layout__nav">
  <div class="fds-stack-layout--scroll">
    <div class="fds-pad--top fds-pad--sides">
      <form name="tocChannelSelect" class="fds-form-layout">
        <label for="channelSelect" class="fds-vis--visually-hidden">Select Channel to filter by</label>
        <div class="fds-select">
          <select name="state" id="channelSelect" class="fds-select__select" style="opacity: 1;">
            <option value="web">Web</option>
            <option value="ios">iOS</option>
            <option value="android">Android</option>
          </select>
        </div>
      </form>
    </div>
    <div class="fds-pad--bottom fds-pad--sides">
      {% set navPages = collections.all | eleventyNavigation("design-system") | navSectionSort %}
      {% include "tree-menu.njk" %}
    </div>
  </div>
</div>
<main class="fds-global-layout__main" id="globalMain">
  <div class="fds-page-layout">
    <div class="fds-page-layout__section fds-accent--solid fds-text--with-margins fds-text--reading-width">
      <div class="fds-page-layout__content">
        <div class="fds-html-content">
          <h1 class="fds-text--headline-page" id="componentName">{{ eleventyNavigation.title }}</h1>
          <p class="fds-text--paragraph-lede">{{ description }}</p>
        </div>
      </div>
    </div>
    {%- if status == 'Development' or status == 'Draft' %}
      <div class="fds-page-layout__section fds-accent--solid fds-text--reading-width">
        <div class="fds-page-layout__content">
          <fds-message severity="{%- if status == 'Development' %}information{%- elseif status == 'Draft' -%}warning{%- endif -%}" heading-text="{%- if status == 'Development' %}Component In Development{%- elseif status == 'Draft' -%}Draft Document{%- endif -%}" content-text="More information on component status can be found <a class='fds-link' href='/resources/system-architecture/component-status/'>Here</a>"></fds-message>
        </div>
      </div>
    {%- endif %}
    <div class="fds-page-layout__section fds-accent--solid fds-text--reading-width">
      <article class="fds-page-layout__content fds-article-layout">
        <aside class="fds-article-layout__aside--sticky">
            <div class="fds-stack-layout--two">
                <!-- Add a container class for our script to target -->
                <div class="toc-container">
                <fdsd-nav-toc heading="Overview" l1="h2" l2="h3"></fdsd-nav-toc>
                </div>
                <div class="fds-stack-layout--half">
                <h4 class="fds-text--label-legend">Resources</h4>
                {% if resources.figma %}
                    <fds-link href="{{ resources.figma }}" target="_blank">
                    Figma
                    </fds-link>
                {% endif %}
                </div>
            </div>
        </aside>
        <div class="fds-article-layout__main fds-text--with-margins fds-stack-layout">
          <div class="fds-html-content">
            {% if useTabs %}
              <!-- Parse content sections -->
              {% set sections = content | extractSections(['examples', 'design', 'code', 'accessibility']) %}
              
              <div class="component-tabs">
                <!-- Accessible tablist using proper ARIA roles -->
                <div role="tablist" class="tab-header" aria-label="Component documentation">
                  <button role="tab" 
                          id="tab-examples" 
                          class="tab-button active" 
                          aria-selected="true" 
                          aria-controls="panel-examples">
                    Examples
                  </button>
                  <button role="tab" 
                          id="tab-design" 
                          class="tab-button" 
                          aria-selected="false" 
                          aria-controls="panel-design">
                    Design
                  </button>
                  <button role="tab" 
                          id="tab-code" 
                          class="tab-button" 
                          aria-selected="false" 
                          aria-controls="panel-code">
                    Code
                  </button>
                  <button role="tab" 
                          id="tab-accessibility" 
                          class="tab-button" 
                          aria-selected="false" 
                          aria-controls="panel-accessibility">
                    Accessibility
                  </button>
                </div>

                <div role="tabpanel" 
                     id="panel-examples" 
                     class="tab-content active" 
                     aria-labelledby="tab-examples">
                  {% if sections.examples %}
                    {{ sections.examples | safe }}
                  {% else %}
                    <p>Examples content not provided</p>
                  {% endif %}
                </div>

                <div role="tabpanel" 
                     id="panel-design" 
                     class="tab-content" 
                     aria-labelledby="tab-design" 
                     hidden>
                  {% if sections.design %}
                    {{ sections.design | safe }}
                  {% else %}
                    <p>Design content not provided</p>
                  {% endif %}
                </div>

                <div role="tabpanel" 
                     id="panel-code" 
                     class="tab-content" 
                     aria-labelledby="tab-code" 
                     hidden>
                  {% if sections.code %}
                    {{ sections.code | safe }}
                  {% else %}
                    <p>Code content not provided</p>
                    {%- if storybook %}
                      {%- if storybook.name %}
                        <h2>Code</h2>
                        {%- if (akfw5) or (apex) %}
                        <h3>Apex Kit for Web 5</h3>
                        <fds-message
                          severity="warning"
                          heading-text="Apex{%- if akfw5 %}&nbsp;Kit for Web 5{%- endif %} is now the fds{%- if akfw5 %}&nbsp;web component{%- endif %} library of record."
                          heading-level="3"
                          content-text="Please refer to the Code tab of&nbsp;{%-if akfw5 %}{%- for item in akfw5 %}{%- if loop.index > 1 %} and&nbsp;{%- endif %}<fds-link 
                            opens-new-window
                            href='https://providence.fmr.com/5.x/components/{{ item }}/{{ item }}.html?tab=code'
                            >{{ item }}</fds-link>{%- endfor %} on the Apex Kit for Web 5 documentation site.{%- endif %}{%-if apex %}{%- for item in apex %}{%- if loop.index > 1 %} and&nbsp;{%- endif %}<fds-link 
                            opens-new-window
                            href='https://apex.fmr.com/components/{{ item }}'
                            >{{ item }}</fds-link>{%- endfor %} on the Apex documentation site.{%- endif %}"></fds-message>
                        {%- endif %}
                      {% endif %}
                    {% endif %}
                  {% endif %}
                </div>

                <div role="tabpanel" 
                     id="panel-accessibility" 
                     class="tab-content" 
                     aria-labelledby="tab-accessibility" 
                     hidden>
                  {% if sections.accessibility %}
                    {{ sections.accessibility | safe }}
                  {% else %}
                    <p>Accessibility content not provided</p>
                  {% endif %}
                </div>
              </div>
              
            {% else %}
              <!-- Regular content without tabs -->
              {{ content | safe }}
              {%- if storybook %}
                {%- if storybook.name %}
                  <h2>Code</h2>
                  {%- if (akfw5) or (apex) %}
                  <h3>Apex Kit for Web 5</h3>
                  <fds-message
                    severity="warning"
                    heading-text="Apex{%- if akfw5 %}&nbsp;Kit for Web 5{%- endif %} is now the fds{%- if akfw5 %}&nbsp;web component{%- endif %} library of record."
                    heading-level="3"
                    content-text="Please refer to the Code tab of&nbsp;{%-if akfw5 %}{%- for item in akfw5 %}{%- if loop.index > 1 %} and&nbsp;{%- endif %}<fds-link 
                      opens-new-window
                      href='https://providence.fmr.com/5.x/components/{{ item }}/{{ item }}.html?tab=code'
                      >{{ item }}</fds-link>{%- endfor %} on the Apex Kit for Web 5 documentation site.{%- endif %}{%-if apex %}{%- for item in apex %}{%- if loop.index > 1 %} and&nbsp;{%- endif %}<fds-link 
                      opens-new-window
                      href='https://apex.fmr.com/components/{{ item }}'
                      >{{ item }}</fds-link>{%- endfor %} on the Apex documentation site.{%- endif %}"></fds-message>
                  {%- endif %}
                {% endif %}
              {% endif %}
            {% endif %}
          </div>
        </div>
      </article>
    </div>
  </div>
</main>
             
2. CSS
/* Component Tabs styles */
.component-tabs {
  margin: 2rem 0;
  overflow: hidden;
}

.tab-header {
  display: flex;
  border-bottom: 1px solid #e5e7eb;
  background-color: #ffffff;
  padding: 0;
}

.tab-button {
  padding: 1rem 1.5rem;
  background: none;
  border: none;
  cursor: pointer;
  font-weight: 600;
  color: #000000;
  border-bottom: 3px solid transparent;
  transition: all 0.2s ease;
  margin: 0;
  position: relative;
  border-radius: 0px;
}

.tab-button:hover {
  background-color: #f5f5f5;
  border-bottom-color: #000000;
}

.tab-button.active {
  color: #000000;
  border-bottom-color: #368727;
  font-weight: 700;
}

.tab-button:focus {
  outline: 2px solid #4b9e47;
  outline-offset: -2px;
}

.tab-button:focus:not(:focus-visible) {
  outline: none;
}

.tab-button:focus-visible {
  outline: 2px solid #4b9e47;
  outline-offset: -2px;
}

/* Tab content styles */
.tab-content {
  display: none;
  padding: 1.5rem;
}

.tab-content.active {
  display: block;
}

/* Support for hidden attribute (for ARIA tabpanels) */
[role="tabpanel"][hidden] {
  display: none;
}

[role="tabpanel"]:not([hidden]) {
  display: block;
}

/* Example styles */
.example {
  margin: 1rem 0;
  padding: 1rem;
  border: 1px solid #e5e7eb;
  border-radius: 0.25rem;
  background-color: #f9fafb;
}

/* Alert styles */
.alert {
  background-color: #fff3cd;
  border-color: #ffecb5;
  color: #664d03;
  padding: 1rem;
  margin: 1rem 0;
  border-radius: 0.25rem;
}

3. script
document.addEventListener('DOMContentLoaded', function() {
  // Initialize tabs functionality
  initTabs();
});

function initTabs() {
  const tabLists = document.querySelectorAll('[role="tablist"]');
  
  tabLists.forEach(tabList => {
    const tabs = tabList.querySelectorAll('[role="tab"]');
    
    // Add keyboard navigation
    tabList.addEventListener('keydown', e => {
      // Get the index of the current tab in the tabs node list
      const index = Array.prototype.indexOf.call(tabs, e.target);
      
      // Define the keys and their corresponding actions
      const keys = {
        ArrowRight: () => tabs[index + 1] || tabs[0],
        ArrowLeft: () => tabs[index - 1] || tabs[tabs.length - 1],
        Home: () => tabs[0],
        End: () => tabs[tabs.length - 1]
      };
      
      // Check if the key pressed is in the keys object
      if (keys[e.key]) {
        e.preventDefault();
        // Get the new tab element based on the key pressed
        const tab = keys[e.key]();
        tab.focus();
        activateTab(tab);
      }
    });
    
    // Add click event to each tab
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        activateTab(tab);
      });
    });
  });
}

function activateTab(tab) {
  const tabList = tab.parentNode;
  const tabPanel = document.getElementById(tab.getAttribute('aria-controls'));
  
  // Deactivate all tabs in the same tablist
  tabList.querySelectorAll('[role="tab"]').forEach(t => {
    t.setAttribute('aria-selected', 'false');
    t.classList.remove('active');
  });
  
  // Hide all tabpanels
  const tabPanelContainer = tabPanel.closest('.component-tabs') || document;
  tabPanelContainer.querySelectorAll('[role="tabpanel"]').forEach(panel => {
    panel.setAttribute('hidden', '');
    panel.classList.remove('active');
  });
  
  // Activate the selected tab
  tab.setAttribute('aria-selected', 'true');
  tab.classList.add('active');
  
  // Show the selected tabpanel
  tabPanel.removeAttribute('hidden');
  tabPanel.classList.add('active');
  
  // Dispatch a custom event that other scripts can listen for
  const tabChangeEvent = new CustomEvent('tabChanged', {
    detail: {
      tabId: tab.id,
      panelId: tabPanel.id
    }
  });
  document.dispatchEvent(tabChangeEvent);
}

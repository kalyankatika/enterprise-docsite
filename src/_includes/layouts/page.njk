---
layout: layouts/with-sidebar.njk
---

<div class="prose max-w-none">
  <h1>{{ title }}</h1>
  {% if description %}
    <p class="text-xl text-[var(--color-text-muted)] mb-8">{{ description }}</p>
  {% endif %}
  
  {{ content | safe }}
</div>

<!-- Right sidebar - Table of Contents -->
<div class="hidden lg:block fixed top-32 right-6 w-64">
  <div class="sticky top-32">
    <h3 class="text-sm font-medium text-[var(--color-text-muted)] uppercase tracking-wider mb-4">On this page</h3>
    <nav class="toc js-toc">
      <!-- Table of contents will be auto-generated here -->
      <ul class="space-y-1">
        {% if headings %}
          {% for heading in headings %}
            <li class="toc-item {% if heading.level == 2 %}pl-0{% else %}pl-{{ (heading.level - 2) * 4 }}{% endif %}">
              <a href="#{{ heading.id }}" class="text-[var(--color-text)] hover:text-[var(--color-primary)] transition-colors text-sm {% if heading.level == 2 %}font-medium{% endif %}">
                {{ heading.text }}
              </a>
            </li>
          {% endfor %}
        {% endif %}
      </ul>
    </nav>
  </div>
</div>

<!-- Add table of contents JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // If no TOC elements exist, we'll generate them
    if (!document.querySelector('.js-toc li')) {
      const headings = document.querySelectorAll('.prose h2, .prose h3, .prose h4');
      const toc = document.querySelector('.js-toc');
      
      if (toc && headings.length > 0) {
        const tocList = document.createElement('ul');
        tocList.className = 'space-y-1';
        
        headings.forEach(heading => {
          if (!heading.id) {
            // Create an ID if none exists
            heading.id = heading.textContent.toLowerCase().replace(/[^\w]+/g, '-');
          }
          
          const level = parseInt(heading.tagName.charAt(1));
          const listItem = document.createElement('li');
          listItem.className = `toc-item ${level === 2 ? 'pl-0' : 'pl-' + ((level - 2) * 4)}`;
          
          const link = document.createElement('a');
          link.href = `#${heading.id}`;
          link.className = `text-[var(--color-text)] hover:text-[var(--color-primary)] transition-colors text-sm ${level === 2 ? 'font-medium' : ''}`;
          link.textContent = heading.textContent;
          
          listItem.appendChild(link);
          tocList.appendChild(listItem);
          
          // Add a hidden anchor link to the heading
          if (!heading.querySelector('.anchor')) {
            const anchor = document.createElement('a');
            anchor.className = 'anchor opacity-0 ml-2 text-[var(--color-text-muted)] hover:opacity-100 transition-opacity';
            anchor.href = `#${heading.id}`;
            anchor.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" /></svg>';
            heading.appendChild(anchor);
          }
        });
        
        if (tocList.children.length > 0) {
          toc.appendChild(tocList);
        } else {
          // If no headings found, hide the TOC container
          const tocContainer = toc.closest('.sticky');
          if (tocContainer) {
            tocContainer.style.display = 'none';
          }
        }
      }
    }
    
    // Highlight the current section in the TOC as user scrolls
    const headings = Array.from(document.querySelectorAll('.prose h2, .prose h3, .prose h4'));
    const tocLinks = document.querySelectorAll('.js-toc a');
    
    if (headings.length > 0 && tocLinks.length > 0) {
      const observerOptions = {
        root: null,
        rootMargin: '0px 0px -80% 0px',
        threshold: 0
      };
      
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => {
              link.classList.remove('text-[var(--color-primary)]', 'font-medium');
            });
            
            // Add active class to corresponding link
            const id = entry.target.id;
            const activeLink = document.querySelector(`.js-toc a[href="#${id}"]`);
            if (activeLink) {
              activeLink.classList.add('text-[var(--color-primary)]', 'font-medium');
            }
          }
        });
      }, observerOptions);
      
      headings.forEach(heading => {
        observer.observe(heading);
      });
    }
  });
</script>
---
layout: layouts/base.njk
---

<div class="container mx-auto px-4 py-8 md:px-6 md:py-12">
  <div class="flex flex-col lg:flex-row">
    <!-- Left sidebar - Optional component navigation -->
    {% if showSidebar %}
    <div class="hidden lg:block w-64 pr-8 flex-shrink-0">
      <div class="sticky top-32">
        <h3 class="text-lg font-bold mb-4">{{ sidebar.title }}</h3>
        <nav class="space-y-1">
          {% for section in sidebar.sections %}
            <div class="mb-4">
              {% if section.title %}
                <h4 class="text-sm font-medium text-[var(--color-text-muted)] uppercase tracking-wider mb-2">{{ section.title }}</h4>
              {% endif %}
              <ul class="space-y-1">
                {% for item in section.items %}
                  <li>
                    <a href="{{ item.url }}" class="block py-1 {% if page.url == item.url %}text-[var(--color-primary)] font-medium{% else %}text-[var(--color-text)] hover:text-[var(--color-primary)]{% endif %} transition-colors">
                      {{ item.text }}
                    </a>
                  </li>
                {% endfor %}
              </ul>
            </div>
          {% endfor %}
        </nav>
      </div>
    </div>
    {% endif %}
    
    <!-- Main content -->
    <div class="{% if showSidebar %}lg:flex-1{% else %}w-full{% endif %}">
      <div class="prose max-w-none">
        <h1>{{ title }}</h1>
        {% if description %}
          <p class="text-xl text-[var(--color-text-muted)] mb-8">{{ description }}</p>
        {% endif %}
        
        {{ content | safe }}
      </div>
    </div>
    
    <!-- Right sidebar - Table of Contents -->
    <div class="hidden lg:block w-64 pl-8 flex-shrink-0">
      <div class="sticky top-32">
        <h3 class="text-sm font-medium text-[var(--color-text-muted)] uppercase tracking-wider mb-4">On this page</h3>
        <nav class="toc js-toc">
          <!-- Table of contents will be auto-generated here -->
          <ul class="space-y-1">
            {% if headings %}
              {% for heading in headings %}
                <li class="toc-item {% if heading.level == 2 %}pl-0{% else %}pl-{{ (heading.level - 2) * 4 }}{% endif %}">
                  <a href="#{{ heading.id }}" class="text-[var(--color-text)] hover:text-[var(--color-primary)] transition-colors text-sm {% if heading.level == 2 %}font-medium{% endif %}">
                    {{ heading.text }}
                  </a>
                </li>
              {% endfor %}
            {% endif %}
          </ul>
        </nav>
      </div>
    </div>
  </div>
</div>

<!-- Add table of contents JavaScript -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // If no TOC elements exist, we'll generate them
    if (!document.querySelector('.js-toc li')) {
      const headings = document.querySelectorAll('.prose h2, .prose h3, .prose h4');
      const toc = document.querySelector('.js-toc');
      
      if (toc && headings.length > 0) {
        const tocList = document.createElement('ul');
        tocList.className = 'space-y-1';
        
        headings.forEach(heading => {
          if (!heading.id) {
            // Create an ID if none exists
            heading.id = heading.textContent.toLowerCase().replace(/[^\w]+/g, '-');
          }
          
          const level = parseInt(heading.tagName.charAt(1));
          const listItem = document.createElement('li');
          listItem.className = `toc-item ${level === 2 ? 'pl-0' : 'pl-' + ((level - 2) * 4)}`;
          
          const link = document.createElement('a');
          link.href = `#${heading.id}`;
          link.className = `text-[var(--color-text)] hover:text-[var(--color-primary)] transition-colors text-sm ${level === 2 ? 'font-medium' : ''}`;
          link.textContent = heading.textContent;
          
          listItem.appendChild(link);
          tocList.appendChild(listItem);
          
          // Also add the anchor link to the heading
          if (!heading.querySelector('.anchor')) {
            const anchor = document.createElement('a');
            anchor.className = 'anchor opacity-0 ml-2 text-[var(--color-text-muted)] hover:opacity-100 transition-opacity';
            anchor.href = `#${heading.id}`;
            anchor.textContent = '#';
            heading.appendChild(anchor);
          }
        });
        
        if (tocList.children.length > 0) {
          toc.appendChild(tocList);
        } else {
          // If no headings found, hide the TOC container
          const tocContainer = toc.closest('.sticky');
          if (tocContainer) {
            tocContainer.style.display = 'none';
          }
        }
      }
    }
    
    // Highlight the current section in the TOC as user scrolls
    const headings = Array.from(document.querySelectorAll('.prose h2, .prose h3, .prose h4'));
    const tocLinks = document.querySelectorAll('.js-toc a');
    
    if (headings.length > 0 && tocLinks.length > 0) {
      const observerOptions = {
        root: null,
        rootMargin: '0px 0px -80% 0px',
        threshold: 0
      };
      
      const observer = new IntersectionObserver(entries => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            // Remove active class from all links
            tocLinks.forEach(link => {
              link.classList.remove('text-[var(--color-primary)]', 'font-medium');
            });
            
            // Add active class to corresponding link
            const id = entry.target.id;
            const activeLink = document.querySelector(`.js-toc a[href="#${id}"]`);
            if (activeLink) {
              activeLink.classList.add('text-[var(--color-primary)]', 'font-medium');
            }
          }
        });
      }, observerOptions);
      
      headings.forEach(heading => {
        observer.observe(heading);
      });
    }
  });
</script>
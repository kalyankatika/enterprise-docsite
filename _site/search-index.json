[
  
    
      {
        "title": "Enterprise Design System 2.0 Released",
        "url": "/updates/2025-02-15-version-2-release/",
        "content": "Enterprise Design System 2.0 Released February 15, 2025 We&amp;#039;re excited to announce the release of Enterprise Design System 2.0! This major update includes new components, improved documentation, and better accessibility across the entire system. What&amp;#039;s New New Components EDS 2.0 introduces several new components to enhance your enterprise applications: Data Table - A powerful and flexible data table component with sorting, filtering, and pagination capabilities. Accordion - An expandable/collapsible content container for displaying information in a limited space. Slider - An interactive component for selecting a value or range from a predefined range. Stepper - A step-by-step navigation component for guiding users through a multi-step process. Improved Accessibility All components have been audited and updated to meet WCAG 2.1 AA standards. Key improvements include: Enhanced keyboard navigation Improved screen reader support with ARIA attributes Better focus management Color contrast compliance Redesigned Documentation Our documentation site has been completely redesigned to provide a better developer experience: Consolidated content from multiple legacy documentation sites New interactive examples with live code editing Improved search functionality Dark mode support Responsive design for all screen sizes Performance Improvements We&amp;#039;ve significantly improved the performance of all components: Reduced bundle size by 30% Improved rendering performance Better lazy-loading techniques Optimized CSS with modern approaches Migration Guide Upgrading from EDS 1.x to 2.0 should be relatively straightforward for most applications. We&amp;#039;ve prepared a detailed migration guide to help you with the transition. Community Feedback This release incorporates feedback from over 50 developers and designers across the organization. Thank you to everyone who contributed ideas, bug reports, and feature requests! Get Started Today Ready to upgrade? Check out our Getting Started guide or dive straight into the Component library.",
        "description": "Major update with new components, improved documentation, and better accessibility",
        "type": "Page",
        "date": "2025-02-15"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/accordion/",
        "content": "",
        "description": "Accordions are lightweight containers that can function independently or be integrated into a single-page section, interacting with the expansion controls and other adjacent content.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "",
        "url": "/components/accordion/example/",
        "content": "About the accordion component The accordion component is used to show and hide content in a limited space. Users can expand sections they&amp;#039;re interested in and collapse others to focus on relevant information. This pattern is particularly useful for: FAQ sections Product descriptions with multiple categories Settings or configuration options Navigation in limited spaces Accessibility considerations When implementing accordions, ensure they&amp;#039;re accessible by: Using proper ARIA attributes (aria-expanded, aria-controls) Supporting keyboard navigation Providing sufficient color contrast Ensuring content is announced correctly to screen readers Best practices For the best user experience with accordions: Use descriptive headings that clearly indicate content Keep content concise and focused Consider whether users need to compare information across sections Provide visual feedback for interactions Consider allowing multiple sections to be open simultaneously // Example functionality document.querySelectorAll(&amp;#039;.accordion-header&amp;#039;).forEach(button =&amp;gt; { button.addEventListener(&amp;#039;click&amp;#039;, () =&amp;gt; { const expanded = button.getAttribute(&amp;#039;aria-expanded&amp;#039;) === &amp;#039;true&amp;#039;; button.setAttribute(&amp;#039;aria-expanded&amp;#039;, !expanded); const panelId = button.getAttribute(&amp;#039;aria-controls&amp;#039;); const panel = document.getElementById(panelId); if (panel) { panel.hidden = expanded; } }); }); .accordion { width: 100%; border: 1px solid var(--color-border); border-radius: 4px; margin-bottom: 2rem; } .accordion-item { border-bottom: 1px solid var(--color-border); } .accordion-item:last-child { border-bottom: none; } .accordion-header { width: 100%; padding: 1rem; display: flex; justify-content: space-between; align-items: center; background: none; border: none; text-align: left; font-weight: 600; cursor: pointer; } .accordion-header:hover { background-color: var(--color-bg-hover); } .accordion-icon { transition: transform 0.2s ease; } .accordion-header[aria-expanded=&amp;quot;true&amp;quot;] .accordion-icon { transform: rotate(180deg); } .accordion-panel { padding: 0; margin: 0; overflow: hidden; } .accordion-content { padding: 0 1rem 1rem; }",
        "description": "",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Colors",
        "url": "/design-system/foundations/colors/",
        "content": "Color System # Our color system is designed to create accessible, consistent, and visually appealing interfaces across all platforms. The color palette is intentionally crafted to align with our brand identity while providing flexibility for various use cases. Primary Colors # The primary color of our design system is green (#368727), which represents growth, sustainability, and stability. This color is used for primary actions, navigation elements, and branding. Primary #368727 Primary Dark #286d1c Primary Light #4ba238 Text Colors # Text colors are designed to provide optimal readability and accessibility. They should be used consistently across all interfaces. Text #333333 Text Muted #666666 Text Light #888888 Background Colors # Background colors provide context and hierarchy to our interfaces, helping users understand the structure and functionality of our products. Background #ffffff Background Alt #f5f7f9 Background Hover #f0f2f5 Semantic Colors # Semantic colors convey specific meanings and are used to communicate status, feedback, and alerts to users. Success #38a169 Warning #e9b949 Error #e53e3e Info #3182ce Dark Theme Colors # Our design system supports a dark theme, which uses a different color palette optimized for low-light environments and user preference. Primary #4ba238 Text #e2e8f0 Background #1a202c Background Alt #2d3748 Accessibility Guidelines # All color combinations used in our interfaces must meet WCAG 2.1 AA standards for contrast ratio: Text and interactive elements: minimum contrast ratio of 4.5:1 Large text (18pt and above): minimum contrast ratio of 3:1 UI components and graphical objects: minimum contrast ratio of 3:1 Good contrast Text on primary color (4.6:1) Poor contrast Text on light primary color (3.2:1) Using Colors in Design # When applying colors to your designs, keep these principles in mind: Consistency: Use colors consistently to reinforce meaning and functionality. Hierarchy: Use color to establish visual hierarchy and guide user attention. Accessibility: Ensure sufficient contrast between text and background colors. Purpose: Use semantic colors for their intended purpose only. Restraint: Limit the use of colors to avoid overwhelming users. Implementation # For web implementations, use the CSS variables defined in our design system: /* Primary colors */ --color-primary: #368727; --color-primary-dark: #286d1c; --color-primary-light: #4ba238; /* Text colors */ --color-text: #333333; --color-text-muted: #666666; --color-text-light: #888888; /* Background colors */ --color-bg: #ffffff; --color-bg-alt: #f5f7f9; --color-bg-hover: #f0f2f5; /* Semantic colors */ --color-success: #38a169; --color-warning: #e9b949; --color-error: #e53e3e; --color-info: #3182ce;",
        "description": "Our color palette, including primary, secondary, and semantic colors, along with usage guidelines.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Resources",
        "url": "/resources/",
        "content": "Resources # Welcome to the Enterprise Design System resources section. Here you&amp;#039;ll find templates, design tokens, and other tools to help you implement the design system efficiently in your projects. Templates # Templates provide pre-built layouts for common page types and patterns, helping you maintain consistency while accelerating your development process. Page Templates Standard page layouts for common use cases such as dashboards, forms, and landing pages. UI Patterns Common interaction patterns and UI flows for consistent user experiences. Email Templates HTML email templates with responsive design and consistent branding. Design Tokens # Design tokens are the visual design atoms of the design system â€” specifically, they are named entities that store visual design attributes. We use them in place of hard-coded values to ensure flexibility and consistency. Token Documentation Learn how to use design tokens in your projects for consistent implementation. CSS Variables CSS custom properties for web implementation of design tokens. Token Files JSON format design tokens for use with various platforms and tools. Downloads # Access design assets and code libraries to implement the Enterprise Design System in your projects. Design Files Figma libraries and design assets for designers to use in their projects. Code Libraries Component libraries and code snippets for developers to implement the design system. Icon Library SVG icons for use in web, mobile, and desktop applications. Tools &amp;amp;amp; Utilities # Tools to help you work more efficiently with the Enterprise Design System. Token Converter Convert design tokens between different formats (JSON, CSS, SCSS, etc.). Accessibility Checker Check color contrast and other accessibility requirements in your designs. Component Generator Generate component code based on design system specifications. Support &amp;amp;amp; Documentation # Find additional help and resources for using the Enterprise Design System. Developer Documentation Frequently Asked Questions Tutorials and Guides Contact Support .resource-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1.5rem; margin: 2rem 0; } .resource-card { padding: 1.5rem; border: 1px solid var(--color-border); border-radius: 8px; transition: transform 0.2s ease, box-shadow 0.2s ease; display: block; color: var(--color-text); } .resource-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); text-decoration: none; } .resource-icon { display: inline-flex; align-items: center; justify-content: center; width: 48px; height: 48px; background-color: var(--color-primary); color: white; border-radius: 8px; margin-bottom: 1rem; } .resource-card h3 { margin-top: 0; margin-bottom: 0.5rem; color: var(--color-primary); } .resource-card p { margin: 0; color: var(--color-text-muted); } .resource-links { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0; } .resource-link { display: flex; align-items: center; padding: 0.75rem 1rem; border: 1px solid var(--color-border); border-radius: 4px; transition: background-color 0.2s ease; } .resource-link:hover { background-color: var(--color-bg-hover); text-decoration: none; } .resource-link svg { margin-right: 0.75rem; color: var(--color-primary); }",
        "description": "Access templates, design tokens, and downloadable assets for your projects.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Support",
        "url": "/support/",
        "content": "Support &amp;amp;amp; Help # Welcome to the Enterprise Design System support section. Here you&amp;#039;ll find resources to help you implement the design system, get answers to your questions, and connect with our team. Frequently Asked Questions # Get quick answers to common questions about the Enterprise Design System. How do I get started with the Enterprise Design System? The best way to get started is to: Review the Design System Overview to understand the core principles and guidelines. Explore the Foundations to learn about our fundamental design elements. Browse the Component Library to see what components are available. Check out the Downloads section to access design files and code libraries. How can I contribute to the design system? We welcome contributions from the community! To contribute: Review our Contribution Guidelines. Create a proposal using our Contribution Template. Submit your proposal to the design system team for review. For more details, visit our Contribution page. What if I need a component that doesn&amp;#039;t exist in the library? If you need a component that&amp;#039;s not currently in our library: Check if a similar component can be adapted for your needs. Submit a Feature Request with details about the component you need. Consider creating a custom component that follows our design guidelines until an official one is available. How do I report a bug or issue? To report a bug or issue with a component: Go to the Report a Bug page. Fill out the bug report form with as much detail as possible, including browser/device information, steps to reproduce, and screenshots if available. Submit the form, and our team will review and respond to your report. How often is the design system updated? The Enterprise Design System follows a regular release schedule: Major releases: 2-3 times per year (may include breaking changes) Minor releases: Monthly (new features, no breaking changes) Patch releases: As needed (bug fixes and small improvements) You can view our Roadmap to see upcoming changes and follow our Release Notes for details about each update. Support Channels # Get help with implementing the Enterprise Design System through our various support channels. Community Forum Connect with other designers and developers to ask questions, share solutions, and discuss best practices. Visit Forum â†’ Email Support Contact our support team directly for help with implementation issues or questions about the design system. Contact Support â†’ GitHub Submit bug reports, feature requests, and contribute to the design system code repository. View Repository â†’ Office Hours Virtual sessions with our design system team to get your questions answered and receive guidance on implementation. Schedule Session â†’ Documentation &amp;amp;amp; Resources # Find detailed documentation and guides to help you implement the Enterprise Design System. Getting Started Guide Step-by-step instructions for implementing the design system in your projects. Developer Guide Technical documentation for developers on how to use and extend the design system. Designer Guide Guidelines for designers on how to use design files and maintain consistency. Tutorials Step-by-step tutorials for common implementation scenarios. Release Notes Details about each release, including new features, improvements, and bug fixes. Roadmap See what&amp;#039;s coming in future releases of the Enterprise Design System. .faq-container { margin: 2rem 0; } .faq-item { border: 1px solid var(--color-border); border-radius: 8px; margin-bottom: 1rem; overflow: hidden; } .faq-question { padding: 1rem; cursor: pointer; font-weight: 600; position: relative; list-style: none; } .faq-question::after { content: &amp;#039;+&amp;#039;; position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); font-size: 1.5rem; color: var(--color-primary); } details[open] .faq-question::after { content: &amp;#039;-&amp;#039;; } .faq-answer { padding: 0 1rem 1rem; border-top: 1px solid var(--color-border); } .support-channels { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1.5rem; margin: 2rem 0; } .support-channel { padding: 1.5rem; background-color: var(--color-bg-alt); border-radius: 8px; } .channel-icon { display: inline-flex; align-items: center; justify-content: center; width: 48px; height: 48px; background-color: var(--color-primary); color: white; border-radius: 8px; margin-bottom: 1rem; } .support-channel h3 { margin-top: 0; margin-bottom: 0.5rem; } .support-channel p { margin-bottom: 1rem; color: var(--color-text-muted); } .channel-link { font-weight: 500; } .resource-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1.5rem; margin: 2rem 0; } .resource-card { padding: 1.5rem; border: 1px solid var(--color-border); border-radius: 8px; transition: transform 0.2s ease, box-shadow 0.2s ease; display: block; color: var(--color-text); } .resource-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); text-decoration: none; } .resource-card h3 { margin-top: 0; margin-bottom: 0.5rem; color: var(--color-primary); } .resource-card p { margin: 0; color: var(--color-text-muted); }",
        "description": "Get help with implementation, report bugs, or request new features.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Typography",
        "url": "/design-system/foundations/typography/",
        "content": "Typography # Typography plays a crucial role in creating clear, readable, and hierarchical interfaces. Our typography system provides guidelines for using fonts consistently across all enterprise applications. Font Families # The Enterprise Design System uses a combination of sans-serif and monospace fonts to create a professional and readable interface. Primary Font: Inter Aa Bb Cc Dd Ee 0123456789!@#$%^&amp;amp;*() Inter is used for all primary text, including headings, body text, and UI elements. It provides excellent readability at various sizes and weights. Monospace: IBM Plex Mono Aa Bb Cc Dd Ee 0123456789!@#$%^&amp;amp;*() IBM Plex Mono is used for code snippets, technical content, and data-focused UI elements where a monospaced font enhances readability. Type Scale # Our type scale is designed to create clear hierarchy while maintaining readability across different screen sizes. Name Size Line Height Weight Example Display 36px (2.25rem) 1.2 700 Display Heading 1 30px (1.875rem) 1.25 700 Heading 1 Heading 2 24px (1.5rem) 1.3 600 Heading 2 Heading 3 20px (1.25rem) 1.4 600 Heading 3 Heading 4 18px (1.125rem) 1.4 600 Heading 4 Body 16px (1rem) 1.5 400 Body text Small 14px (0.875rem) 1.5 400 Small text Caption 12px (0.75rem) 1.5 400 Caption text Font Weights # We use a range of font weights to create hierarchy and emphasis in our interfaces. Font Light (300) Used sparingly for large display text. Font Regular (400) Default weight for body text and most UI elements. Font Medium (500) Used for emphasis and importance within body text. Font Semibold (600) Used for subheadings and important UI elements. Font Bold (700) Used for headings and primary actions. Usage Guidelines # Hierarchy # Create clear hierarchies using a combination of size, weight, and color. Limit the number of type styles on a single screen to maintain visual order. Page Title Page subtitle or description Section Heading This is regular body text. It should be used for the main content of your interface. Keep paragraphs concise and focused on a single idea to improve readability. Subsection Heading Another paragraph of body text showing the hierarchy in action. This is small text, used for secondary information, captions, or helper text. Responsive Typography # Our typography system is designed to work across all screen sizes. Font sizes automatically adjust for different viewports to maintain readability. Responsive Typography Our typography scales down proportionally on mobile devices to maintain readability while preserving hierarchy. No additional code is required to support this behavior. Accessibility # Follow these guidelines to ensure typography is accessible to all users: Maintain a minimum font size of 14px (0.875rem) for body text. Ensure sufficient color contrast between text and its background. Avoid using font weight as the only visual differentiator. Don&amp;#039;t use all caps for lengthy text blocks. Keep line lengths between 60-80 characters for optimal readability. Technical Implementation # CSS Variables # Our typography system is implemented using CSS variables that can be used across your application: :root { /* Font families */ --eds-font-sans: &amp;#039;Inter&amp;#039;, system-ui, sans-serif; --eds-font-mono: &amp;#039;IBM Plex Mono&amp;#039;, monospace; /* Font sizes */ --eds-font-size-xs: 0.75rem; /* 12px */ --eds-font-size-sm: 0.875rem; /* 14px */ --eds-font-size-base: 1rem; /* 16px */ --eds-font-size-lg: 1.125rem; /* 18px */ --eds-font-size-xl: 1.25rem; /* 20px */ --eds-font-size-2xl: 1.5rem; /* 24px */ --eds-font-size-3xl: 1.875rem; /* 30px */ --eds-font-size-4xl: 2.25rem; /* 36px */ /* Line heights */ --eds-line-height-tight: 1.2; --eds-line-height-snug: 1.25; --eds-line-height-normal: 1.4; --eds-line-height-relaxed: 1.5; --eds-line-height-loose: 1.75; } Tailwind CSS # When using our design system with Tailwind CSS, the following classes map to our typography system: Font families: font-eds-sans, font-eds-mono Font sizes: text-xs, text-sm, text-base, text-lg, text-xl, text-2xl, text-3xl, text-4xl Font weights: font-light, font-normal, font-medium, font-semibold, font-bold Line heights: leading-tight, leading-snug, leading-normal, leading-relaxed, leading-loose Related Resources # Colors - Color guidelines and specifications Spacing - Spacing guidelines and scale Design Tokens - Technical implementation of our design system Accessibility - Accessibility guidelines and best practices",
        "description": "Typography guidelines and specifications for the Enterprise Design System",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "404 - Page Not Found",
        "url": "/404.html",
        "content": "404 Page Not Found The page you are looking for doesn&amp;#039;t exist or has been moved. Return to Home",
        "description": "",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Design System",
        "url": "/design-system/",
        "content": "Enterprise Design System # The Enterprise Design System (EDS) provides a comprehensive set of guidelines, components, and resources to help teams create cohesive, accessible, and visually consistent enterprise applications. Core Principles # Consistency Create seamless user experiences through consistent patterns, behaviors, and visual elements across all enterprise applications. Modularity Use modular components that can be combined in different ways to create flexible and adaptable user interfaces. Efficiency Optimize workflows and reduce cognitive load through intuitive interfaces and consistent interaction patterns. Inclusivity Design for all users with strong accessibility standards and support for diverse user needs and preferences. Design System Structure # The Enterprise Design System is organized into several key sections: Foundations Core design elements that form the building blocks of our interface. Color Typography Spacing Grid System Components Reusable UI elements that can be composed to create interfaces. Layout Components Input Components Navigation Components Guidelines Best practices and standards for creating effective interfaces. Accessibility Content Resources Tools and assets to help implement the design system. Design Tokens Templates Downloads Getting Started # If you&amp;#039;re new to the Enterprise Design System, we recommend starting with the following resources: Introduction to the Design System - Learn about the core concepts and principles. Design Foundations - Explore the fundamental elements that make up our visual language. Component Library - Browse our collection of UI components and learn how to use them. Design Tokens - Understand how to implement the design system in your projects.",
        "description": "Comprehensive guidelines and principles for creating consistent enterprise applications",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Spacing",
        "url": "/design-system/foundations/spacing/",
        "content": "Spacing # A consistent spacing system helps create balanced layouts and establish rhythmic relationships between elements. Our spacing scale is based on a 4px grid, providing predictable and harmonious spacing throughout interfaces. Spacing Scale # Our spacing scale follows a geometric progression to provide a natural and harmonious spacing rhythm: Token Value Pixels Rem Visual Example Usage space-0 0 0px 0rem No spacing space-1 0.25 4px 0.25rem Very tight spacing between related elements space-2 0.5 8px 0.5rem Tight spacing between closely related elements space-3 0.75 12px 0.75rem Spacing between related elements space-4 1 16px 1rem Standard spacing between elements (base unit) space-6 1.5 24px 1.5rem Medium spacing between distinct elements space-8 2 32px 2rem Standard section spacing space-12 3 48px 3rem Large section spacing space-16 4 64px 4rem Spacing between major sections space-20 5 80px 5rem Extra large section spacing space-24 6 96px 6rem Very large section spacing Spacing Usage Guidelines # To create consistent and harmonious layouts, follow these guidelines when applying spacing: 1. Use the spacing scale consistently # Always use the predefined spacing values instead of arbitrary values. This ensures consistency across all interfaces and maintains the design system&amp;#039;s rhythm. Do Header Content Footer Use consistent spacing (space-4 or 16px) between sections Don&amp;#039;t Header Content Footer Use inconsistent or arbitrary spacing values (12px, 20px) 2. Apply spacing hierarchically # Use smaller spacing values for related elements and larger values to separate distinct sections. This creates visual grouping that helps users understand the relationship between elements. Card Component Card Title This is an example card with proper spacing hierarchy. Item 1 Item 2 space-2 (8px): Between icon and text (closely related elements) space-4 (16px): Between card content sections space-8 (32px): Between cards (distinct elements) 3. Consider component density # Adjust spacing based on the desired density of your interface. High-density UIs (like dashboards or data tables) should use smaller spacing values, while marketing pages or content-focused pages can use larger spacing for readability. High Density UI Item 1 Value Item 2 Value Item 3 Value Uses smaller spacing values (space-1, space-2) Content UI This is an example of content-focused UI with more generous spacing. The additional whitespace improves readability and reduces cognitive load. Uses larger spacing values (space-3, space-4) 4. Be responsive # Adjust spacing based on screen size. Consider using smaller spacing values on mobile devices and larger values on desktop to optimize for different viewport sizes. Responsive Spacing Our design system utilizes Tailwind CSS utility classes for responsive spacing. For example, class=&amp;quot;mt-4 md:mt-6 lg:mt-8&amp;quot; applies different spacing at different breakpoints. Implementation # CSS Variables # Our spacing scale is implemented using CSS variables: :root { --space-0: 0; --space-1: 0.25rem; /* 4px */ --space-2: 0.5rem; /* 8px */ --space-3: 0.75rem; /* 12px */ --space-4: 1rem; /* 16px */ --space-6: 1.5rem; /* 24px */ --space-8: 2rem; /* 32px */ --space-12: 3rem; /* 48px */ --space-16: 4rem; /* 64px */ --space-20: 5rem; /* 80px */ --space-24: 6rem; /* 96px */ } Using Spacing in Components # When building components, use the spacing variables to ensure consistency: .card { padding: var(--space-4); margin-bottom: var(--space-6); } .card-content { margin-bottom: var(--space-4); } .card-item { margin-bottom: var(--space-2); } Utility Classes # You can also use our utility classes for margin and padding, which follow the same spacing scale: m-{size} - Margin on all sides mx-{size} - Horizontal margin (left and right) my-{size} - Vertical margin (top and bottom) mt-{size}, mr-{size}, mb-{size}, ml-{size} - Margin top, right, bottom, left p-{size} - Padding on all sides px-{size} - Horizontal padding (left and right) py-{size} - Vertical padding (top and bottom) pt-{size}, pr-{size}, pb-{size}, pl-{size} - Padding top, right, bottom, left Where {size} corresponds to the spacing scale values (0, 1, 2, 3, 4, 6, 8, 12, 16, 20, 24). Related Resources # For more information on how to use spacing effectively in your designs: Grid System - Learn how spacing relates to our grid system Layout Components - Components that help with layout and spacing Design Tokens - View all available design tokens, including spacing",
        "description": "A consistent spacing system to create balanced layouts and establish rhythmic relationships between elements",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Foundations",
        "url": "/design-system/foundations/",
        "content": "Foundations # Foundations are the core design elements that form the building blocks of our design system. They establish the visual language of our products and ensure consistency across all interfaces. Core Foundation Elements # Color Our color palette system, including primary and secondary colors, semantic colors, neutrals, and usage guidelines. View Color System â†’ Typography Example Typography Our typefaces, font weights, sizes, and styles for headings, body text, and UI elements. View Typography System â†’ Spacing Our spacing scale and system for consistent layout, padding, and margins across all interfaces. View Spacing System â†’ Iconography Our icon system, including usage guidelines, sizing, and available icon sets. View Icon System â†’ Grid System Our responsive grid system for consistent layouts across all screen sizes. View Grid System â†’ Accessibility Our accessibility guidelines and best practices for creating inclusive interfaces. View Accessibility Guidelines â†’ Purpose of Foundations # Foundation elements should be used consistently Foundations provide the basic building blocks for all design work. Use them consistently to create cohesive and harmonious interfaces. Foundations serve several critical purposes in our design system: 1. Establish a Consistent Visual Language # Foundations set the visual tone for all our products. By using consistent colors, typography, spacing, and other foundational elements, we create a cohesive look and feel across all interfaces. 2. Improve Design Efficiency # With pre-defined foundation elements, designers can make decisions more quickly and focus on solving user problems rather than debating basic visual choices. 3. Ensure Accessibility and Usability # Our foundations are designed with accessibility in mind. The color system includes contrast checking, typography ensures readability, and spacing creates clear visual hierarchies. 4. Support Theming and Customization # While consistency is important, our foundations also support theming and customization through design tokens that can be adjusted to meet specific brand needs. 5. Create a Shared Design Vocabulary # Foundations create a shared language for designers and developers to communicate efficiently about interface elements. How to Use Foundations # When working on designs or implementations, always start with the foundation elements. They provide the basic building blocks for all other components and patterns. Example: Building a Card Component When designing or implementing a card component, use foundation elements: Colors: Use the defined background, border, and text colors Typography: Follow heading and body text guidelines Spacing: Apply consistent padding and margins using the spacing scale Elevation: Use the appropriate shadow for the card&amp;#039;s visual hierarchy Card Title This is an example card that uses our foundation elements consistently, including color, typography, and spacing. Primary Action Implementation Principles # When implementing foundation elements in your designs and code, follow these principles: Use Design Tokens # Design tokens are named entities that store visual design attributes. Use design tokens rather than hard-coded values to ensure consistency and support theming. /* Don&amp;#039;t use hard-coded values */ .button { background-color: #0056b3; padding: 12px 16px; } /* Do use design tokens */ .button { background-color: var(--color-primary); padding: var(--space-3) var(--space-4); } Follow Documentation Closely # Each foundation element has specific usage guidelines. Follow these guidelines closely to ensure proper implementation and avoid inconsistencies. Use Foundation Elements as Building Blocks # Foundations should be the building blocks for all other components and patterns. Start with foundations, then build more complex elements on top of them. Related Resources # Design Tokens - View all available design tokens Figma Libraries - Access foundation styles in our Figma libraries Implementation Guide - Technical guidance for implementing foundation elements",
        "description": "The core design elements that form the building blocks of our design system",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigation Components",
        "url": "/components/navigation/",
        "content": "Navigation Components # Navigation components help users move through and find content in your application. They provide intuitive ways to explore, search, and discover content. Available Components # Navbar Navigation bars provide consistent access to primary navigation options Logo Link 1 Link 2 Link 3 Sidebar Sidebars provide secondary navigation options in a vertical layout Group 1 Item 1 Item 2 Group 2 Item 1 Content area Tabs Tabs allow users to switch between different views within the same context Tab 1 Tab 2 Tab 3 Tab 1 content area Breadcrumbs Breadcrumbs show the hierarchical path to the current page Home / Section / Current Page Pagination Pagination helps users navigate through multiple pages of content &amp;amp;laquo; 1 2 3 ... 10 &amp;amp;raquo; Menu Menus display a list of options or actions in a dropdown or popover Menu Option 1 Option 2 Option 3 Usage Guidelines # When working with navigation components, consider the following best practices: Provide clear visual indicators for the current location Use consistent navigation patterns throughout your application Ensure navigation is accessible via keyboard and screen readers Adapt navigation components for different screen sizes Use appropriate icons and labels to improve clarity Keep navigation structure simple and intuitive For component-specific guidelines, refer to the individual component documentation pages.",
        "description": "Navigation components help users move through and find content in your application",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Feedback Components",
        "url": "/components/feedback/",
        "content": "Feedback Components # Feedback components communicate system status and provide information to users. They help create a responsive and informative user experience by notifying users about events, errors, and processes. Available Components # Alert Alerts display important information, warnings, or error messages Information message goes here Toast Toast notifications provide non-disruptive feedback about completed actions Successfully saved! Your changes have been saved successfully. Progress Progress indicators show the completion status of a task or process 65% complete Skeleton Skeleton loaders provide a visual placeholder while content is loading Modal Modals focus user attention on important content or actions Modal Title Modal content goes here. Cancel Confirm Tooltip Tooltips provide additional context when users hover over or focus on elements Hover me This is a tooltip Usage Guidelines # When working with feedback components, consider the following best practices: Use appropriate colors and icons to convey the nature of the feedback Place feedback components in consistent locations throughout your application Ensure feedback is timely and relevant to user actions Provide clear, concise messages that explain what happened and what action to take Make feedback accessible to all users, including those using screen readers Use progressive loading indicators for operations that take longer than a second Allow users to dismiss non-critical feedback when appropriate For component-specific guidelines, refer to the individual component documentation pages.",
        "description": "Feedback components communicate system status and provide information to users",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Input Components",
        "url": "/components/inputs/",
        "content": "Input Components # Input components are UI elements that allow users to enter data, make selections, or trigger actions. They are essential building blocks for forms and interactive interfaces. Available Input Components # Input Components Components that enable users to input or manipulate data View Component â†’ Button Component A versatile button component supporting various styles, states, and sizes. View Component â†’ Accessibility Considerations # When using input components, keep these accessibility considerations in mind: All form controls should have associated labels Form elements should be keyboard accessible Error messages should be clearly associated with their respective inputs Required fields should be clearly indicated Focus states should be visible for keyboard users Best Practices # Use clear and concise labels # Labels should clearly describe the purpose of the input. Avoid using vague or technical terms that might confuse users. Provide helpful validation # Validate user input and provide clear error messages when the input doesn&amp;#039;t meet the requirements. Use inline validation where appropriate. Group related inputs # Group related inputs together using fieldsets and legends to provide context and improve understanding. Use appropriate input types # Use the appropriate input type for the data being collected (e.g., email, number, date) to provide the best user experience and enable browser-specific features. Maintain consistency # Use input components consistently throughout your application to create a cohesive user experience. Form Layout Guidelines # Align labels and inputs consistently Use a single-column layout for most forms Place related fields in close proximity Use appropriate spacing between form elements Position form actions (buttons) at the bottom of the form For more detailed guidance on forms, please refer to the Form Patterns documentation.",
        "description": "Components that enable users to input or manipulate data",
        "type": "Documentation",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Getting Started",
        "url": "/getting-started/",
        "content": "Getting Started Learn how to use the Enterprise Design System (EDS) in your projects On this page Introduction Installation Usage Key Concepts Browser Support Next Steps Introduction The Enterprise Design System (EDS) is a comprehensive set of design guidelines, components, and resources to help create consistent, accessible, and high-quality enterprise applications. This guide will help you get started with implementing EDS in your projects. Who is this for? This guide is intended for developers and designers who are implementing the Enterprise Design System in their projects. Familiarity with HTML, CSS, and JavaScript is recommended. Installation Using npm Install the EDS package from npm: npm install @enterprise/design-system Using a CDN You can also include EDS directly from a CDN: &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;https://cdn.enterprise.com/design-system/2.0.0/eds.min.css&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;script src=&amp;amp;quot;https://cdn.enterprise.com/design-system/2.0.0/eds.min.js&amp;amp;quot; defer&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt; Usage Basic Setup Include the CSS and JavaScript files in your HTML: &amp;amp;lt;!DOCTYPE html&amp;amp;gt; &amp;amp;lt;html lang=&amp;amp;quot;en&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;head&amp;amp;gt; &amp;amp;lt;meta charset=&amp;amp;quot;UTF-8&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;meta name=&amp;amp;quot;viewport&amp;amp;quot; content=&amp;amp;quot;width=device-width, initial-scale=1.0&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;title&amp;amp;gt;My Enterprise App&amp;amp;lt;/title&amp;amp;gt; &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;path/to/eds.min.css&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;/head&amp;amp;gt; &amp;amp;lt;body&amp;amp;gt; &amp;amp;lt;!-- Your content here --&amp;amp;gt; &amp;amp;lt;script src=&amp;amp;quot;path/to/eds.min.js&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt; &amp;amp;lt;/body&amp;amp;gt; &amp;amp;lt;/html&amp;amp;gt; Using Components Once the EDS is set up, you can use components by following the HTML structure and CSS classes documented in the Components section. Here&amp;#039;s a simple example using a button component: &amp;amp;lt;button class=&amp;amp;quot;eds-button eds-button--primary&amp;amp;quot;&amp;amp;gt;Primary Button&amp;amp;lt;/button&amp;amp;gt; Key Concepts BEM Methodology The EDS uses the BEM (Block, Element, Modifier) naming convention with an &amp;#039;eds-&amp;#039; prefix for all CSS classes. This helps to create a consistent and predictable class naming structure. Block: A standalone entity that is meaningful on its own (e.g., eds-button) Element: A part of a block that has no standalone meaning (e.g., eds-card__title) Modifier: A flag on a block or element that changes appearance or behavior (e.g., eds-button--primary) Design Tokens Design tokens are the visual design atoms of the design system â€” specifically, they are named entities that store visual design attributes. The EDS uses design tokens for colors, typography, spacing, and more. You can access these tokens through CSS variables: .custom-element { color: var(--eds-color-primary); padding: var(--eds-spacing-md); font-size: var(--eds-font-size-lg); } Browser Support The Enterprise Design System supports the following browsers: Chrome (latest 2 versions) Firefox (latest 2 versions) Safari (latest 2 versions) Edge (latest 2 versions) Internet Explorer 11 (with polyfills) Next Steps Explore Components Browse our library of UI components and learn how to use them in your project. View Components Design Tokens Learn about our design tokens and how to use them for consistent styling. View Design Tokens Patterns Explore common UI patterns and best practices for enterprise applications. View Patterns",
        "description": "Getting started with the Enterprise Design System",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Card",
        "url": "/components/layout/card/",
        "content": "Overview # The Card component is a flexible container for displaying related content and actions about a single subject. When to use # Use cards to: Display content and actions related to a single topic or object Group related information in a visually distinct container Create a consistent layout for multiple similar items Emphasize sections of content on a page Variants # Basic Card # The basic card provides a simple container for content with minimal styling. Media Card # The media card includes an image or other media at the top of the card. Action Card # The action card includes a clear call-to-action button or link. Interactive Card # The interactive card is fully clickable and acts as a navigation element. Accessibility # Ensure sufficient color contrast between card background and content Use appropriate heading hierarchy within cards Make interactive cards fully keyboard accessible Ensure card content is properly structured for screen readers Code Guidelines # Use the eds-card class for the container Include appropriate semantic HTML within cards Use modifier classes for different variants (e.g., eds-card--media, eds-card--action) Maintain proper spacing and alignment of card content Design Guidelines # Keep card content concise and focused on a single topic Maintain consistent spacing and alignment across multiple cards Use clear visual hierarchy within cards Ensure card actions are clearly distinguishable and user-friendly",
        "description": "Cards organize content and actions about a single subject",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Breadcrumb",
        "url": "/components/navigation/breadcrumb/",
        "content": "Overview # The Breadcrumb component displays a navigational path showing the user their current location within the site&amp;#039;s hierarchy. When to use # Use breadcrumbs when: The application has multiple hierarchical levels of navigation Users need to understand their current location within the site structure You want to provide a way for users to navigate up to parent pages The content is organized in a clear hierarchy Variants # Standard Breadcrumb # The standard breadcrumb shows the full path from the home page to the current page. Collapsed Breadcrumb # The collapsed breadcrumb shows the first and last few items in the path, with intermediate items collapsed to prevent excessive breadcrumb length. Interactive Breadcrumb # Interactive breadcrumbs include dropdown menus for each level, allowing users to navigate to sibling pages at each level. Accessibility # Use proper HTML structure with ordered list (&amp;amp;lt;ol&amp;amp;gt;) elements Include proper ARIA attributes to identify the breadcrumb as a navigation landmark Ensure proper color contrast for breadcrumb text and separators Make breadcrumb links keyboard accessible and properly focusable Code Guidelines # Use the eds-breadcrumb class for the container Use &amp;amp;lt;ol&amp;amp;gt; and &amp;amp;lt;li&amp;amp;gt; elements for the breadcrumb structure Include appropriate ARIA roles and attributes Use clear, concise text for each breadcrumb item Design Guidelines # Keep breadcrumb labels short and descriptive Use consistent visual separators between items Ensure breadcrumbs are appropriately sized for mobile devices Current page should be visually distinct but not a clickable link",
        "description": "Breadcrumbs show the navigational path within a site hierarchy",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Alert",
        "url": "/components/feedback/alert/",
        "content": "Overview # The Alert component provides contextual feedback messages for user actions and system states. Alerts are used to communicate important information, warnings, errors, or success messages to users. When to use # Use alerts when: Providing feedback about a user action (success, error, etc.) Communicating important system status information Warning users about potential issues Highlighting important information that requires attention Variants # Information Alert # Used for general information and neutral messages that don&amp;#039;t require immediate action. Success Alert # Used to confirm successful completion of an action or process. Warning Alert # Used to warn users about potential issues that may require attention. Error Alert # Used to communicate critical errors or problems that need immediate attention. Toast Alert # Temporary, auto-dismissing alerts that appear briefly to provide feedback. Accessibility # Use appropriate ARIA roles and attributes Include proper focus management for dismissible alerts Ensure proper color contrast for all alert variants Use clear, concise language in alert messages Provide programmatic ways to dismiss alerts Code Guidelines # Use the eds-alert class for the container Add variant modifiers like eds-alert--info, eds-alert--success, etc. Include appropriate icons to reinforce the alert type Use semantic HTML within alert content Implement proper focus management for interactive alerts Design Guidelines # Use consistent color coding for different alert types Include appropriate icons to reinforce the alert message Keep alert messages clear, concise, and actionable Position alerts in a consistent location within the interface Provide clear dismissal options when appropriate",
        "description": "Alerts provide contextual feedback messages for user actions and system states",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Components Directory",
        "url": "/components/directory/",
        "content": "Components Directory Browse the Enterprise Design System component library for reusable UI elements to build your applications Layout Card stable Grid stable Container stable Divider stable Navigation Breadcrumb stable Menu stable Tabs stable Pagination stable Feedback Alert stable Progress stable Toast stable Skeleton experimental Forms Button stable Input stable Checkbox stable Radio stable Select stable Textarea stable .eds-page-header { margin-bottom: var(--eds-spacing-8); } .eds-page-header__title { font-size: var(--eds-font-size-4xl); font-weight: var(--eds-font-weight-bold); margin: 0 0 var(--eds-spacing-3); color: var(--eds-color-neutral-900); } .eds-page-header__description { font-size: var(--eds-font-size-lg); color: var(--eds-color-neutral-700); max-width: 800px; } .eds-component-section { margin-bottom: var(--eds-spacing-12); } .eds-component-section__title { font-size: var(--eds-font-size-2xl); font-weight: var(--eds-font-weight-semibold); margin: 0 0 var(--eds-spacing-6); color: var(--eds-color-neutral-900); padding-bottom: var(--eds-spacing-3); border-bottom: var(--eds-border-width-thin) solid var(--eds-color-neutral-200); } .eds-component-list { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: var(--eds-spacing-4); } .eds-component-item { display: flex; justify-content: space-between; align-items: center; padding: var(--eds-spacing-4); background-color: white; border-radius: var(--eds-border-radius-md); box-shadow: var(--eds-shadow-base); text-decoration: none; transition: transform var(--eds-transition-fast) ease-in-out, box-shadow var(--eds-transition-fast) ease-in-out; } .eds-component-item:hover { transform: translateY(-2px); box-shadow: var(--eds-shadow-md); } .eds-component-item__title { font-size: var(--eds-font-size-lg); font-weight: var(--eds-font-weight-medium); margin: 0; color: var(--eds-color-neutral-900); }",
        "description": "Browse the Enterprise Design System component library",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Enterprise Design System",
        "url": "/alternative-home/",
        "content": "Enterprise Design System A unified platform for building consistent, accessible, and high-quality enterprise applications Get Started View Components What&amp;#039;s New Version 2.0 Released February 15, 2025 We&amp;#039;ve released version 2.0 of the Enterprise Design System with new components, improved documentation, and better accessibility. Read more New Data Table Component February 10, 2025 The new Data Table component provides a powerful way to display and interact with structured data in your applications. View component Improved Accessibility February 5, 2025 All components have been audited and updated to ensure compliance with WCAG 2.1 AA accessibility standards. Read guidelines Component Categories Layout Card stable Grid stable Container stable Divider stable View all Layout components Navigation Breadcrumb stable Menu stable Tabs stable Pagination stable View all Navigation components Feedback Alert stable Progress stable Toast stable Skeleton experimental View all Feedback components Forms Button stable Input stable Checkbox stable Radio stable View all Forms components Get Started Design Tokens Learn how to use our design tokens to maintain consistent styling across your applications. Explore design tokens Guidelines Discover our design and development guidelines to ensure consistency across your projects. Review guidelines Patterns Explore common UI patterns and learn how to solve common design challenges in your applications. Explore patterns Resources Figma Library Access our Figma component library to kickstart your design process. Sketch Library Download our Sketch component library for designing with the Enterprise Design System. Icon Library Browse and download our comprehensive collection of UI icons. Starter Templates Get a head start with our application templates and boilerplates.",
        "description": "A unified documentation platform for the Enterprise Design System",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Home",
        "url": "/alternative-home-tailwind/",
        "content": "Enterprise Design System A comprehensive design system for building consistent, accessible, and beautiful enterprise applications. Get Started Browse Components Everything you need to build enterprise applications Design Foundations Comprehensive color palettes, typography, spacing, and other foundational elements for consistent design. Explore Foundations Components A library of 40+ ready-made, accessible UI components from buttons to complex data tables. Browse Components Guidelines Accessibility, responsive design, and content guidelines to ensure high-quality implementations. View Guidelines Quick Search Looking for something specific? Search our documentation. Featured Components Primary Secondary Buttons Cards Input label Text Fields Tab 1 Tab 2 Tab 3 Tabs Latest Updates Design System v2.0.0 Released February 20, 2025 Major update with new components, improved accessibility, and dark mode support. View Release Notes â†’ New Component: Data Table February 10, 2025 Introducing our new Data Table component with sorting, filtering, and pagination. View Component â†’ Updated Accessibility Guidelines January 28, 2025 Our accessibility guidelines have been updated to follow WCAG 2.2 standards. View Guidelines â†’ Ready to get started? Join thousands of developers building better enterprise applications with our design system. Get Started View Examples",
        "description": "The Enterprise Design System Documentation",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Search",
        "url": "/search/",
        "content": "Search Clear search 0 results found Enter a search term above",
        "description": "Search the Enterprise Design System Documentation",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Button Component",
        "url": "/components/inputs/button/",
        "content": "Overview # Buttons are used to trigger actions or events, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation. Variants # The Enterprise Design System provides several button variants to convey different levels of emphasis: Primary Button # Use primary buttons for the main action in a section or page. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt;Primary Button&amp;amp;lt;/button&amp;gt; Primary Button Secondary Button # Secondary buttons are for alternative actions that aren&amp;#039;t as important as the primary action. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--secondary&amp;quot;&amp;gt;Secondary Button&amp;amp;lt;/button&amp;gt; Secondary Button Tertiary Button # Tertiary buttons are for less important actions or used within content for inline actions. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--tertiary&amp;quot;&amp;gt;Tertiary Button&amp;amp;lt;/button&amp;gt; Tertiary Button Destructive Button # Use destructive buttons for actions that might result in data loss or other significant consequences. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--danger&amp;quot;&amp;gt;Delete&amp;amp;lt;/button&amp;gt; Delete Sizes # Buttons come in three standard sizes: Small # &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary eds-button--sm&amp;quot;&amp;gt;Small Button&amp;amp;lt;/button&amp;gt; Small Button Medium (Default) # &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt;Medium Button&amp;amp;lt;/button&amp;gt; Medium Button Large # &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary eds-button--lg&amp;quot;&amp;gt;Large Button&amp;amp;lt;/button&amp;gt; Large Button States # Buttons can appear in several different states: Default # The normal state of a button. Hover # How a button appears when a user hovers over it. Focus # How a button appears when it receives keyboard focus. Active # How a button appears when it&amp;#039;s being clicked or activated. Disabled # Use disabled buttons to indicate that an action is not currently available. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot; disabled&amp;gt;Disabled Button&amp;amp;lt;/button&amp;gt; Disabled Button With Icon # Buttons can include icons to provide additional visual cues about the action. Icon Before Text # &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;eds-icon&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M12 2L2 7l10 5 10-5z&amp;quot;&amp;gt;&amp;amp;lt;/path&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;span&amp;gt;Button with Icon&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Button with Icon Icon After Text # &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; &amp;amp;lt;span&amp;gt;Button with Icon&amp;amp;lt;/span&amp;gt; &amp;amp;lt;svg class=&amp;quot;eds-icon&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M5 12h14M12 5l7 7-7 7&amp;quot;&amp;gt;&amp;amp;lt;/path&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; Button with Icon Icon Only Button # &amp;amp;lt;button class=&amp;quot;eds-button eds-button--icon eds-button--primary&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;eds-icon&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M5 12h14M12 5l7 7-7 7&amp;quot;&amp;gt;&amp;amp;lt;/path&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;span class=&amp;quot;eds-sr-only&amp;quot;&amp;gt;Next&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Next Button Groups # Button groups allow you to display a set of related actions. &amp;amp;lt;div class=&amp;quot;eds-button-group&amp;quot;&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button eds-button--secondary&amp;quot;&amp;gt;Cancel&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt;Submit&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; Cancel Submit Usage Guidelines # Use primary buttons for the main action on a page or in a section Limit the number of primary buttons on a page to avoid confusion Use secondary buttons for alternative actions that aren&amp;#039;t as important Use tertiary buttons for less important actions Use destructive buttons for actions that might result in data loss Always provide a text label for buttons, even those with icons Use sentence case for button labels (e.g., &amp;amp;quot;Save changes&amp;amp;quot; not &amp;amp;quot;Save Changes&amp;amp;quot;) Keep button labels short and clear â€” use verbs that describe the action Accessibility # Always include text labels for buttons, even for icon-only buttons (use visually hidden text) Ensure buttons have sufficient contrast against their background Make sure the button&amp;#039;s purpose is clear from its label Use the correct HTML element: &amp;amp;lt;button&amp;amp;gt; for actions and &amp;amp;lt;a&amp;amp;gt; for navigation Ensure buttons are keyboard accessible and have visible focus states Code Examples # React # import React from &amp;#039;react&amp;#039;; import { Button } from &amp;#039;@enterprise-design-system/react&amp;#039;; function Example() { return ( &amp;amp;lt;div&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; console.log(&amp;#039;Clicked!&amp;#039;)}&amp;gt; Primary Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;secondary&amp;quot;&amp;gt; Secondary Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;tertiary&amp;quot;&amp;gt; Tertiary Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;danger&amp;quot;&amp;gt; Delete &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; size=&amp;quot;sm&amp;quot;&amp;gt; Small Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; disabled&amp;gt; Disabled Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; startIcon={&amp;amp;lt;AddIcon /&amp;gt;}&amp;gt; Button with Icon &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;/div&amp;gt; ); } Vue # Primary Button Secondary Button Tertiary Button Delete Small Button Disabled Button Button with Icon import { EdsButton } from &amp;#039;@enterprise-design-system/vue&amp;#039;; import { AddIcon } from &amp;#039;@enterprise-design-system/icons&amp;#039;; export default { components: { EdsButton }, data() { return { AddIcon } }, methods: { handleClick() { console.log(&amp;#039;Clicked!&amp;#039;); } } } Design Tokens # The button component uses the following design tokens: Token Value Description --eds-button-primary-bg var(--color-primary) Primary button background color --eds-button-primary-text white Primary button text color --eds-button-primary-hover-bg var(--color-primary-dark) Primary button hover background color --eds-button-border-radius 4px Button border radius --eds-button-font-weight 500 Button font weight --eds-button-disabled-opacity 0.6 Opacity for disabled buttons",
        "description": "A versatile button component supporting various styles, states, and sizes.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Layout Components",
        "url": "/components/layout/",
        "content": "Layout Components # Layout components help structure and organize content on the page, providing consistent containers and spatial arrangements. Accordion Expandable panels that show and hide content to conserve space. View component â†’ Card Versatile containers for displaying related content and actions. View component â†’ Grid Flexible layout system for organizing content in rows and columns. View component â†’ Modal Dialog boxes that appear in front of the main content. View component â†’ Tabs Organizes content into separate views within the same context. View component â†’ Divider Visual separators for distinguishing content sections. View component â†’",
        "description": "Components that help with page structure and content organization.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigate by Channel",
        "url": "/navigation/by-channel/",
        "content": "Browse By Channel Type Owner Browse by Channel Components organized by their target channels or environments. Web Card Accordion Button Breadcrumb View all web components Mobile Card Button Toast Toggle View all mobile components Desktop Modal Grid Tabs Spinner View all desktop components",
        "description": "Browse components organized by their target channels or environments",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigate by Type",
        "url": "/navigation/by-type/",
        "content": "Browse By Channel Type Owner Browse by Type Components organized by their functional categories and types. Input Components Button Checkbox Radio Select View all input components Layout Components Card Accordion Modal Grid View all layout components Navigation Components Breadcrumb Tabs Pagination Menu View all navigation components Feedback Components Alert Toast Progress Spinner View all feedback components Data Display Components Table List Badge Tag View all data display components",
        "description": "Browse components organized by their functional types and categories",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigate by Owner",
        "url": "/navigation/by-owner/",
        "content": "Browse By Channel Type Owner Browse by Owner Components organized by the teams responsible for their development and maintenance. UI UI Core Team Core component library maintainers Card Accordion Button Breadcrumb View all UI Core components FP Frontend Platform Advanced components and tools Table Chart Tree Visualization View all Frontend Platform components ME Mobile Experience Mobile-specific components Swipe Actions Pull to Refresh Bottom Sheet Gesture Handler View all Mobile Experience components DS Design Systems Design tokens and foundations Colors Typography Spacing Icons View all Design Systems resources A11y Accessibility Specialized accessible components Screen Reader Focus Trap Skip Link ARIA Live View all Accessibility components",
        "description": "Browse components organized by their owners and teams responsible for maintenance",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Component Navigation Hub",
        "url": "/navigation/",
        "content": "Component Navigation Hub Discover the right components using multiple navigation perspectives. Navigate by Channel Find components organized by the channels or environments they&amp;#039;re designed for. â€¢ Web Components â€¢ Mobile Components â€¢ Desktop Components Browse by Channel Navigate by Type Explore components categorized by their functional types and purposes. â€¢ Input Components â€¢ Layout Components â€¢ Navigation Components â€¢ Feedback Components Browse by Type Navigate by Owner Find components based on the teams responsible for their development and maintenance. â€¢ UI Core Team â€¢ Frontend Platform Team â€¢ Mobile Experience Team â€¢ Design Systems Team Browse by Owner Search Components Looking for something specific? Search our component library. Recently Updated Components Updated 2 days ago Accordion Expandable content sections that help organize and declutter interfaces. View Component Updated 5 days ago Button Versatile interactive elements for user actions in various states and sizes. View Component Updated 1 week ago Card Flexible container components for displaying related content and actions. View Component",
        "description": "Multiple ways to browse and discover components in our design system",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "",
        "url": "/utils/migration/readme/",
        "content": "Migration Utilities # This directory contains utilities for migrating content from legacy documentation sites into our unified 11ty documentation platform. Available Migration Tools # html-to-md.js - Converts HTML-based legacy sites to Markdown format xml-to-md.js - Converts XML-based legacy documentation to Markdown format legacy-parser.js - Parser for proprietary legacy documentation formats md-formatter.js - Formats and normalizes converted Markdown files Usage # These utilities are meant to be used as part of the migration scripts found in the scripts/migration directory.",
        "description": "",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Migration Tools",
        "url": "/resources/migration-tools/",
        "content": "Migration Tools # The Enterprise Documentation System (EDS) provides a suite of tools to help migrate content from legacy documentation systems into our unified 11ty-based platform. These tools are designed to preserve content structure and formatting while converting to Markdown format, which is the standard for our documentation. Available Migration Utilities # The following migration utilities are available to help you convert content from various sources: HTML to Markdown Converter # Converts HTML-based legacy sites to Markdown format. This utility can handle: Generic HTML content Confluence-specific HTML formats SharePoint-specific HTML formats Jira documentation WordPress content XML to Markdown Converter # Converts XML-based documentation formats to Markdown, supporting: DITA XML DocBook XML Generic XML structures Nunjucks to Markdown Converter # Converts Nunjucks templates to Markdown format, useful for migrating from other 11ty-based sites. Markdown Formatter # Formats and normalizes converted Markdown files to ensure they adhere to our documentation standards and styling conventions. Migration CLI Tool # We provide a command-line interface (CLI) tool that makes it easy to run migrations either on individual files or in batch mode for entire directories. Installation # The migration tools are included in the repository. Before using them, make sure you have the necessary dependencies installed: npm install Basic Usage # Single File Conversion # To convert a single file from a legacy format to Markdown: node scripts/migration/migrate.js convert source.html destination.md --type html Batch Conversion # To convert multiple files in a directory: node scripts/migration/migrate.js batch source-directory/ destination-directory/ --type html Configuration File # For more complex migration scenarios, you can create a configuration file: node scripts/migration/migrate.js schema migration-config.yml Then use the configuration file in your migration: node scripts/migration/migrate.js batch source-directory/ destination-directory/ --config migration-config.yml Migration Options # The migration tools support the following options: Option Description --type Source file type (html, xml, njk) --site-type Type of site (confluence, sharepoint, jira, wordpress) --front-matter Additional front matter as JSON string --config Path to a YAML configuration file --recursive Process directories recursively (for batch operations) --pattern File name pattern to match (for batch operations) Best Practices for Content Migration # When migrating content from legacy systems, consider the following best practices: Preparation # Content Audit: Perform a content audit to identify what needs to be migrated and what can be discarded. Structure Planning: Map the structure of your legacy content to the new documentation structure. Test Migration: Run test migrations on a small subset of content before processing everything. During Migration # Preserve Metadata: Make sure to capture and convert any metadata like authors, dates, and categories. Handle Images: Ensure images are properly transferred and references are updated. Check Links: Update internal links to reflect the new structure. Post-Migration # Format Review: Review the formatting of migrated content to ensure it meets our standards. Structural Check: Verify the structure and navigation of the migrated content. Fix Broken Elements: Address any elements that didn&amp;#039;t convert properly. Example: Migrating from Confluence # Here&amp;#039;s an example of migrating content from Confluence: # Create a migration configuration node scripts/migration/migrate.js schema confluence-migration.yml # Edit the configuration file to customize settings # Run the migration node scripts/migration/migrate.js batch confluence-export/ src/migrated-content/ --config confluence-migration.yml # Format the migrated content node src/utils/migration/md-formatter.js batch src/migrated-content/ Example Configuration File # Here&amp;#039;s an example of a migration configuration file: # Migration Configuration type: html siteType: confluence # Processing options options: recursive: true pattern: &amp;quot;*.html&amp;quot; # Image handling images: handling: copy destDir: &amp;quot;src/assets/images/migrated&amp;quot; baseUrl: &amp;quot;/assets/images/migrated&amp;quot; # Front matter to add to all converted files frontMatter: layout: layouts/base.njk eleventyNavigation: key: Migrated Content parent: Documentation tags: - migrated migrationSource: &amp;quot;Confluence&amp;quot; migrationDate: &amp;quot;2025-02-27&amp;quot; Technical Documentation # For detailed technical documentation on the migration utilities, refer to: HTML to Markdown Converter API XML to Markdown Converter API Nunjucks to Markdown Converter API Markdown Formatter API Getting Help # If you encounter issues with the migration tools, please reach out to the Documentation Team or file an issue in the repository.",
        "description": "Tools and utilities for migrating legacy documentation to the Enterprise Documentation System",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Components",
        "url": "/components/",
        "content": "Enterprise Design System Components Our component library provides consistent, accessible, and flexible building blocks for creating enterprise applications. Browse Layout Components View Design Foundations Component Categories Our components are organized into four functional categories: Input Components - For user input and data manipulation Layout Components - For structuring content and UI elements Navigation Components - For user wayfinding and movement Feedback Components - For user notifications and messaging Component Structure Each component follows a consistent documentation structure: Overview - Description and use cases Code - Implementation details and API Usage - Guidelines and best practices Accessibility - WCAG compliance information Featured Components Card Cards organize content and actions about a single subject View Component Layout Components Components that help with page structure and content organization. View Component Design Principles All components in the Enterprise Design System follow these core principles: Consistent Visual and behavioral consistency across all interfaces using shared design tokens. Accessible Meeting WCAG 2.1 AA standards, making applications usable by people with disabilities. Responsive Adapting to various screen sizes, from desktop to mobile, for a consistent user experience. Customizable Flexible components that can be customized to meet specific design needs and brand guidelines. Get Started with Components",
        "description": "A comprehensive library of reusable UI components for building enterprise applications",
        "type": "Documentation",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/accessibility/",
        "content": "Accessibility Accordions should be accessible to all users, including those using assistive technologies such as screen readers. Follow these guidelines to ensure your accordions meet accessibility standards. ARIA Roles and Attributes Use aria-expanded on the header button to indicate the expanded/collapsed state Include aria-controls on the header button that points to the ID of the content panel Apply role=&amp;amp;quot;region&amp;amp;quot; to the content panel with aria-labelledby pointing to the header ID Ensure all interactive elements have appropriate ARIA roles and states Use aria-disabled=&amp;amp;quot;true&amp;amp;quot; when an accordion is disabled but still visible Keyboard Navigation Key Function Tab Moves focus to the accordion header Enter or Space Toggles the accordion panel between expanded and collapsed states Arrow Down When focus is on an accordion header, moves focus to the next accordion header Arrow Up When focus is on an accordion header, moves focus to the previous accordion header Home When focus is on an accordion header, moves focus to the first accordion header End When focus is on an accordion header, moves focus to the last accordion header Implementation Here&amp;#039;s how to correctly implement an accessible accordion: &amp;amp;lt;div class=&amp;amp;quot;eds-accordion&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt; &amp;amp;lt;button id=&amp;amp;quot;accordion-header-1&amp;amp;quot; class=&amp;amp;quot;eds-accordion__header&amp;amp;quot; aria-expanded=&amp;amp;quot;false&amp;amp;quot; aria-controls=&amp;amp;quot;accordion-panel-1&amp;amp;quot;&amp;amp;gt; Accordion Heading &amp;amp;lt;span class=&amp;amp;quot;eds-accordion__icon&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;accordion-panel-1&amp;amp;quot; class=&amp;amp;quot;eds-accordion__content&amp;amp;quot; role=&amp;amp;quot;region&amp;amp;quot; aria-labelledby=&amp;amp;quot;accordion-header-1&amp;amp;quot; hidden&amp;amp;gt; Accordion content goes here. &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Don&amp;#039;t use role=&amp;amp;quot;button&amp;amp;quot; on elements that aren&amp;#039;t naturally focused in the tab order. Instead, use a semantic button element to ensure proper keyboard interaction. Testing Criteria Ensure your accordion passes these accessibility checks: Accordion headers must be focusable and operable with a keyboard State changes must be programmatically announced to screen readers Focus must remain on the header after expanding/collapsing Content must be properly associated with its header Color contrast must meet WCAG AA standards (4.5:1 for normal text) Icons must have sufficient contrast and not rely solely on color Animations must respect user preferences via the prefers-reduced-motion media query WAI-ARIA Compliance The accordion component follows the WAI-ARIA Accordion Pattern. This ensures consistency with established accessibility standards and patterns. Required ARIA Attributes Attribute Applied to Purpose aria-expanded Accordion header button Indicates whether the accordion panel is expanded or collapsed aria-controls Accordion header button References the ID of the controlled panel aria-labelledby Accordion panel References the ID of the header for labeling role=&amp;amp;quot;region&amp;amp;quot; Accordion panel Identifies the element as a region when expanded When using role=&amp;amp;quot;region&amp;amp;quot;, it&amp;#039;s important to ensure the region has an accessible name using aria-labelledby to avoid ARIA validation errors. Responsive Considerations For users on mobile or touch devices: Ensure touch targets (accordion headers) are at least 44Ã—44 pixels Provide sufficient spacing between adjacent accordion headers to prevent accidental taps Consider starting with all accordions collapsed on mobile to minimize initial scrolling Ensure text remains readable at smaller viewport sizes Adapt padding and margins for comfortable viewing on small screens Screen Reader Announcements When implemented correctly, screen readers should announce the following when interacting with an accordion: Action Announcement Focus on collapsed header &amp;amp;quot;Accordion Heading, collapsed, button&amp;amp;quot; Expand accordion &amp;amp;quot;Accordion Heading, expanded, button&amp;amp;quot; Collapse accordion &amp;amp;quot;Accordion Heading, collapsed, button&amp;amp;quot; Focus on disabled header &amp;amp;quot;Accordion Heading, button, disabled&amp;amp;quot; Test your accordions with real screen readers like NVDA, JAWS, and VoiceOver to ensure they work as expected.",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/code/",
        "content": "Installation Make sure the necessary specific libraries are installed (no information or elements of these sites if you are integrating them into other components). HTML &amp;amp;amp; CSS npm install @enterprise-design-system/accordion React npm install @enterprise-design-system/react-accordion Attributes When using properties in JavaScript, use camelCase versions of the attribute names listed below. Attribute Type Default Description expanded boolean false Expands the accordion panel when set to true. disabled boolean false Disables the accordion when set to true. icon-position string right Position of the indicator icon. Options: &amp;#039;left&amp;#039;, &amp;#039;right&amp;#039;, &amp;#039;none&amp;#039;. aria-labelledby string undefined ID reference to the element that labels the accordion. aria-controls string undefined ID reference to the controlled content section. Events Name Event content expand Fires when the accordion section is expanded collapse Fires when the accordion section is collapsed States Name Default variant Description Default false The normal, collapsed state of the accordion Expanded false When the accordion panel is open and content is visible Focused false When the accordion header has keyboard focus Disabled false When the accordion is not interactive CSS Helper classes CSS class Applies to Outcome eds-accordion Container Main container class eds-accordion__header Header element Styles for the clickable header eds-accordion__content Content container Styles for the expandable content eds-accordion__icon Icon element Styles for the indicator icon eds-accordion--expanded Container Applied when accordion is expanded eds-accordion--disabled Container Applied when accordion is disabled CSS modifier classes CSS class Applies to Outcome eds-accordion--bordered Container Adds a border around the accordion eds-accordion--compact Container Reduces padding for a more compact appearance eds-accordion--icon-left Container Positions the icon on the left side eds-accordion--no-icon Container Removes the indicator icon eds-accordion--with-bg Container Adds a background color to the header Namespaceing If your architecture currently conflicts with Enterprise UI or any other external libraries, it may be that there are conflicting styles (i.e. you are targeting specific selectors in your own code). All components in Enterprise Design System are prefixed with &amp;#039;eds-&amp;#039; to help reduce the possibility of selector conflicts. Import reference The following two references are used to load libraries and should be referenced from Enterprise Design libraries. These references can be used at any component level. import { Accordion } from &amp;#039;@enterprise-design-system/react-components&amp;#039;; &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;https://cdn.enterprise-design.com/libs/accordion.css&amp;amp;quot;&amp;amp;gt; Javascript The following JS code samples can be used to interact with Enterprise Design accordion component: // Initialize an accordion const accordion = new EnterpriseAccordion(document.querySelector(&amp;#039;.eds-accordion&amp;#039;)); // Expand an accordion accordion.expand(); // Collapse an accordion accordion.collapse(); // Toggle an accordion accordion.toggle(); // Listen for events accordion.addEventListener(&amp;#039;expand&amp;#039;, (event) =&amp;amp;gt; { console.log(&amp;#039;Accordion expanded&amp;#039;); }); accordion.addEventListener(&amp;#039;collapse&amp;#039;, (event) =&amp;amp;gt; { console.log(&amp;#039;Accordion collapsed&amp;#039;); }); // Disable an accordion accordion.disabled = true; // Enable an accordion accordion.disabled = false; SCSS The following SCSS variables are used by Enterprise Design&amp;#039;s accordion when creating/implementing component: // Accordion variables $eds-accordion-header-bg: var(--color-bg-alt); $eds-accordion-header-color: var(--color-text); $eds-accordion-header-font-weight: 500; $eds-accordion-header-padding: 1rem; $eds-accordion-content-padding: 1rem; $eds-accordion-border-color: var(--color-border); $eds-accordion-border-radius: 0.25rem; $eds-accordion-icon-size: 1.25rem; $eds-accordion-icon-color: var(--color-text-muted); $eds-accordion-icon-transition: transform 0.2s ease-in-out; $eds-accordion-focus-ring-color: var(--color-primary); $eds-accordion-focus-ring-width: 2px; $eds-accordion-transition-duration: 0.2s; // In your custom implementation @import &amp;#039;@enterprise-design-system/scss/components/accordion&amp;#039;; // Override variables if needed $eds-accordion-header-bg: #f5f5f5; // Use the accordion mixins .custom-accordion { @include eds-accordion(); // Customizations .eds-accordion__header { border-bottom: 2px solid $eds-accordion-border-color; } }",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/examples/",
        "content": "Examples Basic Accordion A standard accordion with default styling. Section 1: Introduction This is the content for section 1. It can include any type of content including text, images, and other components. Section 2: Features Section 3: Specifications &amp;amp;lt;div class=&amp;amp;quot;eds-accordion&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;div&amp;amp;gt; &amp;amp;lt;button class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Section 1: Introduction&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;p-4 border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;This is the content for section 1.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;button class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Section 2: Features&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;button class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Section 3: Specifications&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Icon Left Accordion An accordion with the expand/collapse icon positioned on the left. Payment Methods Configure your payment methods and preferences. Shipping Address Order History FAQ Accordion A common implementation pattern for FAQs with multiple sections that can be open simultaneously. How do I reset my password? To reset your password, click on the &amp;amp;quot;Forgot Password&amp;amp;quot; link on the login page. You&amp;#039;ll receive an email with instructions to create a new password. How do I update my account information? Can I change my subscription plan? Fully Accessible Accordion An example with all required accessibility attributes for screen reader support. Getting Started This panel includes all the necessary ARIA attributes for accessible accordions. Notice how the expanded state is clearly indicated both visually and programmatically. Advanced Configuration This content is hidden by default. &amp;amp;lt;div class=&amp;amp;quot;eds-accordion&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt; &amp;amp;lt;button id=&amp;amp;quot;acc-panel1-header&amp;amp;quot; class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot; aria-expanded=&amp;amp;quot;true&amp;amp;quot; aria-controls=&amp;amp;quot;acc-panel1-content&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Getting Started&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5 transform rotate-180&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;acc-panel1-content&amp;amp;quot; role=&amp;amp;quot;region&amp;amp;quot; aria-labelledby=&amp;amp;quot;acc-panel1-header&amp;amp;quot; class=&amp;amp;quot;p-4 border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Panel content with accessibility features.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt; &amp;amp;lt;button id=&amp;amp;quot;acc-panel2-header&amp;amp;quot; class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium border-t&amp;amp;quot; aria-expanded=&amp;amp;quot;false&amp;amp;quot; aria-controls=&amp;amp;quot;acc-panel2-content&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Advanced Configuration&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;acc-panel2-content&amp;amp;quot; role=&amp;amp;quot;region&amp;amp;quot; aria-labelledby=&amp;amp;quot;acc-panel2-header&amp;amp;quot; class=&amp;amp;quot;hidden p-4 border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;This content is hidden by default.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Custom Styled Accordion An example with custom styling applied to demonstrate flexibility. Performance Optimization This accordion uses custom colors and icons to match a specific visual style. You can adapt the styling to fit your application&amp;#039;s design system. Security Best Practices document.addEventListener(&amp;#039;DOMContentLoaded&amp;#039;, () =&amp;gt; { // Simple accordion functionality for the examples const accordionButtons = document.querySelectorAll(&amp;#039;.eds-accordion button&amp;#039;); accordionButtons.forEach(button =&amp;gt; { button.addEventListener(&amp;#039;click&amp;#039;, () =&amp;gt; { const isExpanded = button.getAttribute(&amp;#039;aria-expanded&amp;#039;) === &amp;#039;true&amp;#039;; const controlsId = button.getAttribute(&amp;#039;aria-controls&amp;#039;); const content = controlsId ? document.getElementById(controlsId) : button.nextElementSibling; const icon = button.querySelector(&amp;#039;svg&amp;#039;); if (isExpanded) { button.setAttribute(&amp;#039;aria-expanded&amp;#039;, &amp;#039;false&amp;#039;); if (content) content.classList.add(&amp;#039;hidden&amp;#039;); if (icon) icon.classList.remove(&amp;#039;rotate-180&amp;#039;); } else { button.setAttribute(&amp;#039;aria-expanded&amp;#039;, &amp;#039;true&amp;#039;); if (content) content.classList.remove(&amp;#039;hidden&amp;#039;); if (icon) icon.classList.add(&amp;#039;rotate-180&amp;#039;); } }); }); });",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/",
        "content": "Anatomy Accordion heading Accordion content goes here. This area can contain text, images, and other components. Key Elements 1 Header - Contains the accordion title and expansion control 2 Icon - Indicates the current state (expanded or collapsed) 3 Content Area - Contains the information revealed when the accordion is expanded Structured breakdown and detailed description of the components and their relationships within a user interface. Considerations When to use the accordion component If you have a large amount of content to display within a page When users need to focus on specific sections of information To reduce scrolling and make content more scannable When content can be logically divided into discrete sections For FAQ sections or hierarchical information When to use something else If users need to see all content at once for comparison If there&amp;#039;s not enough content to warrant progressive disclosure When the content hierarchy is less important If users will frequently need to switch between multiple sections For critical information that should always be visible Key factors and criteria that influence design decisions regarding component choice for alignment with user needs and design system guidelines. Usage General Usage Guidelines Group related content Organize information into logical sections with descriptive headers. Clear heading content Use concise, descriptive headings to help users understand the hidden content. Consider default states Determine whether accordions should be collapsed or expanded by default based on user needs. Consistent interaction pattern Ensure the entire header area is clickable, not just the icon or text. Support keyboard navigation Ensure accordions can be operated with keyboard controls for accessibility. Guidelines and best practices for the implementation of design components, ensuring they are used consistently and appropriately when applied. Behavior Expanding When a user clicks or focuses and presses Enter on the accordion header, the content area expands. The icon rotates 180 degrees to indicate the expanded state. By default, multiple accordion sections can be open simultaneously, but this behavior can be configured to allow only one open section at a time. Collapsing When a user clicks an expanded accordion header, the content area collapses and is hidden from view. The icon rotates back to its original position. Focus States When users tab through the page, the accordion headers receive a visible focus indicator to support keyboard navigation. Highlights interactive and dynamic aspects of design components, detailing how they respond to user actions and changes in state in relation to the user experience. Best Practices Do Keep accordion headings short, clear, and descriptive Prioritize content within accordions based on user needs Ensure consistent spacing between accordion items Consider expandable and collapsible animations for smooth transitions Use appropriate ARIA attributes to enhance accessibility Don&amp;#039;t Nest accordions within accordions (avoid excessive nesting) Hide critical information that users need immediately Include too many accordions on a single page (cognitive overload) Use non-descriptive headings that don&amp;#039;t clearly indicate content Rely solely on color to indicate the accordion state Content Ensure accordion headings are descriptive and self-sufficient Avoid repetitive or redundant information across accordion sections Place most important content in the first few accordions Keep content within each accordion section focused and concise Consider using icons or visual cues to improve scannability Ensure content hierarchy makes sense in the context of the page The recommended methods and strategies for designing and implementing components, ensuring efficiency and consistent use. Specifications Accordion (closed state) Accordion (open state) Dimensions Property Value Header height 48px (minimum) Content padding 16px Icon size 20px Ã— 20px Border radius 4px Typography Element Font Weight Size Header System font Medium (500) 16px Content System font Regular (400) 14px The detailed technical aspects, definitions and requirements for design components, typically addressing spacing, padding, and heights in relationship to the component.",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Enterprise Design System",
        "url": "/",
        "content": "Welcome to the Enterprise Design System # The Enterprise Design System (EDS) provides a comprehensive set of design guidelines, components, and resources for building consistent, accessible, and user-friendly enterprise applications. Our goal is to streamline the design and development process, reduce redundancy, and create a cohesive user experience across all enterprise products. Recent Updates # Version 2.0 Released: Our latest version includes improved accessibility, new components, and enhanced documentation. Learn more Dark Mode Support: All components now support dark mode out of the box, with seamless theme switching. Expanded Component Library: We&amp;#039;ve added 15 new components based on user feedback and real-world use cases. About the Design System # The Enterprise Design System is built on the following principles: Consistency: Creating a unified experience across all enterprise applications. Accessibility: Ensuring all components meet WCAG 2.1 AA standards. Flexibility: Providing components that can be customized to meet various needs. Performance: Optimizing components for fast load times and smooth interactions. Maintainability: Creating a system that is easy to update and extend. Visit our getting started guide to learn how to integrate the design system into your projects.",
        "description": "A comprehensive design system for building consistent, accessible, and beautiful enterprise applications",
        "type": "Page",
        "date": "2025-02-27"
      }
    
  
]
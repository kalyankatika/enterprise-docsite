[
  
    
      {
        "title": "Sample Legacy Document",
        "url": "/migrated/test-migration/sample-doc/",
        "content": "Sample Legacy Document This is a sample legacy document that will be migrated. Features Feature 1 Feature 2 Feature 3 Code Example function helloWorld() { console.log(&amp;#039;Hello, world!&amp;#039;); } ```text [Link to another document](other-doc.html)",
        "description": "",
        "type": "Page",
        "date": "2022-01-01"
      },
    
  
    
      {
        "title": "Enterprise Design System 2.0 Released",
        "url": "/updates/2025-02-15-version-2-release/",
        "content": "Enterprise Design System 2.0 Released February 15, 2025 We&amp;#039;re excited to announce the release of Enterprise Design System 2.0! This major update includes new components, improved documentation, and better accessibility across the entire system. What&amp;#039;s New New Components EDS 2.0 introduces several new components to enhance your enterprise applications: Data Table - A powerful and flexible data table component with sorting, filtering, and pagination capabilities. Accordion - An expandable/collapsible content container for displaying information in a limited space. Slider - An interactive component for selecting a value or range from a predefined range. Stepper - A step-by-step navigation component for guiding users through a multi-step process. Improved Accessibility All components have been audited and updated to meet WCAG 2.1 AA standards. Key improvements include: Enhanced keyboard navigation Improved screen reader support with ARIA attributes Better focus management Color contrast compliance Redesigned Documentation Our documentation site has been completely redesigned to provide a better developer experience: Consolidated content from multiple legacy documentation sites New interactive examples with live code editing Improved search functionality Dark mode support Responsive design for all screen sizes Performance Improvements We&amp;#039;ve significantly improved the performance of all components: Reduced bundle size by 30% Improved rendering performance Better lazy-loading techniques Optimized CSS with modern approaches Migration Guide Upgrading from EDS 1.x to 2.0 should be relatively straightforward for most applications. We&amp;#039;ve prepared a detailed migration guide to help you with the transition. Community Feedback This release incorporates feedback from over 50 developers and designers across the organization. Thank you to everyone who contributed ideas, bug reports, and feature requests! Get Started Today Ready to upgrade? Check out our Getting Started guide or dive straight into the Component library.",
        "description": "Major update with new components, improved documentation, and better accessibility",
        "type": "Page",
        "date": "2025-02-15"
      },
    
  
    
      {
        "title": "404 - Page Not Found",
        "url": "/404.html",
        "content": "404 Page Not Found The page you are looking for doesn&amp;#039;t exist or has been moved. Return to Home",
        "description": "",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Spacing",
        "url": "/design-system/foundations/spacing/",
        "content": "Spacing A consistent spacing system helps create balanced layouts and establish rhythmic relationships between elements. Our spacing scale is based on a 4px grid, providing predictable and harmonious spacing throughout interfaces. Spacing Scale Our spacing scale follows a geometric progression to provide a natural and harmonious spacing rhythm: Token Value Pixels Rem Visual Example Usage space-0 0 0px 0rem No spacing space-1 0.25 4px 0.25rem Very tight spacing between related elements space-2 0.5 8px 0.5rem Tight spacing between closely related elements space-3 0.75 12px 0.75rem Spacing between related elements space-4 1 16px 1rem Standard spacing between elements (base unit) space-6 1.5 24px 1.5rem Medium spacing between distinct elements space-8 2 32px 2rem Standard section spacing space-12 3 48px 3rem Large section spacing space-16 4 64px 4rem Spacing between major sections space-20 5 80px 5rem Extra large section spacing space-24 6 96px 6rem Very large section spacing Spacing Usage Guidelines To create consistent and harmonious layouts, follow these guidelines when applying spacing: 1. Use the spacing scale consistently Always use the predefined spacing values instead of arbitrary values. This ensures consistency across all interfaces and maintains the design system&amp;#039;s rhythm. Do Header Content Footer Use consistent spacing (space-4 or 16px) between sections Don&amp;#039;t Header Content Footer Use inconsistent or arbitrary spacing values (12px, 20px) 2. Apply spacing hierarchically Use smaller spacing values for related elements and larger values to separate distinct sections. This creates visual grouping that helps users understand the relationship between elements. Card Component Card Title This is an example card with proper spacing hierarchy. Item 1 Item 2 space-2 (8px): Between icon and text (closely related elements) space-4 (16px): Between card content sections space-8 (32px): Between cards (distinct elements) 3. Consider component density Adjust spacing based on the desired density of your interface. High-density UIs (like dashboards or data tables) should use smaller spacing values, while marketing pages or content-focused pages can use larger spacing for readability. High Density UI Item 1 Value Item 2 Value Item 3 Value Uses smaller spacing values (space-1, space-2) Content UI This is an example of content-focused UI with more generous spacing. The additional whitespace improves readability and reduces cognitive load. Uses larger spacing values (space-3, space-4) 4. Be responsive Adjust spacing based on screen size. Consider using smaller spacing values on mobile devices and larger values on desktop to optimize for different viewport sizes. Responsive Spacing Our design system utilizes Tailwind CSS utility classes for responsive spacing. For example, class=&amp;quot;mt-4 md:mt-6 lg:mt-8&amp;quot; applies different spacing at different breakpoints. Implementation CSS Variables Our spacing scale is implemented using CSS variables: :root { --space-0: 0; --space-1: 0.25rem; /* 4px */ --space-2: 0.5rem; /* 8px */ --space-3: 0.75rem; /* 12px */ --space-4: 1rem; /* 16px */ --space-6: 1.5rem; /* 24px */ --space-8: 2rem; /* 32px */ --space-12: 3rem; /* 48px */ --space-16: 4rem; /* 64px */ --space-20: 5rem; /* 80px */ --space-24: 6rem; /* 96px */ } Using Spacing in Components When building components, use the spacing variables to ensure consistency: .card { padding: var(--space-4); margin-bottom: var(--space-6); } .card-content { margin-bottom: var(--space-4); } .card-item { margin-bottom: var(--space-2); } Utility Classes You can also use our utility classes for margin and padding, which follow the same spacing scale: m-{size} - Margin on all sides mx-{size} - Horizontal margin (left and right) my-{size} - Vertical margin (top and bottom) mt-{size}, mr-{size}, mb-{size}, ml-{size} - Margin top, right, bottom, left p-{size} - Padding on all sides px-{size} - Horizontal padding (left and right) py-{size} - Vertical padding (top and bottom) pt-{size}, pr-{size}, pb-{size}, pl-{size} - Padding top, right, bottom, left Where {size} corresponds to the spacing scale values (0, 1, 2, 3, 4, 6, 8, 12, 16, 20, 24). Related Resources For more information on how to use spacing effectively in your designs: Grid System - Learn how spacing relates to our grid system Layout Components - Components that help with layout and spacing Design Tokens - View all available design tokens, including spacing",
        "description": "A consistent spacing system to create balanced layouts and establish rhythmic relationships between elements",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Foundations",
        "url": "/design-system/foundations/",
        "content": "Foundations Foundations are the core design elements that form the building blocks of our design system. They establish the visual language of our products and ensure consistency across all interfaces. Core Foundation Elements Color Our color palette system, including primary and secondary colors, semantic colors, neutrals, and usage guidelines. View Color System → Typography Example Typography Our typefaces, font weights, sizes, and styles for headings, body text, and UI elements. View Typography System → Spacing Our spacing scale and system for consistent layout, padding, and margins across all interfaces. View Spacing System → Iconography Our icon system, including usage guidelines, sizing, and available icon sets. View Icon System → Grid System Our responsive grid system for consistent layouts across all screen sizes. View Grid System → Accessibility Our accessibility guidelines and best practices for creating inclusive interfaces. View Accessibility Guidelines → Purpose of Foundations Foundation elements should be used consistently Foundations provide the basic building blocks for all design work. Use them consistently to create cohesive and harmonious interfaces. Foundations serve several critical purposes in our design system: 1. Establish a Consistent Visual Language Foundations set the visual tone for all our products. By using consistent colors, typography, spacing, and other foundational elements, we create a cohesive look and feel across all interfaces. 2. Improve Design Efficiency With pre-defined foundation elements, designers can make decisions more quickly and focus on solving user problems rather than debating basic visual choices. 3. Ensure Accessibility and Usability Our foundations are designed with accessibility in mind. The color system includes contrast checking, typography ensures readability, and spacing creates clear visual hierarchies. 4. Support Theming and Customization While consistency is important, our foundations also support theming and customization through design tokens that can be adjusted to meet specific brand needs. 5. Create a Shared Design Vocabulary Foundations create a shared language for designers and developers to communicate efficiently about interface elements. How to Use Foundations When working on designs or implementations, always start with the foundation elements. They provide the basic building blocks for all other components and patterns. Example: Building a Card Component When designing or implementing a card component, use foundation elements: Colors: Use the defined background, border, and text colors Typography: Follow heading and body text guidelines Spacing: Apply consistent padding and margins using the spacing scale Elevation: Use the appropriate shadow for the card&amp;#039;s visual hierarchy Card Title This is an example card that uses our foundation elements consistently, including color, typography, and spacing. Primary Action Implementation Principles When implementing foundation elements in your designs and code, follow these principles: Use Design Tokens Design tokens are named entities that store visual design attributes. Use design tokens rather than hard-coded values to ensure consistency and support theming. /* Don&amp;#039;t use hard-coded values */ .button { background-color: #0056b3; padding: 12px 16px; } /* Do use design tokens */ .button { background-color: var(--color-primary); padding: var(--space-3) var(--space-4); } Follow Documentation Closely Each foundation element has specific usage guidelines. Follow these guidelines closely to ensure proper implementation and avoid inconsistencies. Use Foundation Elements as Building Blocks Foundations should be the building blocks for all other components and patterns. Start with foundations, then build more complex elements on top of them. Related Resources Design Tokens - View all available design tokens Figma Libraries - Access foundation styles in our Figma libraries Implementation Guide - Technical guidance for implementing foundation elements",
        "description": "The core design elements that form the building blocks of our design system",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigation Components",
        "url": "/components/navigation/",
        "content": "Navigation Components Navigation components help users move through and find content in your application. They provide intuitive ways to explore, search, and discover content. Available Components Navbar Navigation bars provide consistent access to primary navigation options Logo Link 1 Link 2 Link 3 Sidebar Sidebars provide secondary navigation options in a vertical layout Group 1 Item 1 Item 2 Group 2 Item 1 Content area Tabs Tabs allow users to switch between different views within the same context Tab 1 Tab 2 Tab 3 Tab 1 content area Breadcrumbs Breadcrumbs show the hierarchical path to the current page Home / Section / Current Page Pagination Pagination helps users navigate through multiple pages of content &amp;amp;laquo; 1 2 3 ... 10 &amp;amp;raquo; Menu Menus display a list of options or actions in a dropdown or popover Menu Option 1 Option 2 Option 3 Usage Guidelines When working with navigation components, consider the following best practices: Provide clear visual indicators for the current location Use consistent navigation patterns throughout your application Ensure navigation is accessible via keyboard and screen readers Adapt navigation components for different screen sizes Use appropriate icons and labels to improve clarity Keep navigation structure simple and intuitive For component-specific guidelines, refer to the individual component documentation pages.",
        "description": "Navigation components help users move through and find content in your application",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Input Components",
        "url": "/components/inputs/",
        "content": "Input Components Input components are UI elements that allow users to enter data, make selections, or trigger actions. They are essential building blocks for forms and interactive interfaces. Available Input Components Input Components Components that enable users to input or manipulate data View Component → Button Component A versatile button component supporting various styles, states, and sizes. View Component → Button Component Standard button component with multiple styles and sizes View Component → Accessibility Considerations When using input components, keep these accessibility considerations in mind: All form controls should have associated labels Form elements should be keyboard accessible Error messages should be clearly associated with their respective inputs Required fields should be clearly indicated Focus states should be visible for keyboard users Best Practices Use clear and concise labels Labels should clearly describe the purpose of the input. Avoid using vague or technical terms that might confuse users. Provide helpful validation Validate user input and provide clear error messages when the input doesn&amp;#039;t meet the requirements. Use inline validation where appropriate. Group related inputs Group related inputs together using fieldsets and legends to provide context and improve understanding. Use appropriate input types Use the appropriate input type for the data being collected (e.g., email, number, date) to provide the best user experience and enable browser-specific features. Maintain consistency Use input components consistently throughout your application to create a cohesive user experience. Form Layout Guidelines Align labels and inputs consistently Use a single-column layout for most forms Place related fields in close proximity Use appropriate spacing between form elements Position form actions (buttons) at the bottom of the form For more detailed guidance on forms, please refer to the Form Patterns documentation.",
        "description": "Components that enable users to input or manipulate data",
        "type": "Documentation",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Getting Started",
        "url": "/getting-started/",
        "content": "Getting Started Learn how to use the Enterprise Design System (EDS) in your projects On this page Introduction Installation Usage Key Concepts Browser Support Next Steps Introduction The Enterprise Design System (EDS) is a comprehensive set of design guidelines, components, and resources to help create consistent, accessible, and high-quality enterprise applications. This guide will help you get started with implementing EDS in your projects. Who is this for? This guide is intended for developers and designers who are implementing the Enterprise Design System in their projects. Familiarity with HTML, CSS, and JavaScript is recommended. Installation Using npm Install the EDS package from npm: npm install @enterprise/design-system Using a CDN You can also include EDS directly from a CDN: &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;https://cdn.enterprise.com/design-system/2.0.0/eds.min.css&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;script src=&amp;amp;quot;https://cdn.enterprise.com/design-system/2.0.0/eds.min.js&amp;amp;quot; defer&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt; Usage Basic Setup Include the CSS and JavaScript files in your HTML: &amp;amp;lt;!DOCTYPE html&amp;amp;gt; &amp;amp;lt;html lang=&amp;amp;quot;en&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;head&amp;amp;gt; &amp;amp;lt;meta charset=&amp;amp;quot;UTF-8&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;meta name=&amp;amp;quot;viewport&amp;amp;quot; content=&amp;amp;quot;width=device-width, initial-scale=1.0&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;title&amp;amp;gt;My Enterprise App&amp;amp;lt;/title&amp;amp;gt; &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;path/to/eds.min.css&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;/head&amp;amp;gt; &amp;amp;lt;body&amp;amp;gt; &amp;amp;lt;!-- Your content here --&amp;amp;gt; &amp;amp;lt;script src=&amp;amp;quot;path/to/eds.min.js&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/script&amp;amp;gt; &amp;amp;lt;/body&amp;amp;gt; &amp;amp;lt;/html&amp;amp;gt; Using Components Once the EDS is set up, you can use components by following the HTML structure and CSS classes documented in the Components section. Here&amp;#039;s a simple example using a button component: &amp;amp;lt;button class=&amp;amp;quot;eds-button eds-button--primary&amp;amp;quot;&amp;amp;gt;Primary Button&amp;amp;lt;/button&amp;amp;gt; Key Concepts BEM Methodology The EDS uses the BEM (Block, Element, Modifier) naming convention with an &amp;#039;eds-&amp;#039; prefix for all CSS classes. This helps to create a consistent and predictable class naming structure. Block: A standalone entity that is meaningful on its own (e.g., eds-button) Element: A part of a block that has no standalone meaning (e.g., eds-card__title) Modifier: A flag on a block or element that changes appearance or behavior (e.g., eds-button--primary) Design Tokens Design tokens are the visual design atoms of the design system — specifically, they are named entities that store visual design attributes. The EDS uses design tokens for colors, typography, spacing, and more. You can access these tokens through CSS variables: .custom-element { color: var(--eds-color-primary); padding: var(--eds-spacing-md); font-size: var(--eds-font-size-lg); } Browser Support The Enterprise Design System supports the following browsers: Chrome (latest 2 versions) Firefox (latest 2 versions) Safari (latest 2 versions) Edge (latest 2 versions) Internet Explorer 11 (with polyfills) Next Steps Explore Components Browse our library of UI components and learn how to use them in your project. View Components Design Tokens Learn about our design tokens and how to use them for consistent styling. View Design Tokens Patterns Explore common UI patterns and best practices for enterprise applications. View Patterns",
        "description": "Getting started with the Enterprise Design System",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Card",
        "url": "/components/layout/card/",
        "content": "Overview The Card component is a flexible container for displaying related content and actions about a single subject. When to use Use cards to: Display content and actions related to a single topic or object Group related information in a visually distinct container Create a consistent layout for multiple similar items Emphasize sections of content on a page Variants Basic Card The basic card provides a simple container for content with minimal styling. Media Card The media card includes an image or other media at the top of the card. Action Card The action card includes a clear call-to-action button or link. Interactive Card The interactive card is fully clickable and acts as a navigation element. Accessibility Ensure sufficient color contrast between card background and content Use appropriate heading hierarchy within cards Make interactive cards fully keyboard accessible Ensure card content is properly structured for screen readers Code Guidelines Use the eds-card class for the container Include appropriate semantic HTML within cards Use modifier classes for different variants (e.g., eds-card--media, eds-card--action) Maintain proper spacing and alignment of card content Design Guidelines Keep card content concise and focused on a single topic Maintain consistent spacing and alignment across multiple cards Use clear visual hierarchy within cards Ensure card actions are clearly distinguishable and user-friendly",
        "description": "Cards organize content and actions about a single subject",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Breadcrumb",
        "url": "/components/navigation/breadcrumb/",
        "content": "Overview The Breadcrumb component displays a navigational path showing the user their current location within the site&amp;#039;s hierarchy. When to use Use breadcrumbs when: The application has multiple hierarchical levels of navigation Users need to understand their current location within the site structure You want to provide a way for users to navigate up to parent pages The content is organized in a clear hierarchy Variants Standard Breadcrumb The standard breadcrumb shows the full path from the home page to the current page. Collapsed Breadcrumb The collapsed breadcrumb shows the first and last few items in the path, with intermediate items collapsed to prevent excessive breadcrumb length. Interactive Breadcrumb Interactive breadcrumbs include dropdown menus for each level, allowing users to navigate to sibling pages at each level. Accessibility Use proper HTML structure with ordered list (&amp;amp;lt;ol&amp;amp;gt;) elements Include proper ARIA attributes to identify the breadcrumb as a navigation landmark Ensure proper color contrast for breadcrumb text and separators Make breadcrumb links keyboard accessible and properly focusable Code Guidelines Use the eds-breadcrumb class for the container Use &amp;amp;lt;ol&amp;amp;gt; and &amp;amp;lt;li&amp;amp;gt; elements for the breadcrumb structure Include appropriate ARIA roles and attributes Use clear, concise text for each breadcrumb item Design Guidelines Keep breadcrumb labels short and descriptive Use consistent visual separators between items Ensure breadcrumbs are appropriately sized for mobile devices Current page should be visually distinct but not a clickable link",
        "description": "Breadcrumbs show the navigational path within a site hierarchy",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Alert",
        "url": "/components/feedback/alert/",
        "content": "Overview The Alert component provides contextual feedback messages for user actions and system states. Alerts are used to communicate important information, warnings, errors, or success messages to users. When to use Use alerts when: Providing feedback about a user action (success, error, etc.) Communicating important system status information Warning users about potential issues Highlighting important information that requires attention Variants Information Alert Used for general information and neutral messages that don&amp;#039;t require immediate action. Success Alert Used to confirm successful completion of an action or process. Warning Alert Used to warn users about potential issues that may require attention. Error Alert Used to communicate critical errors or problems that need immediate attention. Toast Alert Temporary, auto-dismissing alerts that appear briefly to provide feedback. Accessibility Use appropriate ARIA roles and attributes Include proper focus management for dismissible alerts Ensure proper color contrast for all alert variants Use clear, concise language in alert messages Provide programmatic ways to dismiss alerts Code Guidelines Use the eds-alert class for the container Add variant modifiers like eds-alert--info, eds-alert--success, etc. Include appropriate icons to reinforce the alert type Use semantic HTML within alert content Implement proper focus management for interactive alerts Design Guidelines Use consistent color coding for different alert types Include appropriate icons to reinforce the alert message Keep alert messages clear, concise, and actionable Position alerts in a consistent location within the interface Provide clear dismissal options when appropriate",
        "description": "Alerts provide contextual feedback messages for user actions and system states",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Components Directory",
        "url": "/components/directory/",
        "content": "Components Directory Browse the Enterprise Design System component library for reusable UI elements to build your applications All Components Layout Accordion stable Card stable Grid stable Container stable Divider stable Navigation Breadcrumb stable Menu stable Tabs stable Pagination stable Feedback Alert stable Progress stable Toast stable Skeleton experimental Inputs Button stable Input stable Checkbox stable Radio stable Select stable Textarea stable .eds-page-header { margin-bottom: var(--eds-spacing-8); } .eds-page-header__title { font-size: var(--eds-font-size-4xl); font-weight: var(--eds-font-weight-bold); margin: 0 0 var(--eds-spacing-3); color: var(--eds-color-neutral-900); } .eds-page-header__description { font-size: var(--eds-font-size-lg); color: var(--eds-color-neutral-700); max-width: 800px; } .eds-component-section { margin-bottom: var(--eds-spacing-12); } .eds-component-section__title { font-size: var(--eds-font-size-2xl); font-weight: var(--eds-font-weight-semibold); margin: 0 0 var(--eds-spacing-6); color: var(--eds-color-neutral-900); padding-bottom: var(--eds-spacing-3); border-bottom: var(--eds-border-width-thin) solid var(--eds-color-neutral-200); } .eds-component-list { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: var(--eds-spacing-4); } .eds-component-item { display: flex; justify-content: space-between; align-items: center; padding: var(--eds-spacing-4); background-color: white; border-radius: var(--eds-border-radius-md); box-shadow: var(--eds-shadow-base); text-decoration: none; transition: transform var(--eds-transition-fast) ease-in-out, box-shadow var(--eds-transition-fast) ease-in-out; } .eds-component-item:hover { transform: translateY(-2px); box-shadow: var(--eds-shadow-md); } .eds-component-item__title { font-size: var(--eds-font-size-lg); font-weight: var(--eds-font-weight-medium); margin: 0; color: var(--eds-color-neutral-900); }",
        "description": "Browse the Enterprise Design System component library",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Home",
        "url": "/alternative-home-tailwind/",
        "content": "Enterprise Design System A comprehensive design system for building consistent, accessible, and beautiful enterprise applications. Get Started Browse Components Everything you need to build enterprise applications Design Foundations Comprehensive color palettes, typography, spacing, and other foundational elements for consistent design. Explore Foundations Components A library of 40+ ready-made, accessible UI components from buttons to complex data tables. Browse Components Guidelines Accessibility, responsive design, and content guidelines to ensure high-quality implementations. View Guidelines Quick Search Looking for something specific? Search our documentation. Featured Components Primary Secondary Buttons Cards Input label Text Fields Tab 1 Tab 2 Tab 3 Tabs Latest Updates Design System v2.0.0 Released February 20, 2025 Major update with new components, improved accessibility, and dark mode support. View Release Notes → New Component: Data Table February 10, 2025 Introducing our new Data Table component with sorting, filtering, and pagination. View Component → Updated Accessibility Guidelines January 28, 2025 Our accessibility guidelines have been updated to follow WCAG 2.2 standards. View Guidelines → Ready to get started? Join thousands of developers building better enterprise applications with our design system. Get Started View Examples",
        "description": "The Enterprise Design System Documentation",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Search",
        "url": "/search/",
        "content": "Search Clear search 0 results found Enter a search term above",
        "description": "Search the Enterprise Design System Documentation",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Button Component",
        "url": "/components/inputs/button/",
        "content": "Overview Buttons are used to trigger actions or events, such as submitting a form, opening a dialog, canceling an action, or performing a delete operation. Variants The Enterprise Design System provides several button variants to convey different levels of emphasis: Primary Button Use primary buttons for the main action in a section or page. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt;Primary Button&amp;amp;lt;/button&amp;gt; Primary Button Secondary Button Secondary buttons are for alternative actions that aren&amp;#039;t as important as the primary action. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--secondary&amp;quot;&amp;gt;Secondary Button&amp;amp;lt;/button&amp;gt; Secondary Button Tertiary Button Tertiary buttons are for less important actions or used within content for inline actions. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--tertiary&amp;quot;&amp;gt;Tertiary Button&amp;amp;lt;/button&amp;gt; Tertiary Button Destructive Button Use destructive buttons for actions that might result in data loss or other significant consequences. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--danger&amp;quot;&amp;gt;Delete&amp;amp;lt;/button&amp;gt; Delete Sizes Buttons come in three standard sizes: Small &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary eds-button--sm&amp;quot;&amp;gt;Small Button&amp;amp;lt;/button&amp;gt; Small Button Medium (Default) &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt;Medium Button&amp;amp;lt;/button&amp;gt; Medium Button Large &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary eds-button--lg&amp;quot;&amp;gt;Large Button&amp;amp;lt;/button&amp;gt; Large Button States Buttons can appear in several different states: Default The normal state of a button. Hover How a button appears when a user hovers over it. Focus How a button appears when it receives keyboard focus. Active How a button appears when it&amp;#039;s being clicked or activated. Disabled Use disabled buttons to indicate that an action is not currently available. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot; disabled&amp;gt;Disabled Button&amp;amp;lt;/button&amp;gt; Disabled Button With Icon Buttons can include icons to provide additional visual cues about the action. Icon Before Text &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;eds-icon&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M12 2L2 7l10 5 10-5z&amp;quot;&amp;gt;&amp;amp;lt;/path&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;span&amp;gt;Button with Icon&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Button with Icon Icon After Text &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; &amp;amp;lt;span&amp;gt;Button with Icon&amp;amp;lt;/span&amp;gt; &amp;amp;lt;svg class=&amp;quot;eds-icon&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M5 12h14M12 5l7 7-7 7&amp;quot;&amp;gt;&amp;amp;lt;/path&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; Button with Icon Icon Only Button &amp;amp;lt;button class=&amp;quot;eds-button eds-button--icon eds-button--primary&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;eds-icon&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 24 24&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M5 12h14M12 5l7 7-7 7&amp;quot;&amp;gt;&amp;amp;lt;/path&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;span class=&amp;quot;eds-sr-only&amp;quot;&amp;gt;Next&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Next Button Groups Button groups allow you to display a set of related actions. &amp;amp;lt;div class=&amp;quot;eds-button-group&amp;quot;&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button eds-button--secondary&amp;quot;&amp;gt;Cancel&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt;Submit&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; Cancel Submit Usage Guidelines Use primary buttons for the main action on a page or in a section Limit the number of primary buttons on a page to avoid confusion Use secondary buttons for alternative actions that aren&amp;#039;t as important Use tertiary buttons for less important actions Use destructive buttons for actions that might result in data loss Always provide a text label for buttons, even those with icons Use sentence case for button labels (e.g., &amp;amp;quot;Save changes&amp;amp;quot; not &amp;amp;quot;Save Changes&amp;amp;quot;) Keep button labels short and clear — use verbs that describe the action Accessibility Always include text labels for buttons, even for icon-only buttons (use visually hidden text) Ensure buttons have sufficient contrast against their background Make sure the button&amp;#039;s purpose is clear from its label Use the correct HTML element: &amp;amp;lt;button&amp;amp;gt; for actions and &amp;amp;lt;a&amp;amp;gt; for navigation Ensure buttons are keyboard accessible and have visible focus states Code Examples React import React from &amp;#039;react&amp;#039;; import { Button } from &amp;#039;@enterprise-design-system/react&amp;#039;; function Example() { return ( &amp;amp;lt;div&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; onClick={() =&amp;gt; console.log(&amp;#039;Clicked!&amp;#039;)}&amp;gt; Primary Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;secondary&amp;quot;&amp;gt; Secondary Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;tertiary&amp;quot;&amp;gt; Tertiary Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;danger&amp;quot;&amp;gt; Delete &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; size=&amp;quot;sm&amp;quot;&amp;gt; Small Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; disabled&amp;gt; Disabled Button &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; startIcon={&amp;amp;lt;AddIcon /&amp;gt;}&amp;gt; Button with Icon &amp;amp;lt;/Button&amp;gt; &amp;amp;lt;/div&amp;gt; ); } Vue Primary Button Secondary Button Tertiary Button Delete Small Button Disabled Button Button with Icon import { EdsButton } from &amp;#039;@enterprise-design-system/vue&amp;#039;; import { AddIcon } from &amp;#039;@enterprise-design-system/icons&amp;#039;; export default { components: { EdsButton }, data() { return { AddIcon } }, methods: { handleClick() { console.log(&amp;#039;Clicked!&amp;#039;); } } } Design Tokens The button component uses the following design tokens: Token Value Description --eds-button-primary-bg var(--color-primary) Primary button background color --eds-button-primary-text white Primary button text color --eds-button-primary-hover-bg var(--color-primary-dark) Primary button hover background color --eds-button-border-radius 4px Button border radius --eds-button-font-weight 500 Button font weight --eds-button-disabled-opacity 0.6 Opacity for disabled buttons",
        "description": "A versatile button component supporting various styles, states, and sizes.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Layout Components",
        "url": "/components/layout/",
        "content": "Layout Components Layout components help structure and organize content on the page, providing consistent containers and spatial arrangements. Accordion Expandable panels that show and hide content to conserve space. View component → Card Versatile containers for displaying related content and actions. View component → Grid Flexible layout system for organizing content in rows and columns. View component → Modal Dialog boxes that appear in front of the main content. View component → Tabs Organizes content into separate views within the same context. View component → Divider Visual separators for distinguishing content sections. View component →",
        "description": "Components that help with page structure and content organization.",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigate by Channel",
        "url": "/navigation/by-channel/",
        "content": "Browse By Channel Type Owner Browse by Channel Components organized by their target channels or environments. Web Card Accordion Button Breadcrumb View all web components Mobile Card Button Toast Toggle View all mobile components Desktop Modal Grid Tabs Spinner View all desktop components",
        "description": "Browse components organized by their target channels or environments",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigate by Type",
        "url": "/navigation/by-type/",
        "content": "Browse By Channel Type Owner Browse by Type Components organized by their functional categories and types. Input Components Button Checkbox Radio Select View all input components Layout Components Card Accordion Modal Grid View all layout components Navigation Components Breadcrumb Tabs Pagination Menu View all navigation components Feedback Components Alert Toast Progress Spinner View all feedback components Data Display Components Table List Badge Tag View all data display components",
        "description": "Browse components organized by their functional types and categories",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Navigate by Owner",
        "url": "/navigation/by-owner/",
        "content": "Browse By Channel Type Owner Browse by Owner Components organized by the teams responsible for their development and maintenance. UI UI Core Team Core component library maintainers Card Accordion Button Breadcrumb View all UI Core components FP Frontend Platform Advanced components and tools Table Chart Tree Visualization View all Frontend Platform components ME Mobile Experience Mobile-specific components Swipe Actions Pull to Refresh Bottom Sheet Gesture Handler View all Mobile Experience components DS Design Systems Design tokens and foundations Colors Typography Spacing Icons View all Design Systems resources A11y Accessibility Specialized accessible components Screen Reader Focus Trap Skip Link ARIA Live View all Accessibility components",
        "description": "Browse components organized by their owners and teams responsible for maintenance",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Component Navigation Hub",
        "url": "/navigation/",
        "content": "Component Navigation Hub Discover the right components using multiple navigation perspectives. Navigate by Channel Find components organized by the channels or environments they&amp;#039;re designed for. • Web Components • Mobile Components • Desktop Components Browse by Channel Navigate by Type Explore components categorized by their functional types and purposes. • Input Components • Layout Components • Navigation Components • Feedback Components Browse by Type Navigate by Owner Find components based on the teams responsible for their development and maintenance. • UI Core Team • Frontend Platform Team • Mobile Experience Team • Design Systems Team Browse by Owner Search Components Looking for something specific? Search our component library. Recently Updated Components Updated 2 days ago Accordion Expandable content sections that help organize and declutter interfaces. View Component Updated 5 days ago Button Versatile interactive elements for user actions in various states and sizes. View Component Updated 1 week ago Card Flexible container components for displaying related content and actions. View Component",
        "description": "Multiple ways to browse and discover components in our design system",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "",
        "url": "/utils/migration/readme/",
        "content": "Migration Utilities This directory contains utilities for migrating content from legacy documentation sites into our unified 11ty documentation platform. Available Migration Tools html-to-md.js - Converts HTML-based legacy sites to Markdown format xml-to-md.js - Converts XML-based legacy documentation to Markdown format legacy-parser.js - Parser for proprietary legacy documentation formats md-formatter.js - Formats and normalizes converted Markdown files Usage These utilities are meant to be used as part of the migration scripts found in the scripts/migration directory.",
        "description": "",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Migration Tools",
        "url": "/resources/migration-tools/",
        "content": "Migration Tools The Enterprise Documentation System (EDS) provides a suite of tools to help migrate content from legacy documentation systems into our unified 11ty-based platform. These tools are designed to preserve content structure and formatting while converting to Markdown format, which is the standard for our documentation. Available Migration Utilities The following migration utilities are available to help you convert content from various sources: HTML to Markdown Converter Converts HTML-based legacy sites to Markdown format. This utility can handle: Generic HTML content Confluence-specific HTML formats SharePoint-specific HTML formats Jira documentation WordPress content XML to Markdown Converter Converts XML-based documentation formats to Markdown, supporting: DITA XML DocBook XML Generic XML structures Nunjucks to Markdown Converter Converts Nunjucks templates to Markdown format, useful for migrating from other 11ty-based sites. Markdown Formatter Formats and normalizes converted Markdown files to ensure they adhere to our documentation standards and styling conventions. Migration CLI Tool We provide a command-line interface (CLI) tool that makes it easy to run migrations either on individual files or in batch mode for entire directories. Installation The migration tools are included in the repository. Before using them, make sure you have the necessary dependencies installed: npm install Basic Usage Single File Conversion To convert a single file from a legacy format to Markdown: node scripts/migration/migrate.js convert source.html destination.md --type html Batch Conversion To convert multiple files in a directory: node scripts/migration/migrate.js batch source-directory/ destination-directory/ --type html Configuration File For more complex migration scenarios, you can create a configuration file: node scripts/migration/migrate.js schema migration-config.yml Then use the configuration file in your migration: node scripts/migration/migrate.js batch source-directory/ destination-directory/ --config migration-config.yml Migration Options The migration tools support the following options: Option Description --type Source file type (html, xml, njk) --site-type Type of site (confluence, sharepoint, jira, wordpress) --front-matter Additional front matter as JSON string --config Path to a YAML configuration file --recursive Process directories recursively (for batch operations) --pattern File name pattern to match (for batch operations) Best Practices for Content Migration When migrating content from legacy systems, consider the following best practices: Preparation Content Audit: Perform a content audit to identify what needs to be migrated and what can be discarded. Structure Planning: Map the structure of your legacy content to the new documentation structure. Test Migration: Run test migrations on a small subset of content before processing everything. During Migration Preserve Metadata: Make sure to capture and convert any metadata like authors, dates, and categories. Handle Images: Ensure images are properly transferred and references are updated. Check Links: Update internal links to reflect the new structure. Post-Migration Format Review: Review the formatting of migrated content to ensure it meets our standards. Structural Check: Verify the structure and navigation of the migrated content. Fix Broken Elements: Address any elements that didn&amp;#039;t convert properly. Example: Migrating from Confluence Here&amp;#039;s an example of migrating content from Confluence: # Create a migration configuration node scripts/migration/migrate.js schema confluence-migration.yml # Edit the configuration file to customize settings # Run the migration node scripts/migration/migrate.js batch confluence-export/ src/migrated-content/ --config confluence-migration.yml # Format the migrated content node src/utils/migration/md-formatter.js batch src/migrated-content/ Example Configuration File Here&amp;#039;s an example of a migration configuration file: # Migration Configuration type: html siteType: confluence # Processing options options: recursive: true pattern: &amp;quot;*.html&amp;quot; # Image handling images: handling: copy destDir: &amp;quot;src/assets/images/migrated&amp;quot; baseUrl: &amp;quot;/assets/images/migrated&amp;quot; # Front matter to add to all converted files frontMatter: layout: layouts/base.njk eleventyNavigation: key: Migrated Content parent: Documentation tags: - migrated migrationSource: &amp;quot;Confluence&amp;quot; migrationDate: &amp;quot;2025-02-27&amp;quot; Technical Documentation For detailed technical documentation on the migration utilities, refer to: HTML to Markdown Converter API XML to Markdown Converter API Nunjucks to Markdown Converter API Markdown Formatter API Getting Help If you encounter issues with the migration tools, please reach out to the Documentation Team or file an issue in the repository.",
        "description": "Tools and utilities for migrating legacy documentation to the Enterprise Documentation System",
        "type": "Page",
        "date": "2025-02-27"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/",
        "content": "Anatomy Accordion heading Accordion content goes here. This area can contain text, images, and other components. Key Elements 1 Header - Contains the accordion title and expansion control 2 Icon - Indicates the current state (expanded or collapsed) 3 Content Area - Contains the information revealed when the accordion is expanded Structured breakdown and detailed description of the components and their relationships within a user interface. Considerations When to use the accordion component If you have a large amount of content to display within a page When users need to focus on specific sections of information To reduce scrolling and make content more scannable When content can be logically divided into discrete sections For FAQ sections or hierarchical information When to use something else If users need to see all content at once for comparison If there&amp;#039;s not enough content to warrant progressive disclosure When the content hierarchy is less important If users will frequently need to switch between multiple sections For critical information that should always be visible Key factors and criteria that influence design decisions regarding component choice for alignment with user needs and design system guidelines. Usage General Usage Guidelines Group related content Organize information into logical sections with descriptive headers. Clear heading content Use concise, descriptive headings to help users understand the hidden content. Consider default states Determine whether accordions should be collapsed or expanded by default based on user needs. Consistent interaction pattern Ensure the entire header area is clickable, not just the icon or text. Support keyboard navigation Ensure accordions can be operated with keyboard controls for accessibility. Guidelines and best practices for the implementation of design components, ensuring they are used consistently and appropriately when applied. Behavior Expanding When a user clicks or focuses and presses Enter on the accordion header, the content area expands. The icon rotates 180 degrees to indicate the expanded state. By default, multiple accordion sections can be open simultaneously, but this behavior can be configured to allow only one open section at a time. Collapsing When a user clicks an expanded accordion header, the content area collapses and is hidden from view. The icon rotates back to its original position. Focus States When users tab through the page, the accordion headers receive a visible focus indicator to support keyboard navigation. Highlights interactive and dynamic aspects of design components, detailing how they respond to user actions and changes in state in relation to the user experience. Best Practices Do Keep accordion headings short, clear, and descriptive Prioritize content within accordions based on user needs Ensure consistent spacing between accordion items Consider expandable and collapsible animations for smooth transitions Use appropriate ARIA attributes to enhance accessibility Don&amp;#039;t Nest accordions within accordions (avoid excessive nesting) Hide critical information that users need immediately Include too many accordions on a single page (cognitive overload) Use non-descriptive headings that don&amp;#039;t clearly indicate content Rely solely on color to indicate the accordion state Content Ensure accordion headings are descriptive and self-sufficient Avoid repetitive or redundant information across accordion sections Place most important content in the first few accordions Keep content within each accordion section focused and concise Consider using icons or visual cues to improve scannability Ensure content hierarchy makes sense in the context of the page The recommended methods and strategies for designing and implementing components, ensuring efficiency and consistent use. Specifications Accordion (closed state) Accordion (open state) Dimensions Property Value Header height 48px (minimum) Content padding 16px Icon size 20px × 20px Border radius 4px Typography Element Font Weight Size Header System font Medium (500) 16px Content System font Regular (400) 14px The detailed technical aspects, definitions and requirements for design components, typically addressing spacing, padding, and heights in relationship to the component.",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Documentation Migration",
        "url": "/resources/legacy-migration/",
        "content": "Legacy Documentation Migration This guide explains how to use our migration tools to convert legacy documentation from Nunjucks (.njk) templates to the modern Markdown format used in the Enterprise Design System. Overview The migration tools provide two main approaches: Convert to Markdown - Transform .njk files to .md format for integration into the modern documentation system Preserve as Nunjucks - Keep certain files in .njk format when they contain complex templates that should be rendered directly Migration Process Step 1: Identify Legacy Content First, identify the legacy .njk files you want to migrate. These are typically located in legacy documentation repositories or systems. Step 2: Use the Migration Utility Our migration utilities are available in the src/utils/njk-to-md.js module. You can use them programmatically or through our conversion scripts. const { processDirectory } = require(&amp;#039;./src/utils/njk-to-md&amp;#039;); // Convert a directory of .njk files to .md const results = await processDirectory( &amp;#039;./legacy-content&amp;#039;, &amp;#039;./converted-content&amp;#039;, { // Options for controlling the conversion convertToMarkdown: true, preserveLayout: false } ); Step 3: Review Conversion Results After conversion, review the generated Markdown files to ensure: Content is properly formatted Code blocks retain their language hints Tables are correctly structured Links work as expected Migration Examples Below are examples of legacy documentation files and their converted versions. Example 1: Legacy Component Documentation Legacy Component (Original .njk) This shows a component as documented in the legacy system. The original was a Nunjucks template with HTML markup. This component was migrated from the legacy documentation system. Key Properties Property Type Description title string The component title isCollapsible boolean Whether the component can collapse --- title: &amp;quot;Legacy Component&amp;quot; layout: &amp;quot;legacy_component&amp;quot; description: &amp;quot;A sample legacy component from the previous documentation system&amp;quot; created_at: &amp;quot;2023-06-15&amp;quot; author: &amp;quot;Previous Team&amp;quot; --- &amp;amp;lt;div class=&amp;quot;legacy-component&amp;quot;&amp;amp;gt; &amp;amp;lt;h1&amp;amp;gt;Legacy Documentation Migration&amp;amp;lt;/h1&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;note&amp;amp;quot;&amp;amp;gt; This component was migrated from the legacy documentation system. &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;h2&amp;amp;gt;Usage&amp;amp;lt;/h2&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;This is an example of how a component was documented in the previous system.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt;Properties&amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;table&amp;amp;gt; &amp;amp;lt;thead&amp;amp;gt; &amp;amp;lt;tr&amp;amp;gt; &amp;amp;lt;th&amp;amp;gt;Property&amp;amp;lt;/th&amp;amp;gt; &amp;amp;lt;th&amp;amp;gt;Type&amp;amp;lt;/th&amp;amp;gt; &amp;amp;lt;th&amp;amp;gt;Description&amp;amp;lt;/th&amp;amp;gt; &amp;amp;lt;/tr&amp;amp;gt; &amp;amp;lt;/thead&amp;amp;gt; &amp;amp;lt;tbody&amp;amp;gt; &amp;amp;lt;tr&amp;amp;gt; &amp;amp;lt;td&amp;amp;gt;title&amp;amp;lt;/td&amp;amp;gt; &amp;amp;lt;td&amp;amp;gt;string&amp;amp;lt;/td&amp;amp;gt; &amp;amp;lt;td&amp;amp;gt;The component title&amp;amp;lt;/td&amp;amp;gt; &amp;amp;lt;/tr&amp;amp;gt; &amp;amp;lt;/tbody&amp;amp;gt; &amp;amp;lt;/table&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Example 2: Converted Markdown Converted to Markdown After conversion, the same content is represented as clean Markdown, making it easier to maintain and render. &amp;amp;gt; Note: This component was migrated from the legacy documentation system. #### Key Properties | Property | Type | Description | | --- | --- | --- | | title | string | The component title | | isCollapsible | boolean | Whether the component can collapse | --- title: &amp;quot;Legacy Component&amp;quot; layout: &amp;quot;layouts/component.njk&amp;quot; description: &amp;quot;A sample legacy component from the previous documentation system&amp;quot; created_at: &amp;quot;2023-06-15&amp;quot; author: &amp;quot;Previous Team&amp;quot; converted_from: &amp;quot;src/legacy-docs/legacy-component.njk&amp;quot; conversion_date: &amp;quot;2025-03-02&amp;quot; --- Legacy Component This component was migrated from the legacy documentation system. Usage This is an example of how a component was documented in the previous system. Properties Property Type Description title string The component title isCollapsible boolean Whether the component can collapse Conversion Options The migration utilities support several options to control the conversion process: Option Type Description convertToMarkdown boolean Whether to convert to .md (true) or preserve as .njk (false) recursive boolean Process subdirectories recursively preserveLayout boolean Keep original layout or map to new layouts layoutMap object Mapping from legacy layouts to new layouts fileMap object Custom filename mapping for specific files Handling Special Cases Nunjucks Templates with Variables Some legacy templates may contain Nunjucks variables (``) that need special handling. Our converter attempts to render these variables using the front matter data. If rendering fails, it falls back to using the original template content. Complex HTML Elements The converter handles special HTML structures like: Notes, warnings, and info boxes (converted to blockquotes) Code blocks with language hints Tables with proper structure Lists with proper formatting Migration Report After running a conversion, the tool can generate a detailed report of the process: # Legacy Documentation Conversion Report Report generated on: 2025-03-02T16:30:45.123Z ## Summary - Total files converted to Markdown: 10 - Total files preserved as Nunjucks: 2 - Total errors: 0 ## Converted Files - src/legacy-docs/njk/page1.njk → src/legacy-docs/converted/page1.md - src/legacy-docs/njk/page2.njk → src/legacy-docs/converted/page2.md ... ## Preserved Files - src/legacy-docs/njk/template1.njk → src/components/shared/migration-examples/template1.njk - src/legacy-docs/njk/template2.njk → src/components/shared/migration-examples/template2.njk Viewing Examples You can view real examples of converted legacy documentation by running the legacy conversion script: node scripts/legacy-converter.js This will create sample legacy content and process it using different conversion options, demonstrating the capabilities of the migration tools.",
        "description": "How to migrate legacy documentation from Nunjucks templates to the new markdown format",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Component",
        "url": "/legacy-docs/njk/legacy-component/",
        "content": "Legacy Component This component was migrated from the legacy documentation system. Usage This is an example of how a component was documented in the previous system. Code Example &amp;amp;lt;div class=&amp;quot;legacy-component&amp;quot;&amp;amp;gt; &amp;amp;lt;div class=&amp;quot;legacy-component__header&amp;quot;&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt;Component Title&amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div class=&amp;quot;legacy-component__body&amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Component content goes here&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Properties Property Type Default Description title string &amp;quot;Component&amp;quot; The title displayed in the component header isCollapsible boolean false Whether the component can be collapsed",
        "description": "A sample legacy component from the previous documentation system",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Documentation Page",
        "url": "/legacy-docs/njk/legacy-page/",
        "content": "Legacy Documentation Page This page was part of the legacy documentation system and has been migrated. Introduction This documentation page was written in the old format. It contains various elements that need to be properly converted. Section 1 Here is an example of a paragraph with some bold text and italic text. Subsection Lists are also common in documentation: First item Second item with a link Third item Section 2 Sometimes we need to include code snippets: function exampleFunction() { const message = &amp;quot;Hello, legacy documentation!&amp;quot;; console.log(message); return message; } Be careful when migrating legacy content to ensure all formatting is preserved correctly.",
        "description": "A sample legacy page from the previous documentation system",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Component",
        "url": "/legacy-docs/converted/legacy-component/",
        "content": "Legacy Component This component was migrated from the legacy documentation system. Usage This is an example of how a component was documented in the previous system. Code Example Component Title Component content goes here Properties Property Type Default Description title string &amp;quot;Component&amp;quot; The title displayed in the component header isCollapsible boolean false Whether the component can be collapsed",
        "description": "A sample legacy component from the previous documentation system",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Documentation Page",
        "url": "/legacy-docs/converted/legacy-page/",
        "content": "Legacy Documentation Page This page was part of the legacy documentation system and has been migrated. Introduction This documentation page was written in the old format. It contains various elements that need to be properly converted. Section 1 Here is an example of a paragraph with some bold text and italic text. Subsection Lists are also common in documentation: First item Second item with a link Third item Section 2 Sometimes we need to include code snippets: function exampleFunction() { const message = &amp;quot;Hello, legacy documentation!&amp;quot;; console.log(message); return message; } Be careful when migrating legacy content to ensure all formatting is preserved correctly.",
        "description": "A sample legacy page from the previous documentation system",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Component",
        "url": "/components/shared/migration-examples/legacy-component-preserved/",
        "content": "Legacy Component This component was migrated from the legacy documentation system. Usage This is an example of how a component was documented in the previous system. Code Example Component Title Component content goes here Properties Property Type Default Description title string &amp;quot;Component&amp;quot; The title displayed in the component header isCollapsible boolean false Whether the component can be collapsed",
        "description": "A sample legacy component from the previous documentation system",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Legacy Documentation Page",
        "url": "/components/shared/migration-examples/legacy-page-converted/",
        "content": "Legacy Documentation Page This page was part of the legacy documentation system and has been migrated. Introduction This documentation page was written in the old format. It contains various elements that need to be properly converted. Section 1 Here is an example of a paragraph with some bold text and italic text. Subsection Lists are also common in documentation: First item Second item with a link Third item Section 2 Sometimes we need to include code snippets: function exampleFunction() { const message = &amp;quot;Hello, legacy documentation!&amp;quot;; console.log(message); return message; } Be careful when migrating legacy content to ensure all formatting is preserved correctly.",
        "description": "A sample legacy page from the previous documentation system",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "",
        "url": "/legacy-docs/conversion-report/",
        "content": "Legacy Documentation Conversion Report Report generated on: 2025-03-02T16:44:20.579Z Summary Total files converted to Markdown: 4 Total files preserved as Nunjucks: 0 Total errors: 0 Converted Files /home/runner/workspace/src/legacy-docs/njk/legacy-component.njk → /home/runner/workspace/src/legacy-docs/converted/legacy-component.md /home/runner/workspace/src/legacy-docs/njk/legacy-page.njk → /home/runner/workspace/src/legacy-docs/converted/legacy-page.md /home/runner/workspace/src/legacy-docs/njk/legacy-component.njk → /home/runner/workspace/src/components/shared/migration-examples/legacy-component-preserved.md /home/runner/workspace/src/legacy-docs/njk/legacy-page.njk → /home/runner/workspace/src/components/shared/migration-examples/legacy-page-converted.md",
        "description": "",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "",
        "url": "/utils/migration/README/",
        "content": "Migration Utilities This directory contains utilities for migrating content from legacy documentation systems to the new 11ty-based Enterprise Documentation System. Overview The migration utilities provide tools for converting content from various legacy formats: html-to-md.js - Converts HTML files to Markdown xml-to-md.js - Converts XML-based documentation (DITA, DocBook) to Markdown legacy-parser.js - Handles proprietary legacy formats md-formatter.js - Formats and normalizes converted Markdown files index.js - Exports all migration utilities for easy importing Usage Basic Conversion To convert HTML content to Markdown: const { convertHtmlToMd } = require(&amp;#039;./html-to-md&amp;#039;); // Convert a single file await convertHtmlToMd( &amp;#039;/path/to/source.html&amp;#039;, &amp;#039;/path/to/destination.md&amp;#039;, { siteType: &amp;#039;confluence&amp;#039;, // Optional: &amp;#039;confluence&amp;#039;, &amp;#039;sharepoint&amp;#039;, &amp;#039;jira&amp;#039;, &amp;#039;wordpress&amp;#039; preserveHeadings: true // Preserve heading levels rather than normalizing them } ); // Process an entire directory const { processDirectory } = require(&amp;#039;./html-to-md&amp;#039;); const results = await processDirectory( &amp;#039;/path/to/html-files&amp;#039;, &amp;#039;/path/to/output-directory&amp;#039;, { recursive: true, siteType: &amp;#039;confluence&amp;#039; } ); XML-based Documentation To convert DITA or DocBook content: const { convertXmlToMd } = require(&amp;#039;./xml-to-md&amp;#039;); // Convert a DITA file await convertXmlToMd( &amp;#039;/path/to/document.dita&amp;#039;, &amp;#039;/path/to/output.md&amp;#039;, { xmlType: &amp;#039;dita&amp;#039;, // or &amp;#039;docbook&amp;#039; extractMetadata: true } ); Proprietary Formats For custom or proprietary legacy documentation formats: const { parseLegacyToMd } = require(&amp;#039;./legacy-parser&amp;#039;); // Convert a legacy format file await parseLegacyToMd( &amp;#039;/path/to/legacy-doc&amp;#039;, &amp;#039;/path/to/output.md&amp;#039;, { format: &amp;#039;wiki&amp;#039; // or &amp;#039;rtf&amp;#039;, &amp;#039;custom&amp;#039;, etc. } ); Post-processing Markdown After conversion, you can normalize and format the Markdown files: const { formatMarkdown } = require(&amp;#039;./md-formatter&amp;#039;); // Format a markdown file await formatMarkdown( &amp;#039;/path/to/input.md&amp;#039;, &amp;#039;/path/to/formatted.md&amp;#039;, { topHeadingLevel: 1, applyEdsStyles: true, fixLinks: true, baseUrl: &amp;#039;https://docs.example.com&amp;#039; } ); Configuration Options HTML to Markdown Options Option Type Default Description siteType string &amp;#039;generic&amp;#039; Source site type: &amp;#039;confluence&amp;#039;, &amp;#039;sharepoint&amp;#039;, &amp;#039;jira&amp;#039;, &amp;#039;wordpress&amp;#039; preserveHeadings boolean false Whether to preserve existing heading levels extractFrontMatter boolean true Extract metadata into front matter cleanupImages boolean true Clean up image paths and download images processCodeBlocks boolean true Process code blocks with language detection baseUrl string &amp;#039;&amp;#039; Base URL for fixing relative links XML to Markdown Options Option Type Default Description xmlType string &amp;#039;auto&amp;#039; Type of XML: &amp;#039;dita&amp;#039;, &amp;#039;docbook&amp;#039;, or &amp;#039;auto&amp;#039; for auto-detection extractMetadata boolean true Extract metadata into front matter preserveStructure boolean false Preserve original document structure processRelationships boolean true Process related links and references Legacy Parser Options Option Type Default Description format string &amp;#039;auto&amp;#039; Format type: &amp;#039;wiki&amp;#039;, &amp;#039;rtf&amp;#039;, &amp;#039;custom&amp;#039;, or &amp;#039;auto&amp;#039; customParser function null Custom parsing function for proprietary formats extractMetadata boolean true Extract metadata from the document Markdown Formatter Options Option Type Default Description topHeadingLevel number 1 Normalize top heading level (1-6) applyEdsStyles boolean true Apply EDS-specific styles and conventions fixLinks boolean true Fix and normalize links fixTables boolean true Fix table formatting baseUrl string &amp;#039;&amp;#039; Base URL for fixing relative links Testing You can test the migration utilities with sample files: # Run migration tests node scripts/run-migration-test.js Example A complete migration workflow might look like: const { convertHtmlToMd } = require(&amp;#039;./src/utils/migration/html-to-md&amp;#039;); const { formatMarkdown } = require(&amp;#039;./src/utils/migration/md-formatter&amp;#039;); async function migrateDocument(sourcePath, destinationPath) { // First convert HTML to Markdown const result = await convertHtmlToMd( sourcePath, &amp;#039;/tmp/intermediate.md&amp;#039;, { siteType: &amp;#039;confluence&amp;#039; } ); if (result.status === &amp;#039;converted&amp;#039;) { // Then format and normalize the Markdown await formatMarkdown( &amp;#039;/tmp/intermediate.md&amp;#039;, destinationPath, { topHeadingLevel: 1, applyEdsStyles: true, fixLinks: true } ); console.log(`Successfully migrated: ${sourcePath} -&amp;gt; ${destinationPath}`); return true; } console.error(`Failed to convert: ${sourcePath}`); return false; } Architecture The migration utilities are designed to be modular and composable. Each module focuses on a specific conversion task, and they can be combined to create custom migration workflows. migration/ ├── index.js # Main entry point exporting all utilities ├── html-to-md.js # HTML to Markdown conversion ├── xml-to-md.js # XML to Markdown conversion ├── legacy-parser.js # Proprietary format parsing └── md-formatter.js # Markdown formatting and normalization",
        "description": "",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "",
        "url": "/utils/README/",
        "content": "Enterprise Documentation System Utilities This directory contains utility modules used throughout the EDS documentation platform. Migration Utilities The migration/ directory contains tools for migrating content from legacy documentation systems to the new 11ty-based Enterprise Documentation System. See the Migration README for detailed documentation. Nunjucks to Markdown Converter The njk-to-md.js utility converts Nunjucks (.njk) templates to Markdown (.md) format to facilitate content migration and consolidation. Features Convert Nunjucks templates to Markdown Preserve original templates when needed Extract front matter from templates Process HTML content into proper Markdown Generate reports of the conversion process Create sample legacy content for testing Usage const { convertNjkToMd, copyNjkFile, processDirectory, generateConversionReport, createSampleLegacyContent } = require(&amp;#039;./utils/njk-to-md&amp;#039;); // Convert a single Nunjucks file to Markdown await convertNjkToMd( &amp;#039;src/legacy-docs/component.njk&amp;#039;, &amp;#039;src/components/component.md&amp;#039;, { title: &amp;#039;Component Title&amp;#039;, description: &amp;#039;Component description&amp;#039; }, { layout: &amp;#039;layouts/component.njk&amp;#039;, addFrontMatter: true } ); // Copy a Nunjucks file without converting await copyNjkFile( &amp;#039;src/legacy-docs/template.njk&amp;#039;, &amp;#039;src/components/template.njk&amp;#039;, { preserveLayout: true } ); // Process an entire directory const results = await processDirectory( &amp;#039;src/legacy-docs&amp;#039;, &amp;#039;src/converted&amp;#039;, { convertToMarkdown: true, // Set to false to preserve as .njk recursive: true, preserveLayout: false, layoutMap: { &amp;#039;legacy_layout&amp;#039;: &amp;#039;layouts/modern.njk&amp;#039; } } ); // Generate a conversion report generateConversionReport(results, &amp;#039;src/conversion-report.md&amp;#039;); // Create sample legacy content for testing createSampleLegacyContent(&amp;#039;src/legacy-samples&amp;#039;); API Reference convertNjkToMd(source, dest, data = {}, options = {}) Converts a Nunjucks template to Markdown. Parameters: source (string): Path to the source .njk file dest (string): Path where to save the .md file data (object): Optional data to pass to the Nunjucks template options (object): Additional options for conversion layout (string): Layout to use in the front matter addFrontMatter (boolean): Whether to add front matter to the output preserveLayout (boolean): Keep the original layout reference layoutMap (object): Map of legacy layouts to new layouts Returns: Promise - Result object with status and path copyNjkFile(source, dest, options = {}) Copies a Nunjucks file without converting it. Parameters: source (string): Path to the source .njk file dest (string): Path where to save the .njk file options (object): Additional options for copying preserveLayout (boolean): Keep the original layout reference layoutMap (object): Map of legacy layouts to new layouts Returns: Promise - Result object with status and path processDirectory(sourceDir, destDir, options = {}) Process a directory of Nunjucks files, converting them to Markdown or preserving them as needed. Parameters: sourceDir (string): The directory containing .njk files destDir (string): The directory where to save processed files options (object): Options for processing convertToMarkdown (boolean|function): Whether to convert to markdown (true) or preserve as njk (false) recursive (boolean): Process subdirectories recursively preserveLayout (boolean): Keep original layout references layoutMap (object): Map of legacy layouts to new layouts fileMap (object): Custom filename mapping for specific files Returns: Promise - Results of the processing with converted, preserved, and error counts generateConversionReport(results, reportPath) Generate a report of the conversion process. Parameters: results (object): The results from processDirectory reportPath (string): Path to save the report createSampleLegacyContent(directory) Create sample legacy content for demonstration. Parameters: directory (string): Directory to create sample content Example Full example of converting legacy content: const path = require(&amp;#039;path&amp;#039;); const { createSampleLegacyContent, processDirectory, generateConversionReport } = require(&amp;#039;./utils/njk-to-md&amp;#039;); // Configuration const LEGACY_NJK_DIR = path.join(__dirname, &amp;#039;src/legacy-docs/njk&amp;#039;); const CONVERTED_MD_DIR = path.join(__dirname, &amp;#039;src/legacy-docs/converted&amp;#039;); const REPORT_PATH = path.join(__dirname, &amp;#039;src/legacy-docs/conversion-report.md&amp;#039;); // Create sample legacy content createSampleLegacyContent(LEGACY_NJK_DIR); // Convert to markdown const results = await processDirectory( LEGACY_NJK_DIR, CONVERTED_MD_DIR, { convertToMarkdown: true, layoutMap: { &amp;#039;legacy_component&amp;#039;: &amp;#039;layouts/component.njk&amp;#039;, &amp;#039;legacy_doc&amp;#039;: &amp;#039;layouts/page.njk&amp;#039; } } ); // Generate a report generateConversionReport(results, REPORT_PATH);",
        "description": "",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Sample Document",
        "url": "/migrated/test-migration/sample/",
        "content": "Sample Document This content was migrated from HTML. Review may be needed.",
        "description": "",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Sample HTML Document",
        "url": "/migrated/test-migration/sample-page/",
        "content": "Sample HTML Document This content was migrated from HTML. Review may be needed.",
        "description": "",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Migrated Content",
        "url": "/resources/migrated-content/",
        "content": "Migrated Content This page provides access to documentation content that has been migrated from legacy systems using our migration tools. Recent Migrations Test Migration These files were migrated during our test migration process: Sample Document Sample HTML Document Production Migrations These files have been migrated from production legacy systems: Sample Document Sample HTML Document How to Access Migrated Files After running a migration: Migrated files are saved to the src/migrated directory by default They are organized by repository name in subdirectories A migration report is generated at src/migrated/migration-report.md A navigation file is created at src/migrated/migrated-nav.json Manual Access To browse the migrated files directly: Check the file system at example-files/migrated for test migrations Check the file system at src/migrated for production migrations Migration Report If you&amp;#039;ve run a migration, you can view the migration report to see what files were processed. Learn More Migration Guide Migration Tools",
        "description": "Content migrated from legacy documentation systems",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Migrated Content Directory",
        "url": "/migrated/",
        "content": "Migrated Content Directory This page provides access to all migrated content from legacy documentation systems. Repository: Test Migration These files were migrated during our test migration process: Sample Document Sample Component Sample Page Sample Migration Report The migration report provides details about what files were processed during migration: View Migration Report How to Run Your Own Migration To migrate your own content from legacy systems: Edit your repository paths in scripts/migration-config.js Run one of the following commands: # Interactive CLI tool (recommended) node scripts/migrate-cli.js # Quick migration script ./scripts/migrate.sh Learn More Migration Guide Migration Tools Migrated Content Overview",
        "description": "Content migrated from legacy documentation systems",
        "type": "Page",
        "date": "2025-03-02"
      },
    
  
    
      {
        "title": "Design System",
        "url": "/design-system/",
        "content": "Enterprise Design System The Enterprise Design System (EDS) provides a comprehensive set of guidelines, components, and resources to help teams create cohesive, accessible, and visually consistent enterprise applications. Core Principles Consistency Create seamless user experiences through consistent patterns, behaviors, and visual elements across all enterprise applications. Modularity Use modular components that can be combined in different ways to create flexible and adaptable user interfaces. Efficiency Optimize workflows and reduce cognitive load through intuitive interfaces and consistent interaction patterns. Inclusivity Design for all users with strong accessibility standards and support for diverse user needs and preferences. Design System Structure The Enterprise Design System is organized into several key sections: Foundations Core design elements that form the building blocks of our interface. Color Typography Spacing Grid System Components Reusable UI elements that can be composed to create interfaces. Layout Components Input Components Navigation Components Guidelines Best practices and standards for creating effective interfaces. Accessibility Content Resources Tools and assets to help implement the design system. Design Tokens Templates Downloads Getting Started If you&amp;#039;re new to the Enterprise Design System, we recommend starting with the following resources: Introduction to the Design System - Learn about the core concepts and principles. Design Foundations - Explore the fundamental elements that make up our visual language. Component Library - Browse our collection of UI components and learn how to use them. Design Tokens - Understand how to implement the design system in your projects.",
        "description": "Comprehensive guidelines and principles for creating consistent enterprise applications",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Converted Legacy Documentation",
        "url": "/legacy-docs/converted/",
        "content": "Converted Legacy Documentation This section contains documentation that has been migrated from legacy formats to our new documentation system. These pages were automatically converted to Markdown format and integrated into the navigation structure. Available Legacy Documentation Browse the converted legacy documentation: Legacy Component - Example of a legacy component that was converted to the new format Legacy Page - Example of a general documentation page from a legacy system About the Conversion Process These documents went through an automated conversion process that: Extracted content from the source format Preserved information structure and hierarchy Applied consistent formatting rules Integrated with the navigation system For more information about how legacy content is migrated, visit the Legacy Migration page.",
        "description": "Documentation that has been converted from legacy formats to our new documentation system",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Preserved Legacy Documentation",
        "url": "/legacy-docs/njk/",
        "content": "Preserved Legacy Documentation This section contains legacy documentation that has been preserved in its original Nunjucks (.njk) format. Rather than converting these files to Markdown, we&amp;#039;ve kept them in their native format to ensure exact rendering and behavior of complex legacy components. Available Preserved Documentation Browse the preserved legacy documentation: Legacy Component - Example of a complex component preserved in Nunjucks format Legacy Page - Example of a documentation page preserved in its original format About Preservation Some legacy content is better preserved in its original format, especially when: The component has complex interactive behavior The layout relies on specific template features Exact visual rendering is critical The content will eventually be fully redesigned For more information about our approach to legacy content migration, visit the Legacy Migration page.",
        "description": "Documentation that has been preserved in its original Nunjucks format",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Migration Examples",
        "url": "/components/shared/migration-examples/",
        "content": "Migration Examples This section provides examples that demonstrate different approaches to migrating legacy documentation into the Enterprise Design System. These examples show both preservation and conversion strategies. Available Examples Legacy Component Preserved - Example of a component where the original structure was preserved Legacy Page Converted - Example of a documentation page that was fully converted to the new format Migration Approaches The Enterprise Documentation System supports multiple approaches to handling legacy content: 1. Full Conversion Converting legacy content completely to the new Markdown-based format with standardized structure, styling, and interactive elements. 2. Hybrid Approach Wrapping legacy content with the new design system header/footer while preserving the original content rendering for complex components. 3. Reference Linking For very complex legacy documentation systems, creating reference links in the new system that direct users to the original documents. Benefits of Migration Consistent Navigation: All documentation available through one navigation system Improved Search: Content more easily discovered through unified search Maintained Context: Legacy documentation presented in context with modern components Gradual Transition: Allows teams to transition over time rather than requiring a &amp;amp;quot;big bang&amp;amp;quot; migration For more information about our content migration approach, visit the Legacy Migration page.",
        "description": "Examples demonstrating different approaches to migrating legacy documentation",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Migration Guide",
        "url": "/resources/migration-guide/",
        "content": "Content Migration Guide This guide explains the simplified process for migrating legacy content into the Enterprise Documentation System. Quick Migration Steps Prepare your content files Format your legacy content as one of the supported file types: Markdown (.md) Nunjucks templates (.njk) HTML (.html) XML (.xml) - including DITA or DocBook Add front matter Ensure each file has proper front matter at the top of the file: --- title: &amp;quot;Page Title&amp;quot; description: &amp;quot;Brief description of the content&amp;quot; category: components | design-system | resources | legacy subcategory: layout | navigation | feedback | inputs legacy_source: confluence | sharepoint | wordpress | jira | dita --- Place in watch directory Copy your prepared files to the appropriate incoming directory: For Markdown: /src/incoming/markdown/ For Nunjucks: /src/incoming/nunjucks/ For HTML: /src/incoming/html/ For XML: /src/incoming/xml/ Automatic processing The system will automatically: Convert the content to the appropriate format Place it in the correct location based on the front matter Update the navigation to include the new content Move the original file to a &amp;amp;quot;processed&amp;amp;quot; folder to avoid reprocessing Verify the result Check the documentation site to ensure your content appears correctly Front Matter Options Field Required Description Example Values title Yes The title of the page &amp;amp;quot;Button Component&amp;amp;quot; description Yes Brief description &amp;amp;quot;Standard button component with variants&amp;amp;quot; category Yes Primary category components, design-system, resources, legacy subcategory No Secondary category layout, navigation, feedback, inputs legacy_source No Source system confluence, sharepoint, wordpress, jira, dita status No Component status stable, experimental, deprecated tags No Additional tags [&amp;amp;quot;ui&amp;amp;quot;, &amp;amp;quot;interactive&amp;amp;quot;] Directory Structure /src/ /incoming/ # Watch directory for new files /markdown/ # For .md files /nunjucks/ # For .njk files /html/ # For .html files /xml/ # For structured XML content /legacy/ # All legacy content (consolidated) /confluence/ # Content from Confluence /sharepoint/ # Content from SharePoint /wordpress/ # Content from WordPress /jira/ # Content from Jira /dita/ # Content from DITA sources /components/ # Modern component documentation /layout/ # Layout components /navigation/ # Navigation components /feedback/ # Feedback components /inputs/ # Input components /design-system/ # Design system documentation /resources/ # Additional resources How It Works The system continuously monitors the /src/incoming/ directories for new files When a file is added, it&amp;#039;s processed based on its file extension Front matter is extracted or created based on the content Files are converted to Markdown where appropriate, preserving as much formatting as possible Legacy content is maintained separately but integrated into the navigation The original file is moved to a &amp;amp;quot;processed&amp;amp;quot; folder to prevent duplicate processing Handling Special Cases Layout Files If your Nunjucks file is a layout file (contains Nunjucks extend tags or block content tags), it will be automatically copied to the _includes/layouts directory instead. Legacy Components For complex legacy components that should be preserved as-is, set the category to &amp;amp;quot;legacy&amp;amp;quot; and specify the legacy_source. These files will be copied rather than converted. Missing Front Matter If your file doesn&amp;#039;t have front matter, the system will try to extract a title from the content (from &amp;amp;lt;title&amp;amp;gt;, &amp;amp;lt;h1&amp;amp;gt;, or first heading). Other metadata will be set to default values. Need Help? If you encounter any issues with the migration process, please contact the documentation team for assistance.",
        "description": "Simple guide for migrating legacy content into the Enterprise Documentation System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button Component",
        "url": "/incoming/markdown/processed/test-button/",
        "content": "Button Component The button component provides a consistent, accessible way to trigger actions throughout the application. Features Multiple visual styles (primary, secondary, tertiary) Various sizes (small, medium, large) Support for icons Full accessibility support Customizable hover and focus states Usage &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; Click Me &amp;amp;lt;/button&amp;gt; Variants Primary Button The primary button style should be used for the main call-to-action on a page. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; Primary Button &amp;amp;lt;/button&amp;gt; Secondary Button Secondary buttons are used for actions that are important but not the primary focus. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--secondary&amp;quot;&amp;gt; Secondary Button &amp;amp;lt;/button&amp;gt; Tertiary Button Tertiary buttons are used for less important actions. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--tertiary&amp;quot;&amp;gt; Tertiary Button &amp;amp;lt;/button&amp;gt; Accessibility All button components support: Keyboard navigation High contrast modes Screen reader announcements Focus states Best Practices Use button text that clearly indicates the action Maintain adequate spacing between buttons Limit the number of primary buttons on a single page Consider using icons to enhance clarity",
        "description": "Standard button component with multiple styles and sizes",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button Component",
        "url": "/components/inputs/button-component/",
        "content": "Button Component The button component provides a consistent, accessible way to trigger actions throughout the application. Features Multiple visual styles (primary, secondary, tertiary) Various sizes (small, medium, large) Support for icons Full accessibility support Customizable hover and focus states Usage &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; Click Me &amp;amp;lt;/button&amp;gt; Variants Primary Button The primary button style should be used for the main call-to-action on a page. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--primary&amp;quot;&amp;gt; Primary Button &amp;amp;lt;/button&amp;gt; Secondary Button Secondary buttons are used for actions that are important but not the primary focus. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--secondary&amp;quot;&amp;gt; Secondary Button &amp;amp;lt;/button&amp;gt; Tertiary Button Tertiary buttons are used for less important actions. &amp;amp;lt;button class=&amp;quot;eds-button eds-button--tertiary&amp;quot;&amp;gt; Tertiary Button &amp;amp;lt;/button&amp;gt; Accessibility All button components support: Keyboard navigation High contrast modes Screen reader announcements Focus states Best Practices Use button text that clearly indicates the action Maintain adequate spacing between buttons Limit the number of primary buttons on a single page Consider using icons to enhance clarity",
        "description": "Standard button component with multiple styles and sizes",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Migration System",
        "url": "/resources/content-migration/",
        "content": "Content Migration System The Enterprise Documentation System includes a simplified, automated system for migrating legacy content. This guide explains how to use the system to quickly bring content from various legacy documentation sources into the unified platform. Migration Overview The migration system works by: Monitoring special &amp;amp;quot;watch directories&amp;amp;quot; for new content files Automatically processing files based on their type Placing content in the appropriate location within the documentation system Adding the content to the navigation structure Preserving original files in a &amp;amp;quot;processed&amp;amp;quot; directory to avoid duplicate processing How to Migrate Content Step 1: Prepare Your Content Files Format your legacy content as one of the supported file types: Markdown (.md) - For text-based content Nunjucks (.njk) - For template-based content HTML (.html) - For HTML documents XML (.xml) - For structured content (like DITA or DocBook) Add front matter to the top of each file: --- title: &amp;quot;Page Title&amp;quot; description: &amp;quot;Brief description of the content&amp;quot; category: components | design-system | resources | legacy subcategory: layout | navigation | feedback | inputs # Optional legacy_source: confluence | sharepoint | wordpress | jira # Optional --- Step 2: Place in Watch Directory Copy your prepared files to the corresponding directory: For Markdown: /src/incoming/markdown/ For Nunjucks: /src/incoming/nunjucks/ For HTML: /src/incoming/html/ For XML: /src/incoming/xml/ Step 3: Automatic Processing The system will automatically: Detect the new file Process it based on its file extension and front matter Convert the content to the appropriate format if needed Place it in the correct location within the site structure Update the navigation to include the new content Move the original file to a &amp;amp;quot;processed&amp;amp;quot; folder Step 4: Verify the Results Check the website to ensure your content appears correctly and is accessible through the navigation. Front Matter Reference Field Required Description Example Values title Yes The title of the page &amp;amp;quot;Button Component&amp;amp;quot; description Yes Brief description &amp;amp;quot;Standard button component with variants&amp;amp;quot; category Yes Primary category components, design-system, resources, legacy subcategory No Secondary category layout, navigation, feedback, inputs legacy_source No Source system confluence, sharepoint, wordpress, jira status No Component status stable, experimental, deprecated Special Cases Layout Files If your Nunjucks file is a layout file (contains layout-related code), it will be automatically detected and copied to the _includes/layouts directory. Legacy Components For complex legacy components that should be preserved as-is (not converted to Markdown): --- title: &amp;quot;Legacy Widget&amp;quot; description: &amp;quot;Complex widget from legacy system&amp;quot; category: &amp;quot;legacy&amp;quot; legacy_source: &amp;quot;confluence&amp;quot; --- Missing Front Matter If your file doesn&amp;#039;t have front matter, the system will try to extract a title from: The &amp;amp;lt;title&amp;amp;gt; tag (HTML) The first &amp;amp;lt;h1&amp;amp;gt; heading The filename Other metadata will be set to default values. Running the Migration System The migration system runs as a background watcher service: # Start the migration watcher npm run watch:incoming # Or use both the watcher and the development server npm run dev Troubleshooting Common Issues File not processed: Make sure the file has the correct extension and is placed in the correct directory. Content placed in wrong location: Check the front matter for correct category and subcategory values. Conversion errors: For complex content, you may need to manually format the source content before migration. Logging The migration system logs all actions to the console, including: When files are detected Where they are placed Any errors that occur during processing Examples Markdown Example --- title: &amp;quot;Button Component&amp;quot; description: &amp;quot;Standard button component with multiple styles and sizes&amp;quot; category: &amp;quot;components&amp;quot; subcategory: &amp;quot;inputs&amp;quot; --- # Button Component The button component provides a consistent way to trigger actions. ## Features - Multiple visual styles - Various sizes - Support for icons HTML Example &amp;amp;lt;!DOCTYPE html&amp;gt; &amp;amp;lt;html&amp;gt; &amp;amp;lt;head&amp;gt; &amp;amp;lt;title&amp;gt;Legacy Alert Component&amp;amp;lt;/title&amp;gt; &amp;amp;lt;/head&amp;gt; &amp;amp;lt;body&amp;gt; &amp;amp;lt;h1&amp;gt;Alert Component&amp;amp;lt;/h1&amp;gt; &amp;amp;lt;p&amp;gt;The alert component is used to display important messages.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;div class=&amp;quot;example&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert alert-info&amp;quot;&amp;gt; This is an example alert &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/body&amp;gt; &amp;amp;lt;/html&amp;gt; Need Help? If you encounter any issues with the migration process, check the logs in the terminal where the watcher is running, or contact the documentation team for assistance.",
        "description": "Documentation on using the simplified content migration system",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Typography",
        "url": "/design-system/foundations/typography/",
        "content": "Typography Typography plays a crucial role in creating clear, readable, and hierarchical interfaces. Our typography system provides guidelines for using fonts consistently across all enterprise applications. Font Families The Enterprise Design System uses a combination of sans-serif and monospace fonts to create a professional and readable interface. Primary Font: Inter Aa Bb Cc Dd Ee 0123456789!@#$%^&amp;amp;*() Inter is used for all primary text, including headings, body text, and UI elements. It provides excellent readability at various sizes and weights. Monospace: IBM Plex Mono Aa Bb Cc Dd Ee 0123456789!@#$%^&amp;amp;*() IBM Plex Mono is used for code snippets, technical content, and data-focused UI elements where a monospaced font enhances readability. Type Scale Our type scale is designed to create clear hierarchy while maintaining readability across different screen sizes. Name Size Line Height Weight Example Display 36px (2.25rem) 1.2 700 Display Heading 1 30px (1.875rem) 1.25 700 Heading 1 Heading 2 24px (1.5rem) 1.3 600 Heading 2 Heading 3 20px (1.25rem) 1.4 600 Heading 3 Heading 4 18px (1.125rem) 1.4 600 Heading 4 Body 16px (1rem) 1.5 400 Body text Small 14px (0.875rem) 1.5 400 Small text Caption 12px (0.75rem) 1.5 400 Caption text Font Weights We use a range of font weights to create hierarchy and emphasis in our interfaces. Font Light (300) Used sparingly for large display text. Font Regular (400) Default weight for body text and most UI elements. Font Medium (500) Used for emphasis and importance within body text. Font Semibold (600) Used for subheadings and important UI elements. Font Bold (700) Used for headings and primary actions. Usage Guidelines Hierarchy Create clear hierarchies using a combination of size, weight, and color. Limit the number of type styles on a single screen to maintain visual order. Page Title Page subtitle or description Section Heading This is regular body text. It should be used for the main content of your interface. Keep paragraphs concise and focused on a single idea to improve readability. Subsection Heading Another paragraph of body text showing the hierarchy in action. This is small text, used for secondary information, captions, or helper text. Responsive Typography Our typography system is designed to work across all screen sizes. Font sizes automatically adjust for different viewports to maintain readability. Responsive Typography Our typography scales down proportionally on mobile devices to maintain readability while preserving hierarchy. No additional code is required to support this behavior. Accessibility Follow these guidelines to ensure typography is accessible to all users: Maintain a minimum font size of 14px (0.875rem) for body text. Ensure sufficient color contrast between text and its background. Avoid using font weight as the only visual differentiator. Don&amp;#039;t use all caps for lengthy text blocks. Keep line lengths between 60-80 characters for optimal readability. Technical Implementation CSS Variables Our typography system is implemented using CSS variables that can be used across your application: :root { /* Font families */ --eds-font-sans: &amp;#039;Inter&amp;#039;, system-ui, sans-serif; --eds-font-mono: &amp;#039;IBM Plex Mono&amp;#039;, monospace; /* Font sizes */ --eds-font-size-xs: 0.75rem; /* 12px */ --eds-font-size-sm: 0.875rem; /* 14px */ --eds-font-size-base: 1rem; /* 16px */ --eds-font-size-lg: 1.125rem; /* 18px */ --eds-font-size-xl: 1.25rem; /* 20px */ --eds-font-size-2xl: 1.5rem; /* 24px */ --eds-font-size-3xl: 1.875rem; /* 30px */ --eds-font-size-4xl: 2.25rem; /* 36px */ /* Line heights */ --eds-line-height-tight: 1.2; --eds-line-height-snug: 1.25; --eds-line-height-normal: 1.4; --eds-line-height-relaxed: 1.5; --eds-line-height-loose: 1.75; } Tailwind CSS When using our design system with Tailwind CSS, the following classes map to our typography system: Font families: font-eds-sans, font-eds-mono Font sizes: text-xs, text-sm, text-base, text-lg, text-xl, text-2xl, text-3xl, text-4xl Font weights: font-light, font-normal, font-medium, font-semibold, font-bold Line heights: leading-tight, leading-snug, leading-normal, leading-relaxed, leading-loose Related Resources Colors - Color guidelines and specifications Spacing - Spacing guidelines and scale Design Tokens - Technical implementation of our design system Accessibility - Accessibility guidelines and best practices",
        "description": "Typography guidelines and specifications for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Support",
        "url": "/support/",
        "content": "Support &amp;amp;amp; Help Welcome to the Enterprise Design System support section. Here you&amp;#039;ll find resources to help you implement the design system, get answers to your questions, and connect with our team. Frequently Asked Questions Get quick answers to common questions about the Enterprise Design System. How do I get started with the Enterprise Design System? The best way to get started is to: Review the Design System Overview to understand the core principles and guidelines. Explore the Foundations to learn about our fundamental design elements. Browse the Component Library to see what components are available. Check out the Downloads section to access design files and code libraries. How can I contribute to the design system? We welcome contributions from the community! To contribute: Review our Contribution Guidelines. Create a proposal using our Contribution Template. Submit your proposal to the design system team for review. For more details, visit our Contribution page. What if I need a component that doesn&amp;#039;t exist in the library? If you need a component that&amp;#039;s not currently in our library: Check if a similar component can be adapted for your needs. Submit a Feature Request with details about the component you need. Consider creating a custom component that follows our design guidelines until an official one is available. How do I report a bug or issue? To report a bug or issue with a component: Go to the Report a Bug page. Fill out the bug report form with as much detail as possible, including browser/device information, steps to reproduce, and screenshots if available. Submit the form, and our team will review and respond to your report. How often is the design system updated? The Enterprise Design System follows a regular release schedule: Major releases: 2-3 times per year (may include breaking changes) Minor releases: Monthly (new features, no breaking changes) Patch releases: As needed (bug fixes and small improvements) You can view our Roadmap to see upcoming changes and follow our Release Notes for details about each update. Support Channels Get help with implementing the Enterprise Design System through our various support channels. Community Forum Connect with other designers and developers to ask questions, share solutions, and discuss best practices. Visit Forum → Email Support Contact our support team directly for help with implementation issues or questions about the design system. Contact Support → GitHub Submit bug reports, feature requests, and contribute to the design system code repository. View Repository → Office Hours Virtual sessions with our design system team to get your questions answered and receive guidance on implementation. Schedule Session → Documentation &amp;amp;amp; Resources Find detailed documentation and guides to help you implement the Enterprise Design System. Getting Started Guide Step-by-step instructions for implementing the design system in your projects. Developer Guide Technical documentation for developers on how to use and extend the design system. Designer Guide Guidelines for designers on how to use design files and maintain consistency. Tutorials Step-by-step tutorials for common implementation scenarios. Release Notes Details about each release, including new features, improvements, and bug fixes. Roadmap See what&amp;#039;s coming in future releases of the Enterprise Design System. .faq-container { margin: 2rem 0; } .faq-item { border: 1px solid var(--color-border); border-radius: 8px; margin-bottom: 1rem; overflow: hidden; } .faq-question { padding: 1rem; cursor: pointer; font-weight: 600; position: relative; list-style: none; } .faq-question::after { content: &amp;#039;+&amp;#039;; position: absolute; right: 1rem; top: 50%; transform: translateY(-50%); font-size: 1.5rem; color: var(--color-primary); } details[open] .faq-question::after { content: &amp;#039;-&amp;#039;; } .faq-answer { padding: 0 1rem 1rem; border-top: 1px solid var(--color-border); } .support-channels { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1.5rem; margin: 2rem 0; } .support-channel { padding: 1.5rem; background-color: var(--color-bg-alt); border-radius: 8px; } .channel-icon { display: inline-flex; align-items: center; justify-content: center; width: 48px; height: 48px; background-color: var(--color-primary); color: white; border-radius: 8px; margin-bottom: 1rem; } .support-channel h3 { margin-top: 0; margin-bottom: 0.5rem; } .support-channel p { margin-bottom: 1rem; color: var(--color-text-muted); } .channel-link { font-weight: 500; } .resource-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1.5rem; margin: 2rem 0; } .resource-card { padding: 1.5rem; border: 1px solid var(--color-border); border-radius: 8px; transition: transform 0.2s ease, box-shadow 0.2s ease; display: block; color: var(--color-text); } .resource-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); text-decoration: none; } .resource-card h3 { margin-top: 0; margin-bottom: 0.5rem; color: var(--color-primary); } .resource-card p { margin: 0; color: var(--color-text-muted); }",
        "description": "Get help with implementation, report bugs, or request new features.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Resources",
        "url": "/resources/",
        "content": "Resources Welcome to the Enterprise Design System resources section. Here you&amp;#039;ll find templates, design tokens, and other tools to help you implement the design system efficiently in your projects. Templates Templates provide pre-built layouts for common page types and patterns, helping you maintain consistency while accelerating your development process. Page Templates Standard page layouts for common use cases such as dashboards, forms, and landing pages. UI Patterns Common interaction patterns and UI flows for consistent user experiences. Email Templates HTML email templates with responsive design and consistent branding. Design Tokens Design tokens are the visual design atoms of the design system — specifically, they are named entities that store visual design attributes. We use them in place of hard-coded values to ensure flexibility and consistency. Token Documentation Learn how to use design tokens in your projects for consistent implementation. CSS Variables CSS custom properties for web implementation of design tokens. Token Files JSON format design tokens for use with various platforms and tools. Downloads Access design assets and code libraries to implement the Enterprise Design System in your projects. Design Files Figma libraries and design assets for designers to use in their projects. Code Libraries Component libraries and code snippets for developers to implement the design system. Icon Library SVG icons for use in web, mobile, and desktop applications. Tools &amp;amp;amp; Utilities Tools to help you work more efficiently with the Enterprise Design System. Token Converter Convert design tokens between different formats (JSON, CSS, SCSS, etc.). Legacy Content Migration Tools and guidelines for migrating legacy documentation to the new format. Accessibility Checker Check color contrast and other accessibility requirements in your designs. Component Generator Generate component code based on design system specifications. Support &amp;amp;amp; Documentation Find additional help and resources for using the Enterprise Design System. Developer Documentation Frequently Asked Questions Tutorials and Guides Contact Support .resource-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 1.5rem; margin: 2rem 0; } .resource-card { padding: 1.5rem; border: 1px solid var(--color-border); border-radius: 8px; transition: transform 0.2s ease, box-shadow 0.2s ease; display: block; color: var(--color-text); } .resource-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1); text-decoration: none; } .resource-icon { display: inline-flex; align-items: center; justify-content: center; width: 48px; height: 48px; background-color: var(--color-primary); color: white; border-radius: 8px; margin-bottom: 1rem; } .resource-card h3 { margin-top: 0; margin-bottom: 0.5rem; color: var(--color-primary); } .resource-card p { margin: 0; color: var(--color-text-muted); } .resource-links { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0; } .resource-link { display: flex; align-items: center; padding: 0.75rem 1rem; border: 1px solid var(--color-border); border-radius: 4px; transition: background-color 0.2s ease; } .resource-link:hover { background-color: var(--color-bg-hover); text-decoration: none; } .resource-link svg { margin-right: 0.75rem; color: var(--color-primary); }",
        "description": "Access templates, design tokens, and downloadable assets for your projects.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Colors",
        "url": "/design-system/foundations/colors/",
        "content": "Color System Our color system is designed to create accessible, consistent, and visually appealing interfaces across all platforms. The color palette is intentionally crafted to align with our brand identity while providing flexibility for various use cases. Primary Colors The primary color of our design system is green (#368727), which represents growth, sustainability, and stability. This color is used for primary actions, navigation elements, and branding. Primary #368727 Primary Dark #286d1c Primary Light #4ba238 Text Colors Text colors are designed to provide optimal readability and accessibility. They should be used consistently across all interfaces. Text #333333 Text Muted #666666 Text Light #888888 Background Colors Background colors provide context and hierarchy to our interfaces, helping users understand the structure and functionality of our products. Background #ffffff Background Alt #f5f7f9 Background Hover #f0f2f5 Semantic Colors Semantic colors convey specific meanings and are used to communicate status, feedback, and alerts to users. Success #38a169 Warning #e9b949 Error #e53e3e Info #3182ce Dark Theme Colors Our design system supports a dark theme, which uses a different color palette optimized for low-light environments and user preference. Primary #4ba238 Text #e2e8f0 Background #1a202c Background Alt #2d3748 Accessibility Guidelines All color combinations used in our interfaces must meet WCAG 2.1 AA standards for contrast ratio: Text and interactive elements: minimum contrast ratio of 4.5:1 Large text (18pt and above): minimum contrast ratio of 3:1 UI components and graphical objects: minimum contrast ratio of 3:1 Good contrast Text on primary color (4.6:1) Poor contrast Text on light primary color (3.2:1) Using Colors in Design When applying colors to your designs, keep these principles in mind: Consistency: Use colors consistently to reinforce meaning and functionality. Hierarchy: Use color to establish visual hierarchy and guide user attention. Accessibility: Ensure sufficient contrast between text and background colors. Purpose: Use semantic colors for their intended purpose only. Restraint: Limit the use of colors to avoid overwhelming users. Implementation For web implementations, use the CSS variables defined in our design system: /* Primary colors */ --color-primary: #368727; --color-primary-dark: #286d1c; --color-primary-light: #4ba238; /* Text colors */ --color-text: #333333; --color-text-muted: #666666; --color-text-light: #888888; /* Background colors */ --color-bg: #ffffff; --color-bg-alt: #f5f7f9; --color-bg-hover: #f0f2f5; /* Semantic colors */ --color-success: #38a169; --color-warning: #e9b949; --color-error: #e53e3e; --color-info: #3182ce;",
        "description": "Our color palette, including primary, secondary, and semantic colors, along with usage guidelines.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Component Name",
        "url": "/templates/component-tab-templates/design/",
        "content": "Anatomy Component visualization Key Elements 1 Element Name - Description of this element 2 Element Name - Description of this element 3 Element Name - Description of this element Structured breakdown and detailed description of the components and their relationships within a user interface. Considerations When to use this component Use case 1 Use case 2 Use case 3 Use case 4 Use case 5 When to use something else Alternative case 1 Alternative case 2 Alternative case 3 Alternative case 4 Alternative case 5 Key factors and criteria that influence design decisions regarding component choice for alignment with user needs and design system guidelines. Usage General Usage Guidelines Guideline 1 Description of this guideline Guideline 2 Description of this guideline Guideline 3 Description of this guideline Guidelines and best practices for the implementation of design components, ensuring they are used consistently and appropriately when applied. Behavior Interaction 1 Description of this interaction pattern. Important note about this interaction pattern. Interaction 2 Description of this interaction pattern. States Description of the component&amp;#039;s various states. Highlights interactive and dynamic aspects of design components, detailing how they respond to user actions and changes in state in relation to the user experience. Best Practices Do Best practice 1 Best practice 2 Best practice 3 Don&amp;#039;t Anti-pattern 1 Anti-pattern 2 Anti-pattern 3 Content Guidelines Content guideline 1 Content guideline 2 Content guideline 3 Content guideline 4 Content guideline 5 Content guideline 6 The recommended methods and strategies for designing and implementing components, ensuring efficiency and consistent use. Specifications Component (state 1) Component (state 2) Dimensions Property Value Description Property 1 Value 1 Description 1 Property 2 Value 2 Description 2 Property 3 Value 3 Description 3 Detailed technical specifications and exact measurements of component parts, to ensure consistent replication across implementations.",
        "description": "Short description of the component&amp;#039;s purpose and use cases.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Component Name",
        "url": "/templates/component-tab-templates/code/",
        "content": "Installation Make sure the necessary libraries are installed for this component. HTML &amp;amp;amp; CSS npm install @enterprise-design-system/component-name React npm install @enterprise-design-system/react-component-name Attributes When using properties in JavaScript, use camelCase versions of the attribute names listed below. Attribute Type Default Description attribute-1 type default Description of this attribute attribute-2 type default Description of this attribute attribute-3 type default Description of this attribute Events Name Event content event-1 Description of when this event fires event-2 Description of when this event fires States Name Default variant Description Default true The normal state State 1 false Description of this state State 2 false Description of this state CSS Helper classes CSS class Applies to Outcome eds-component Container Main container class eds-component__element-1 Element Styles for this element eds-component__element-2 Element Styles for this element CSS modifier classes CSS class Applies to Outcome eds-component--modifier-1 Container Effect of this modifier eds-component--modifier-2 Container Effect of this modifier eds-component--modifier-3 Container Effect of this modifier Namespacing If your architecture currently conflicts with Enterprise UI or any other external libraries, it may be that there are conflicting styles (i.e. you are targeting specific selectors in your own code). All components in Enterprise Design System are prefixed with &amp;#039;eds-&amp;#039; to help reduce the possibility of selector conflicts. Import reference The following two references are used to load libraries and should be referenced from Enterprise Design libraries. These references can be used at any component level. import { ComponentName } from &amp;#039;@enterprise-design-system/react-components&amp;#039;; &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;https://cdn.enterprise-design.com/libs/component-name.css&amp;amp;quot;&amp;amp;gt; Javascript The following JS code samples can be used to interact with this component: // Initialize the component const component = new EnterpriseComponent(document.querySelector(&amp;#039;.eds-component&amp;#039;)); // Method 1 component.method1(); // Method 2 component.method2(); // Listen for events component.addEventListener(&amp;#039;event-1&amp;#039;, (event) =&amp;amp;gt; { console.log(&amp;#039;Event 1 fired&amp;#039;); }); // Enable/disable component.disabled = false; // Enable component.disabled = true; // Disable SCSS The following SCSS variables are used by Enterprise Design&amp;#039;s component: // Component variables $eds-component-variable-1: var(--color-value); $eds-component-variable-2: var(--color-value); $eds-component-variable-3: var(--color-value); // In your custom implementation @import &amp;#039;@enterprise-design-system/scss/components/component-name&amp;#039;; // Override variables if needed $eds-component-variable-1: #f5f5f5; // Use the component mixins .custom-component { @include eds-component(); // Customizations .eds-component__element { // Your custom styles } }",
        "description": "Short description of the component&amp;#039;s purpose and use cases.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Component Name",
        "url": "/templates/component-tab-templates/accessibility/",
        "content": "Accessibility Components should be accessible to all users, including those using assistive technologies such as screen readers. Follow these guidelines to ensure your components meet accessibility standards. ARIA Roles and Attributes Use aria-attribute-1 to [purpose] Include aria-attribute-2 that [purpose] Apply role=&amp;amp;quot;role-name&amp;amp;quot; to [element] with aria-attribute-3 [purpose] Ensure all interactive elements have appropriate ARIA roles and states Use aria-disabled=&amp;amp;quot;true&amp;amp;quot; when component is disabled but still visible Keyboard Navigation Key Function Tab Moves focus to the component Enter or Space Activates the component Arrow Keys Description of arrow key behavior Escape Description of escape key behavior Implementation Here&amp;#039;s how to correctly implement an accessible component: &amp;amp;lt;div class=&amp;amp;quot;eds-component&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;element id=&amp;amp;quot;component-id-1&amp;amp;quot; class=&amp;amp;quot;eds-component__element&amp;amp;quot; aria-attribute-1=&amp;amp;quot;value&amp;amp;quot; aria-attribute-2=&amp;amp;quot;value&amp;amp;quot;&amp;amp;gt; Component content &amp;amp;lt;span class=&amp;amp;quot;eds-component__icon&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;/element&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;component-id-2&amp;amp;quot; class=&amp;amp;quot;eds-component__content&amp;amp;quot; role=&amp;amp;quot;role-name&amp;amp;quot; aria-attribute-3=&amp;amp;quot;component-id-1&amp;amp;quot;&amp;amp;gt; Component content goes here. &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Important accessibility warning or consideration for this component. Testing Criteria Ensure your component passes these accessibility checks: Component must be focusable and operable with a keyboard State changes must be programmatically announced to screen readers Focus must remain in appropriate location after interactions Content must be properly associated with its related elements Color contrast must meet WCAG AA standards (4.5:1 for normal text) Icons must have sufficient contrast and not rely solely on color Animations must respect user preferences via the prefers-reduced-motion media query WAI-ARIA Compliance The component follows the WAI-ARIA Design Pattern. This ensures consistency with established accessibility standards and patterns. Required ARIA Attributes Attribute Applied to Purpose aria-attribute-1 Element type Purpose description aria-attribute-2 Element type Purpose description aria-attribute-3 Element type Purpose description role=&amp;amp;quot;role-name&amp;amp;quot; Element type Purpose description Important accessibility tip for implementing this component correctly. Responsive Considerations For users on mobile or touch devices: Ensure touch targets are at least 44×44 pixels Provide sufficient spacing between interactive elements to prevent accidental taps Consider alternative patterns for hover-dependent interactions Ensure text remains readable at smaller viewport sizes Adapt padding and margins for comfortable viewing on small screens Screen Reader Announcements When implemented correctly, screen readers should announce the following when interacting with the component: Action Announcement Focus on component &amp;amp;quot;Component Name, state, role&amp;amp;quot; Action 1 &amp;amp;quot;Component Name, updated state, role&amp;amp;quot; Action 2 &amp;amp;quot;Component Name, updated state, role&amp;amp;quot; Focus on disabled component &amp;amp;quot;Component Name, role, disabled&amp;amp;quot; Test your components with real screen readers like NVDA, JAWS, and VoiceOver to ensure they work as expected.",
        "description": "Short description of the component&amp;#039;s purpose and use cases.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Component Name",
        "url": "/templates/component-tab-templates/examples/",
        "content": "Examples Basic Example A standard implementation with default styling. Basic component example goes here &amp;amp;lt;div class=&amp;amp;quot;eds-component&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;bg-white p-4&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Basic component example goes here&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Variant 1 Description of this variant and when to use it. Variant 1 example &amp;amp;lt;div class=&amp;amp;quot;eds-component eds-component--variant-1&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;bg-white p-4&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Variant 1 example&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Variant 2 Description of this variant and when to use it. Variant 2 example State Example Example showing the component in different states. Default State Default state Active State Active state Complex Integration Example A more complex example showing how this component can be integrated with other components or in a specific context. Complex example that shows this component being used in a practical context with other components Additional content to demonstrate integration &amp;amp;lt;div class=&amp;amp;quot;bg-white p-6&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;eds-component&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;p-4 border-b border-[var(--color-border)]&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Complex example that shows this component being used in a practical context&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;p-4&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Additional content to demonstrate integration&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Responsive Behavior Example demonstrating how the component responds to different screen sizes. Resize the browser window to see how this component responds to different screen sizes The component should maintain usability across all viewport sizes, from mobile to desktop. Fully Accessible Example An example with all required accessibility attributes for screen reader support. This example includes all necessary ARIA attributes for accessibility &amp;amp;lt;div class=&amp;amp;quot;eds-component&amp;amp;quot; role=&amp;amp;quot;role-name&amp;amp;quot; aria-label=&amp;amp;quot;Accessible component example&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;This example includes all necessary ARIA attributes for accessibility&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt;",
        "description": "Short description of the component&amp;#039;s purpose and use cases.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Component Documentation Guide",
        "url": "/resources/component-documentation-guide/",
        "content": "Component Documentation Guide This guide provides an overview of our standardized component documentation structure and templates. Following these guidelines ensures all components are documented consistently and comprehensively. Standard Component Structure Each component in the Enterprise Design System follows a four-tab documentation structure: Design - Visual appearance, usage guidance and specifications Code - Technical implementation details Accessibility - ARIA roles, keyboard navigation, and best practices Examples - Working examples showing various implementations Directory Structure Components should be organized using this directory structure: src/ └── components/ └── [category]/ └── [component-name]/ ├── index.md # Design tab (main component page) ├── code.md # Code tab ├── accessibility.md # Accessibility tab └── examples.md # Examples tab Where [category] is one of: layout - Components that structure content (accordion, card, etc.) navigation - Components that help users move through the interface feedback - Components that provide user feedback (alerts, notifications) inputs - Interactive components for user input (buttons, forms, etc.) Using the Templates We&amp;#039;ve created standardized templates for each tab type to make documentation easier: Start by creating a new component directory with the structure shown above Copy the content from the templates in src/templates/component-tab-templates/ Fill in the content for each of the four tabs Customize each section to reflect your component&amp;#039;s specific details Template Locations The templates are available at: Design: /templates/component-tab-templates/design/ Code: /templates/component-tab-templates/code/ Accessibility: /templates/component-tab-templates/accessibility/ Examples: /templates/component-tab-templates/examples/ Front Matter Guidelines Each component page requires front matter at the top of the markdown file. Here&amp;#039;s an example: --- layout: layouts/component.njk title: Component Name description: Short description of component purpose and use cases category: layout version: 1.0.0 --- For specific tabs, add these properties: Code tab: Add codeContent: true Accessibility tab: Add a11yContent: true Examples tab: Add examplesContent: true Sample Component Reference For a complete example, see the Accordion component: Design tab Code tab Accessibility tab Examples tab Migration Tips When migrating documentation from legacy systems: Identify content types - Sort your original content into our four tab categories Copy corresponding sections - Move content into the appropriate template sections Standardize formatting - Adjust content to match the template structure Check for missing information - Add any missing sections required by our templates Remove duplicate information - Avoid repeating information across tabs Best Practices Each tab should focus on its specific purpose and avoid content overlap Use the provided CSS classes and formatting to maintain visual consistency Include visual examples in the Design tab Provide real code examples in the Code tab Include interactive examples in the Examples tab Document all accessibility considerations in the Accessibility tab By following this guide, you&amp;#039;ll create consistent, comprehensive documentation that helps both designers and developers understand and implement components correctly.",
        "description": "Standardized guidelines for documenting Enterprise Design System components",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "",
        "url": "/templates/component-tab-templates/README/",
        "content": "Component Documentation Templates These templates help you create standardized documentation for Enterprise Design System components. Each component should be documented using four tabs: Design, Code, Accessibility, and Examples. Quick Start Create a new directory for your component: src/components/[category]/[component-name]/ Copy these templates and rename them for your component: design.md → index.md (main component page) code.md → code.md accessibility.md → accessibility.md examples.md → examples.md Fill in the content for each template, replacing placeholder text with your component&amp;#039;s details Template Structure Each template follows a standard structure: Design Template Anatomy and key elements Usage considerations Behavior specifications Best practices Visual specifications Code Template Installation instructions Attributes and properties Events Helper classes Implementation examples Accessibility Template ARIA roles and attributes Keyboard navigation Screen reader support WAI-ARIA compliance Examples Template Basic implementation Variants and states Complex integration examples Responsive behavior Front Matter Don&amp;#039;t forget to update the front matter in each template with your component&amp;#039;s details: --- layout: layouts/component.njk title: Your Component Name description: Short description of your component&amp;#039;s purpose category: layout # or navigation, feedback, inputs version: 1.0.0 --- Complete Guide For more detailed instructions, refer to the Component Documentation Guide.",
        "description": "",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/accessibility/",
        "content": "Accessibility Accordions should be accessible to all users, including those using assistive technologies such as screen readers. Follow these guidelines to ensure your accordions meet accessibility standards. ARIA Roles and Attributes Use aria-expanded on the header button to indicate the expanded/collapsed state Include aria-controls on the header button that points to the ID of the content panel Apply role=&amp;amp;quot;region&amp;amp;quot; to the content panel with aria-labelledby pointing to the header ID Ensure all interactive elements have appropriate ARIA roles and states Use aria-disabled=&amp;amp;quot;true&amp;amp;quot; when an accordion is disabled but still visible Keyboard Navigation Key Function Tab Moves focus to the accordion header Enter or Space Toggles the accordion panel between expanded and collapsed states Arrow Down When focus is on an accordion header, moves focus to the next accordion header Arrow Up When focus is on an accordion header, moves focus to the previous accordion header Home When focus is on an accordion header, moves focus to the first accordion header End When focus is on an accordion header, moves focus to the last accordion header Implementation Here&amp;#039;s how to correctly implement an accessible accordion: &amp;amp;lt;div class=&amp;amp;quot;eds-accordion&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt; &amp;amp;lt;button id=&amp;amp;quot;accordion-header-1&amp;amp;quot; class=&amp;amp;quot;eds-accordion__header&amp;amp;quot; aria-expanded=&amp;amp;quot;false&amp;amp;quot; aria-controls=&amp;amp;quot;accordion-panel-1&amp;amp;quot;&amp;amp;gt; Accordion Heading &amp;amp;lt;span class=&amp;amp;quot;eds-accordion__icon&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt;&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;accordion-panel-1&amp;amp;quot; class=&amp;amp;quot;eds-accordion__content&amp;amp;quot; role=&amp;amp;quot;region&amp;amp;quot; aria-labelledby=&amp;amp;quot;accordion-header-1&amp;amp;quot; hidden&amp;amp;gt; Accordion content goes here. &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Don&amp;#039;t use role=&amp;amp;quot;button&amp;amp;quot; on elements that aren&amp;#039;t naturally focused in the tab order. Instead, use a semantic button element to ensure proper keyboard interaction. Testing Criteria Ensure your accordion passes these accessibility checks: Accordion headers must be focusable and operable with a keyboard State changes must be programmatically announced to screen readers Focus must remain on the header after expanding/collapsing Content must be properly associated with its header Color contrast must meet WCAG AA standards (4.5:1 for normal text) Icons must have sufficient contrast and not rely solely on color Animations must respect user preferences via the prefers-reduced-motion media query WAI-ARIA Compliance The accordion component follows the WAI-ARIA Accordion Pattern. This ensures consistency with established accessibility standards and patterns. Required ARIA Attributes Attribute Applied to Purpose aria-expanded Accordion header button Indicates whether the accordion panel is expanded or collapsed aria-controls Accordion header button References the ID of the controlled panel aria-labelledby Accordion panel References the ID of the header for labeling role=&amp;amp;quot;region&amp;amp;quot; Accordion panel Identifies the element as a region when expanded When using role=&amp;amp;quot;region&amp;amp;quot;, it&amp;#039;s important to ensure the region has an accessible name using aria-labelledby to avoid ARIA validation errors. Responsive Considerations For users on mobile or touch devices: Ensure touch targets (accordion headers) are at least 44×44 pixels Provide sufficient spacing between adjacent accordion headers to prevent accidental taps Consider starting with all accordions collapsed on mobile to minimize initial scrolling Ensure text remains readable at smaller viewport sizes Adapt padding and margins for comfortable viewing on small screens Screen Reader Announcements When implemented correctly, screen readers should announce the following when interacting with an accordion: Action Announcement Focus on collapsed header &amp;amp;quot;Accordion Heading, collapsed, button&amp;amp;quot; Expand accordion &amp;amp;quot;Accordion Heading, expanded, button&amp;amp;quot; Collapse accordion &amp;amp;quot;Accordion Heading, collapsed, button&amp;amp;quot; Focus on disabled header &amp;amp;quot;Accordion Heading, button, disabled&amp;amp;quot; Test your accordions with real screen readers like NVDA, JAWS, and VoiceOver to ensure they work as expected.",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/code/",
        "content": "Installation Make sure the necessary specific libraries are installed (no information or elements of these sites if you are integrating them into other components). HTML &amp;amp;amp; CSS npm install @enterprise-design-system/accordion React npm install @enterprise-design-system/react-accordion Attributes When using properties in JavaScript, use camelCase versions of the attribute names listed below. Attribute Type Default Description expanded boolean false Expands the accordion panel when set to true. disabled boolean false Disables the accordion when set to true. icon-position string right Position of the indicator icon. Options: &amp;#039;left&amp;#039;, &amp;#039;right&amp;#039;, &amp;#039;none&amp;#039;. aria-labelledby string undefined ID reference to the element that labels the accordion. aria-controls string undefined ID reference to the controlled content section. Events Name Event content expand Fires when the accordion section is expanded collapse Fires when the accordion section is collapsed States Name Default variant Description Default false The normal, collapsed state of the accordion Expanded false When the accordion panel is open and content is visible Focused false When the accordion header has keyboard focus Disabled false When the accordion is not interactive CSS Helper classes CSS class Applies to Outcome eds-accordion Container Main container class eds-accordion__header Header element Styles for the clickable header eds-accordion__content Content container Styles for the expandable content eds-accordion__icon Icon element Styles for the indicator icon eds-accordion--expanded Container Applied when accordion is expanded eds-accordion--disabled Container Applied when accordion is disabled CSS modifier classes CSS class Applies to Outcome eds-accordion--bordered Container Adds a border around the accordion eds-accordion--compact Container Reduces padding for a more compact appearance eds-accordion--icon-left Container Positions the icon on the left side eds-accordion--no-icon Container Removes the indicator icon eds-accordion--with-bg Container Adds a background color to the header Namespaceing If your architecture currently conflicts with Enterprise UI or any other external libraries, it may be that there are conflicting styles (i.e. you are targeting specific selectors in your own code). All components in Enterprise Design System are prefixed with &amp;#039;eds-&amp;#039; to help reduce the possibility of selector conflicts. Import reference The following two references are used to load libraries and should be referenced from Enterprise Design libraries. These references can be used at any component level. import { Accordion } from &amp;#039;@enterprise-design-system/react-components&amp;#039;; &amp;amp;lt;link rel=&amp;amp;quot;stylesheet&amp;amp;quot; href=&amp;amp;quot;https://cdn.enterprise-design.com/libs/accordion.css&amp;amp;quot;&amp;amp;gt; Javascript The following JS code samples can be used to interact with Enterprise Design accordion component: // Initialize an accordion const accordion = new EnterpriseAccordion(document.querySelector(&amp;#039;.eds-accordion&amp;#039;)); // Expand an accordion accordion.expand(); // Collapse an accordion accordion.collapse(); // Toggle an accordion accordion.toggle(); // Listen for events accordion.addEventListener(&amp;#039;expand&amp;#039;, (event) =&amp;amp;gt; { console.log(&amp;#039;Accordion expanded&amp;#039;); }); accordion.addEventListener(&amp;#039;collapse&amp;#039;, (event) =&amp;amp;gt; { console.log(&amp;#039;Accordion collapsed&amp;#039;); }); // Disable an accordion accordion.disabled = true; // Enable an accordion accordion.disabled = false; SCSS The following SCSS variables are used by Enterprise Design&amp;#039;s accordion when creating/implementing component: // Accordion variables $eds-accordion-header-bg: var(--color-bg-alt); $eds-accordion-header-color: var(--color-text); $eds-accordion-header-font-weight: 500; $eds-accordion-header-padding: 1rem; $eds-accordion-content-padding: 1rem; $eds-accordion-border-color: var(--color-border); $eds-accordion-border-radius: 0.25rem; $eds-accordion-icon-size: 1.25rem; $eds-accordion-icon-color: var(--color-text-muted); $eds-accordion-icon-transition: transform 0.2s ease-in-out; $eds-accordion-focus-ring-color: var(--color-primary); $eds-accordion-focus-ring-width: 2px; $eds-accordion-transition-duration: 0.2s; // In your custom implementation @import &amp;#039;@enterprise-design-system/scss/components/accordion&amp;#039;; // Override variables if needed $eds-accordion-header-bg: #f5f5f5; // Use the accordion mixins .custom-accordion { @include eds-accordion(); // Customizations .eds-accordion__header { border-bottom: 2px solid $eds-accordion-border-color; } } Storybook Example The following is an interactive Storybook example of the ShadowBox CTA component that shows usage options and properties: Embed URL: https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&amp;amp;amp;viewMode=docs&amp;amp;amp;shortcuts=false&amp;amp;amp;singleStory=true Iframe embed code: &amp;amp;lt;iframe src=&amp;amp;quot;https://5ccbc373887ca40020446347-wtuhidckxo.chromatic.com/iframe.html?id=shadowboxcta--docs&amp;amp;amp;viewMode=docs&amp;amp;amp;shortcuts=false&amp;amp;amp;singleStory=true&amp;amp;quot; width=&amp;amp;quot;800&amp;amp;quot; height=&amp;amp;quot;400&amp;amp;quot; &amp;amp;gt;&amp;amp;lt;/iframe&amp;amp;gt;",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Accordion",
        "url": "/components/layout/accordion/examples/",
        "content": "Examples Basic Accordion A standard accordion with default styling. Section 1: Introduction This is the content for section 1. It can include any type of content including text, images, and other components. Section 2: Features Section 3: Specifications &amp;amp;lt;div class=&amp;amp;quot;eds-accordion&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;div&amp;amp;gt; &amp;amp;lt;button class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Section 1: Introduction&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;p-4 border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;This is the content for section 1.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;button class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Section 2: Features&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;div class=&amp;amp;quot;border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;button class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Section 3: Specifications&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Icon Left Accordion An accordion with the expand/collapse icon positioned on the left. Payment Methods Configure your payment methods and preferences. Shipping Address Order History FAQ Accordion A common implementation pattern for FAQs with multiple sections that can be open simultaneously. How do I reset my password? To reset your password, click on the &amp;amp;quot;Forgot Password&amp;amp;quot; link on the login page. You&amp;#039;ll receive an email with instructions to create a new password. How do I update my account information? Can I change my subscription plan? Fully Accessible Accordion An example with all required accessibility attributes for screen reader support. Getting Started This panel includes all the necessary ARIA attributes for accessible accordions. Notice how the expanded state is clearly indicated both visually and programmatically. Advanced Configuration This content is hidden by default. &amp;amp;lt;div class=&amp;amp;quot;eds-accordion&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt; &amp;amp;lt;button id=&amp;amp;quot;acc-panel1-header&amp;amp;quot; class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium&amp;amp;quot; aria-expanded=&amp;amp;quot;true&amp;amp;quot; aria-controls=&amp;amp;quot;acc-panel1-content&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Getting Started&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5 transform rotate-180&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;acc-panel1-content&amp;amp;quot; role=&amp;amp;quot;region&amp;amp;quot; aria-labelledby=&amp;amp;quot;acc-panel1-header&amp;amp;quot; class=&amp;amp;quot;p-4 border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;Panel content with accessibility features.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;h3&amp;amp;gt; &amp;amp;lt;button id=&amp;amp;quot;acc-panel2-header&amp;amp;quot; class=&amp;amp;quot;w-full p-4 flex items-center justify-between text-left font-medium border-t&amp;amp;quot; aria-expanded=&amp;amp;quot;false&amp;amp;quot; aria-controls=&amp;amp;quot;acc-panel2-content&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;span&amp;amp;gt;Advanced Configuration&amp;amp;lt;/span&amp;amp;gt; &amp;amp;lt;svg xmlns=&amp;amp;quot;http://www.w3.org/2000/svg&amp;amp;quot; class=&amp;amp;quot;h-5 w-5&amp;amp;quot; fill=&amp;amp;quot;none&amp;amp;quot; viewBox=&amp;amp;quot;0 0 24 24&amp;amp;quot; stroke=&amp;amp;quot;currentColor&amp;amp;quot; aria-hidden=&amp;amp;quot;true&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;path stroke-linecap=&amp;amp;quot;round&amp;amp;quot; stroke-linejoin=&amp;amp;quot;round&amp;amp;quot; stroke-width=&amp;amp;quot;2&amp;amp;quot; d=&amp;amp;quot;M19 9l-7 7-7-7&amp;amp;quot; /&amp;amp;gt; &amp;amp;lt;/svg&amp;amp;gt; &amp;amp;lt;/button&amp;amp;gt; &amp;amp;lt;/h3&amp;amp;gt; &amp;amp;lt;div id=&amp;amp;quot;acc-panel2-content&amp;amp;quot; role=&amp;amp;quot;region&amp;amp;quot; aria-labelledby=&amp;amp;quot;acc-panel2-header&amp;amp;quot; class=&amp;amp;quot;hidden p-4 border-t&amp;amp;quot;&amp;amp;gt; &amp;amp;lt;p&amp;amp;gt;This content is hidden by default.&amp;amp;lt;/p&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; &amp;amp;lt;/div&amp;amp;gt; Custom Styled Accordion An example with custom styling applied to demonstrate flexibility. Performance Optimization This accordion uses custom colors and icons to match a specific visual style. You can adapt the styling to fit your application&amp;#039;s design system. Security Best Practices document.addEventListener(&amp;#039;DOMContentLoaded&amp;#039;, () =&amp;gt; { // Simple accordion functionality for the examples const accordionButtons = document.querySelectorAll(&amp;#039;.eds-accordion button&amp;#039;); accordionButtons.forEach(button =&amp;gt; { button.addEventListener(&amp;#039;click&amp;#039;, () =&amp;gt; { const isExpanded = button.getAttribute(&amp;#039;aria-expanded&amp;#039;) === &amp;#039;true&amp;#039;; const controlsId = button.getAttribute(&amp;#039;aria-controls&amp;#039;); const content = controlsId ? document.getElementById(controlsId) : button.nextElementSibling; const icon = button.querySelector(&amp;#039;svg&amp;#039;); if (isExpanded) { button.setAttribute(&amp;#039;aria-expanded&amp;#039;, &amp;#039;false&amp;#039;); if (content) content.classList.add(&amp;#039;hidden&amp;#039;); if (icon) icon.classList.remove(&amp;#039;rotate-180&amp;#039;); } else { button.setAttribute(&amp;#039;aria-expanded&amp;#039;, &amp;#039;true&amp;#039;); if (content) content.classList.remove(&amp;#039;hidden&amp;#039;); if (icon) icon.classList.add(&amp;#039;rotate-180&amp;#039;); } }); }); });",
        "description": "Accordions are lightweight containers that can be used independently or integrated into a larger surface, interacting with the expansion controls and other content on the same page section or container to show or hide information.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Feedback",
        "url": "/components/feedback/",
        "content": "Feedback Feedback components communicate system status and provide information to users. They help create a responsive and informative user experience by notifying users about events, errors, and processes. Available Components Alert Alerts display important information, warnings, or error messages Information message goes here Toast Toast notifications provide non-disruptive feedback about completed actions Successfully saved! Your changes have been saved successfully. Progress Progress indicators show the completion status of a task or process 65% complete Skeleton Skeleton loaders provide a visual placeholder while content is loading Modal Modals focus user attention on important content or actions Modal Title Modal content goes here. Cancel Confirm Tooltip Tooltips provide additional context when users hover over or focus on elements Hover me This is a tooltip Usage Guidelines When working with feedback components, consider the following best practices: Use appropriate colors and icons to convey the nature of the feedback Place feedback components in consistent locations throughout your application Ensure feedback is timely and relevant to user actions Provide clear, concise messages that explain what happened and what action to take Make feedback accessible to all users, including those using screen readers Use progressive loading indicators for operations that take longer than a second Allow users to dismiss non-critical feedback when appropriate For component-specific guidelines, refer to the individual component documentation pages.",
        "description": "Feedback components communicate system status and provide information to users",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Breadcrumbs",
        "url": "/components/all/breadcrumbs/",
        "content": "Breadcrumbs Brief description of the breadcrumbs component. Overview Overview of the breadcrumbs component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Breadcrumbs component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Chip",
        "url": "/components/all/chip/",
        "content": "Chip Brief description of the chip component. Overview Overview of the chip component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Chip component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Block",
        "url": "/components/all/content-block/",
        "content": "Content Block Brief description of the content block component. Overview Overview of the content block component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Content Block component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Description List",
        "url": "/components/all/description-list/",
        "content": "Description List Brief description of the description list component. Overview Overview of the description list component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Description List component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Expand Collapse",
        "url": "/components/all/expand-collapse/",
        "content": "Expand Collapse Brief description of the expand collapse component. Overview Overview of the expand collapse component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Expand Collapse component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Group",
        "url": "/components/all/field-group/",
        "content": "Field Group Brief description of the field group component. Overview Overview of the field group component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Field Group component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Key",
        "url": "/components/all/field-key/",
        "content": "Field Key Brief description of the field key component. Overview Overview of the field key component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Field Key component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "File Upload",
        "url": "/components/all/file-upload/",
        "content": "File Upload Brief description of the file upload component. Overview Overview of the file upload component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "File Upload component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Footnotes And Disclosures",
        "url": "/components/all/footnotes-and-disclosures/",
        "content": "Footnotes And Disclosures Brief description of the footnotes and disclosures component. Overview Overview of the footnotes and disclosures component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Footnotes And Disclosures component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Form Actions",
        "url": "/components/all/form-actions/",
        "content": "Form Actions Brief description of the form actions component. Overview Overview of the form actions component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Form Actions component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Grid",
        "url": "/components/all/grid/",
        "content": "Grid Brief description of the grid component. Overview Overview of the grid component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Grid component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Icon",
        "url": "/components/all/icon/",
        "content": "Icon Brief description of the icon component. Overview Overview of the icon component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Icon component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Image",
        "url": "/components/all/image/",
        "content": "Image Brief description of the image component. Overview Overview of the image component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Image component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "",
        "url": "/components/all/inline-alert/",
        "content": "",
        "description": "",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Input",
        "url": "/components/all/input/",
        "content": "Input Brief description of the input component. Overview Overview of the input component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Input component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Label",
        "url": "/components/all/label/",
        "content": "Label Brief description of the label component. Overview Overview of the label component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Label component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Link",
        "url": "/components/all/link/",
        "content": "Link Brief description of the link component. Overview Overview of the link component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Link component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "List Group",
        "url": "/components/all/list-group/",
        "content": "List Group Brief description of the list group component. Overview Overview of the list group component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "List Group component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Menu",
        "url": "/components/all/menu/",
        "content": "Menu Brief description of the menu component. Overview Overview of the menu component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Menu component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Microcopy",
        "url": "/components/all/microcopy/",
        "content": "Microcopy Brief description of the microcopy component. Overview Overview of the microcopy component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Microcopy component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Modal",
        "url": "/components/all/modal/",
        "content": "Modal Brief description of the modal component. Overview Overview of the modal component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Modal component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Footer",
        "url": "/components/all/page-footer/",
        "content": "Page Footer Brief description of the page footer component. Overview Overview of the page footer component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Page Footer component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Header",
        "url": "/components/all/page-header/",
        "content": "Page Header Brief description of the page header component. Overview Overview of the page header component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Page Header component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Popover",
        "url": "/components/all/popover/",
        "content": "Popover Brief description of the popover component. Overview Overview of the popover component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Popover component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Progress Indicator",
        "url": "/components/all/progress-indicator/",
        "content": "Progress Indicator Brief description of the progress indicator component. Overview Overview of the progress indicator component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Progress Indicator component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Group",
        "url": "/components/all/radio-group/",
        "content": "Radio Group Brief description of the radio group component. Overview Overview of the radio group component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Radio Group component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio",
        "url": "/components/all/radio/",
        "content": "Radio Brief description of the radio component. Overview Overview of the radio component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Radio component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segment",
        "url": "/components/all/segment/",
        "content": "Segment Brief description of the segment component. Overview Overview of the segment component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Segment component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segmented Control",
        "url": "/components/all/segmented-control/",
        "content": "Segmented Control Brief description of the segmented control component. Overview Overview of the segmented control component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Segmented Control component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Select",
        "url": "/components/all/select/",
        "content": "Select Brief description of the select component. Overview Overview of the select component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Select component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Slider",
        "url": "/components/all/slider/",
        "content": "Slider Brief description of the slider component. Overview Overview of the slider component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Slider component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Spinner",
        "url": "/components/all/spinner/",
        "content": "Spinner Brief description of the spinner component. Overview Overview of the spinner component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Spinner component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Status",
        "url": "/components/all/status/",
        "content": "Status Brief description of the status component. Overview Overview of the status component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Status component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Stepper",
        "url": "/components/all/stepper/",
        "content": "Stepper Brief description of the stepper component. Overview Overview of the stepper component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Stepper component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Switch",
        "url": "/components/all/switch/",
        "content": "Switch Brief description of the switch component. Overview Overview of the switch component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Switch component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tab Group",
        "url": "/components/all/tab-group/",
        "content": "Tab Group Brief description of the tab group component. Overview Overview of the tab group component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Tab Group component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Table",
        "url": "/components/all/table/",
        "content": "Table Brief description of the table component. Overview Overview of the table component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Table component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tag",
        "url": "/components/all/tag/",
        "content": "Tag Brief description of the tag component. Overview Overview of the tag component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Tag component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Text Input",
        "url": "/components/all/text-input/",
        "content": "Text Input Brief description of the text input component. Overview Overview of the text input component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Text Input component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Textarea",
        "url": "/components/all/textarea/",
        "content": "Textarea Brief description of the textarea component. Overview Overview of the textarea component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Textarea component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tile",
        "url": "/components/all/tile/",
        "content": "Tile Brief description of the tile component. Overview Overview of the tile component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Tile component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Title",
        "url": "/components/all/title/",
        "content": "Title Brief description of the title component. Overview Overview of the title component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Title component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tooltip",
        "url": "/components/all/tooltip/",
        "content": "Tooltip Brief description of the tooltip component. Overview Overview of the tooltip component, its purpose, and typical use cases. Types Type 1: Description of type 1 Type 2: Description of type 2 Type 3: Description of type 3 When to Use Use case 1 Use case 2 Use case 3 Best Practices Best practice 1 Best practice 2 Best practice 3 Best practice 4 Related Components Component 1 Component 2 Tabs Design Code Accessibility Examples",
        "description": "Tooltip component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Breadcrumbs Accessibility",
        "url": "/components/all/breadcrumbs/accessibility/",
        "content": "Breadcrumbs Accessibility Guidelines Overview Ensuring the breadcrumbs component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;breadcrumbs-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;breadcrumbs-title&amp;quot;&amp;gt;Accessible Breadcrumbs&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Breadcrumbs component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Breadcrumbs Code",
        "url": "/components/all/breadcrumbs/code/",
        "content": "Breadcrumbs Implementation HTML Structure &amp;amp;lt;!-- Basic Breadcrumbs --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-breadcrumbs { display: block; position: relative; } .eds-breadcrumbs__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeBreadcrumbs() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./breadcrumbs.css&amp;#039;; const Breadcrumbs = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-breadcrumbs ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Breadcrumbs; Usage Examples Basic Usage &amp;amp;lt;Breadcrumbs&amp;gt; Content goes here &amp;amp;lt;/Breadcrumbs&amp;gt; With Options &amp;amp;lt;Breadcrumbs className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-breadcrumbs&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Breadcrumbs&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Breadcrumbs component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Breadcrumbs Design",
        "url": "/components/all/breadcrumbs/design/",
        "content": "Breadcrumbs Design Guidelines Anatomy The breadcrumbs component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Breadcrumbs component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Breadcrumbs Examples",
        "url": "/components/all/breadcrumbs/examples/",
        "content": "Breadcrumbs Examples Basic Example Basic usage of the breadcrumbs component. &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; Basic breadcrumbs content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic breadcrumbs content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs eds-breadcrumbs--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs eds-breadcrumbs--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs&amp;quot; id=&amp;quot;interactive-breadcrumbs&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;breadcrumbs-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;breadcrumbs-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Breadcrumbs interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the breadcrumbs responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs eds-breadcrumbs--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-breadcrumbs__content&amp;quot;&amp;gt; This breadcrumbs adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This breadcrumbs adapts to different screen sizes",
        "description": "Examples of different breadcrumbs variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Chip Accessibility",
        "url": "/components/all/chip/accessibility/",
        "content": "Chip Accessibility Guidelines Overview Ensuring the chip component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-chip&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;chip-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;chip-title&amp;quot;&amp;gt;Accessible Chip&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Chip component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Chip Code",
        "url": "/components/all/chip/code/",
        "content": "Chip Implementation HTML Structure &amp;amp;lt;!-- Basic Chip --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-chip { display: block; position: relative; } .eds-chip__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeChip() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./chip.css&amp;#039;; const Chip = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-chip ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-chip__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Chip; Usage Examples Basic Usage &amp;amp;lt;Chip&amp;gt; Content goes here &amp;amp;lt;/Chip&amp;gt; With Options &amp;amp;lt;Chip className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-chip&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Chip&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Chip component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Chip Design",
        "url": "/components/all/chip/design/",
        "content": "Chip Design Guidelines Anatomy The chip component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Chip component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Chip Examples",
        "url": "/components/all/chip/examples/",
        "content": "Chip Examples Basic Example Basic usage of the chip component. &amp;amp;lt;div class=&amp;quot;eds-chip&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; Basic chip content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic chip content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-chip eds-chip--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-chip eds-chip--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-chip&amp;quot; id=&amp;quot;interactive-chip&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;chip-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;chip-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Chip interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the chip responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-chip eds-chip--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-chip__content&amp;quot;&amp;gt; This chip adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This chip adapts to different screen sizes",
        "description": "Examples of different chip variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Block Accessibility",
        "url": "/components/all/content-block/accessibility/",
        "content": "Content Block Accessibility Guidelines Overview Ensuring the content block component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-content-block&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;content-block-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;content-block-title&amp;quot;&amp;gt;Accessible Content Block&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Content Block component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Block Code",
        "url": "/components/all/content-block/code/",
        "content": "Content Block Implementation HTML Structure &amp;amp;lt;!-- Basic Content Block --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-content-block { display: block; position: relative; } .eds-content-block__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeContentBlock() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./content-block.css&amp;#039;; const ContentBlock = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-content-block ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default ContentBlock; Usage Examples Basic Usage &amp;amp;lt;ContentBlock&amp;gt; Content goes here &amp;amp;lt;/ContentBlock&amp;gt; With Options &amp;amp;lt;ContentBlock className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-content-block&amp;quot; &amp;gt; Content with options &amp;amp;lt;/ContentBlock&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Content Block component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Block Design",
        "url": "/components/all/content-block/design/",
        "content": "Content Block Design Guidelines Anatomy The content block component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Content Block component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Block Examples",
        "url": "/components/all/content-block/examples/",
        "content": "Content Block Examples Basic Example Basic usage of the content block component. &amp;amp;lt;div class=&amp;quot;eds-content-block&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; Basic content block content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic content block content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-content-block eds-content-block--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-content-block eds-content-block--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-content-block&amp;quot; id=&amp;quot;interactive-content-block&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;content-block-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;content-block-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Content Block interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the content block responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-content-block eds-content-block--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-content-block__content&amp;quot;&amp;gt; This content block adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This content block adapts to different screen sizes",
        "description": "Examples of different content block variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Description List Accessibility",
        "url": "/components/all/description-list/accessibility/",
        "content": "Description List Accessibility Guidelines Overview Ensuring the description list component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-description-list&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;description-list-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;description-list-title&amp;quot;&amp;gt;Accessible Description List&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Description List component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Description List Code",
        "url": "/components/all/description-list/code/",
        "content": "Description List Implementation HTML Structure &amp;amp;lt;!-- Basic Description List --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-description-list { display: block; position: relative; } .eds-description-list__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeDescriptionList() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./description-list.css&amp;#039;; const DescriptionList = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-description-list ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default DescriptionList; Usage Examples Basic Usage &amp;amp;lt;DescriptionList&amp;gt; Content goes here &amp;amp;lt;/DescriptionList&amp;gt; With Options &amp;amp;lt;DescriptionList className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-description-list&amp;quot; &amp;gt; Content with options &amp;amp;lt;/DescriptionList&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Description List component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Description List Design",
        "url": "/components/all/description-list/design/",
        "content": "Description List Design Guidelines Anatomy The description list component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Description List component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Description List Examples",
        "url": "/components/all/description-list/examples/",
        "content": "Description List Examples Basic Example Basic usage of the description list component. &amp;amp;lt;div class=&amp;quot;eds-description-list&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; Basic description list content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic description list content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-description-list eds-description-list--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-description-list eds-description-list--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-description-list&amp;quot; id=&amp;quot;interactive-description-list&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;description-list-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;description-list-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Description List interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the description list responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-description-list eds-description-list--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-description-list__content&amp;quot;&amp;gt; This description list adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This description list adapts to different screen sizes",
        "description": "Examples of different description list variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Expand Collapse Code",
        "url": "/components/all/expand-collapse/code/",
        "content": "Expand Collapse Implementation HTML Structure &amp;amp;lt;!-- Basic Expand Collapse --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-expand-collapse { display: block; position: relative; } .eds-expand-collapse__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeExpandCollapse() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./expand-collapse.css&amp;#039;; const ExpandCollapse = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-expand-collapse ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default ExpandCollapse; Usage Examples Basic Usage &amp;amp;lt;ExpandCollapse&amp;gt; Content goes here &amp;amp;lt;/ExpandCollapse&amp;gt; With Options &amp;amp;lt;ExpandCollapse className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-expand-collapse&amp;quot; &amp;gt; Content with options &amp;amp;lt;/ExpandCollapse&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Expand Collapse component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Expand Collapse Design",
        "url": "/components/all/expand-collapse/design/",
        "content": "Expand Collapse Design Guidelines Anatomy The expand collapse component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Expand Collapse component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Expand Collapse Accessibility",
        "url": "/components/all/expand-collapse/accessibility/",
        "content": "Expand Collapse Accessibility Guidelines Overview Ensuring the expand collapse component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-expand-collapse&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;expand-collapse-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;expand-collapse-title&amp;quot;&amp;gt;Accessible Expand Collapse&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Expand Collapse component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Expand Collapse Examples",
        "url": "/components/all/expand-collapse/examples/",
        "content": "Expand Collapse Examples Basic Example Basic usage of the expand collapse component. &amp;amp;lt;div class=&amp;quot;eds-expand-collapse&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; Basic expand collapse content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic expand collapse content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-expand-collapse eds-expand-collapse--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-expand-collapse eds-expand-collapse--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-expand-collapse&amp;quot; id=&amp;quot;interactive-expand-collapse&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;expand-collapse-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;expand-collapse-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Expand Collapse interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the expand collapse responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-expand-collapse eds-expand-collapse--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-expand-collapse__content&amp;quot;&amp;gt; This expand collapse adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This expand collapse adapts to different screen sizes",
        "description": "Examples of different expand collapse variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Group Code",
        "url": "/components/all/field-group/code/",
        "content": "Field Group Implementation HTML Structure &amp;amp;lt;!-- Basic Field Group --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-field-group { display: block; position: relative; } .eds-field-group__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeFieldGroup() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./field-group.css&amp;#039;; const FieldGroup = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-field-group ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default FieldGroup; Usage Examples Basic Usage &amp;amp;lt;FieldGroup&amp;gt; Content goes here &amp;amp;lt;/FieldGroup&amp;gt; With Options &amp;amp;lt;FieldGroup className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-field-group&amp;quot; &amp;gt; Content with options &amp;amp;lt;/FieldGroup&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Field Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Group Design",
        "url": "/components/all/field-group/design/",
        "content": "Field Group Design Guidelines Anatomy The field group component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Field Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Group Accessibility",
        "url": "/components/all/field-group/accessibility/",
        "content": "Field Group Accessibility Guidelines Overview Ensuring the field group component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-field-group&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;field-group-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;field-group-title&amp;quot;&amp;gt;Accessible Field Group&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Field Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Group Examples",
        "url": "/components/all/field-group/examples/",
        "content": "Field Group Examples Basic Example Basic usage of the field group component. &amp;amp;lt;div class=&amp;quot;eds-field-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; Basic field group content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic field group content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-field-group eds-field-group--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-field-group eds-field-group--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-field-group&amp;quot; id=&amp;quot;interactive-field-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;field-group-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;field-group-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Field Group interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the field group responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-field-group eds-field-group--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-group__content&amp;quot;&amp;gt; This field group adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This field group adapts to different screen sizes",
        "description": "Examples of different field group variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Key Accessibility",
        "url": "/components/all/field-key/accessibility/",
        "content": "Field Key Accessibility Guidelines Overview Ensuring the field key component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-field-key&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;field-key-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;field-key-title&amp;quot;&amp;gt;Accessible Field Key&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Field Key component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Key Code",
        "url": "/components/all/field-key/code/",
        "content": "Field Key Implementation HTML Structure &amp;amp;lt;!-- Basic Field Key --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-field-key { display: block; position: relative; } .eds-field-key__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeFieldKey() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./field-key.css&amp;#039;; const FieldKey = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-field-key ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default FieldKey; Usage Examples Basic Usage &amp;amp;lt;FieldKey&amp;gt; Content goes here &amp;amp;lt;/FieldKey&amp;gt; With Options &amp;amp;lt;FieldKey className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-field-key&amp;quot; &amp;gt; Content with options &amp;amp;lt;/FieldKey&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Field Key component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Key Design",
        "url": "/components/all/field-key/design/",
        "content": "Field Key Design Guidelines Anatomy The field key component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Field Key component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Field Key Examples",
        "url": "/components/all/field-key/examples/",
        "content": "Field Key Examples Basic Example Basic usage of the field key component. &amp;amp;lt;div class=&amp;quot;eds-field-key&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; Basic field key content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic field key content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-field-key eds-field-key--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-field-key eds-field-key--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-field-key&amp;quot; id=&amp;quot;interactive-field-key&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;field-key-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;field-key-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Field Key interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the field key responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-field-key eds-field-key--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-field-key__content&amp;quot;&amp;gt; This field key adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This field key adapts to different screen sizes",
        "description": "Examples of different field key variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "File Upload Accessibility",
        "url": "/components/all/file-upload/accessibility/",
        "content": "File Upload Accessibility Guidelines Overview Ensuring the file upload component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-file-upload&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;file-upload-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;file-upload-title&amp;quot;&amp;gt;Accessible File Upload&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the File Upload component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "File Upload Code",
        "url": "/components/all/file-upload/code/",
        "content": "File Upload Implementation HTML Structure &amp;amp;lt;!-- Basic File Upload --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-file-upload { display: block; position: relative; } .eds-file-upload__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeFileUpload() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./file-upload.css&amp;#039;; const FileUpload = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-file-upload ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default FileUpload; Usage Examples Basic Usage &amp;amp;lt;FileUpload&amp;gt; Content goes here &amp;amp;lt;/FileUpload&amp;gt; With Options &amp;amp;lt;FileUpload className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-file-upload&amp;quot; &amp;gt; Content with options &amp;amp;lt;/FileUpload&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the File Upload component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "File Upload Design",
        "url": "/components/all/file-upload/design/",
        "content": "File Upload Design Guidelines Anatomy The file upload component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the File Upload component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "File Upload Examples",
        "url": "/components/all/file-upload/examples/",
        "content": "File Upload Examples Basic Example Basic usage of the file upload component. &amp;amp;lt;div class=&amp;quot;eds-file-upload&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; Basic file upload content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic file upload content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-file-upload eds-file-upload--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-file-upload eds-file-upload--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-file-upload&amp;quot; id=&amp;quot;interactive-file-upload&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;file-upload-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;file-upload-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;File Upload interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the file upload responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-file-upload eds-file-upload--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-file-upload__content&amp;quot;&amp;gt; This file upload adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This file upload adapts to different screen sizes",
        "description": "Examples of different file upload variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Footnotes And Disclosures Accessibility",
        "url": "/components/all/footnotes-and-disclosures/accessibility/",
        "content": "Footnotes And Disclosures Accessibility Guidelines Overview Ensuring the footnotes and disclosures component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;footnotes-and-disclosures-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;footnotes-and-disclosures-title&amp;quot;&amp;gt;Accessible Footnotes And Disclosures&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Footnotes And Disclosures component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Footnotes And Disclosures Code",
        "url": "/components/all/footnotes-and-disclosures/code/",
        "content": "Footnotes And Disclosures Implementation HTML Structure &amp;amp;lt;!-- Basic Footnotes And Disclosures --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-footnotes-and-disclosures { display: block; position: relative; } .eds-footnotes-and-disclosures__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeFootnotesAndDisclosures() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./footnotes-and-disclosures.css&amp;#039;; const FootnotesAndDisclosures = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-footnotes-and-disclosures ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default FootnotesAndDisclosures; Usage Examples Basic Usage &amp;amp;lt;FootnotesAndDisclosures&amp;gt; Content goes here &amp;amp;lt;/FootnotesAndDisclosures&amp;gt; With Options &amp;amp;lt;FootnotesAndDisclosures className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-footnotes-and-disclosures&amp;quot; &amp;gt; Content with options &amp;amp;lt;/FootnotesAndDisclosures&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Footnotes And Disclosures component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Footnotes And Disclosures Design",
        "url": "/components/all/footnotes-and-disclosures/design/",
        "content": "Footnotes And Disclosures Design Guidelines Anatomy The footnotes and disclosures component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Footnotes And Disclosures component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Footnotes And Disclosures Examples",
        "url": "/components/all/footnotes-and-disclosures/examples/",
        "content": "Footnotes And Disclosures Examples Basic Example Basic usage of the footnotes and disclosures component. &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; Basic footnotes and disclosures content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic footnotes and disclosures content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures eds-footnotes-and-disclosures--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures eds-footnotes-and-disclosures--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures&amp;quot; id=&amp;quot;interactive-footnotes-and-disclosures&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;footnotes-and-disclosures-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;footnotes-and-disclosures-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Footnotes And Disclosures interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the footnotes and disclosures responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures eds-footnotes-and-disclosures--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-footnotes-and-disclosures__content&amp;quot;&amp;gt; This footnotes and disclosures adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This footnotes and disclosures adapts to different screen sizes",
        "description": "Examples of different footnotes and disclosures variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Form Actions Design",
        "url": "/components/all/form-actions/design/",
        "content": "Form Actions Design Guidelines Anatomy The form actions component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Form Actions component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Form Actions Accessibility",
        "url": "/components/all/form-actions/accessibility/",
        "content": "Form Actions Accessibility Guidelines Overview Ensuring the form actions component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-form-actions&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;form-actions-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;form-actions-title&amp;quot;&amp;gt;Accessible Form Actions&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Form Actions component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Form Actions Code",
        "url": "/components/all/form-actions/code/",
        "content": "Form Actions Implementation HTML Structure &amp;amp;lt;!-- Basic Form Actions --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-form-actions { display: block; position: relative; } .eds-form-actions__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeFormActions() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./form-actions.css&amp;#039;; const FormActions = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-form-actions ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default FormActions; Usage Examples Basic Usage &amp;amp;lt;FormActions&amp;gt; Content goes here &amp;amp;lt;/FormActions&amp;gt; With Options &amp;amp;lt;FormActions className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-form-actions&amp;quot; &amp;gt; Content with options &amp;amp;lt;/FormActions&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Form Actions component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Form Actions Examples",
        "url": "/components/all/form-actions/examples/",
        "content": "Form Actions Examples Basic Example Basic usage of the form actions component. &amp;amp;lt;div class=&amp;quot;eds-form-actions&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; Basic form actions content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic form actions content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-form-actions eds-form-actions--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-form-actions eds-form-actions--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-form-actions&amp;quot; id=&amp;quot;interactive-form-actions&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;form-actions-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;form-actions-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Form Actions interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the form actions responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-form-actions eds-form-actions--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-form-actions__content&amp;quot;&amp;gt; This form actions adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This form actions adapts to different screen sizes",
        "description": "Examples of different form actions variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Grid Accessibility",
        "url": "/components/all/grid/accessibility/",
        "content": "Grid Accessibility Guidelines Overview Ensuring the grid component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-grid&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;grid-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;grid-title&amp;quot;&amp;gt;Accessible Grid&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Grid component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Grid Code",
        "url": "/components/all/grid/code/",
        "content": "Grid Implementation HTML Structure &amp;amp;lt;!-- Basic Grid --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-grid { display: block; position: relative; } .eds-grid__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeGrid() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./grid.css&amp;#039;; const Grid = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-grid ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-grid__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Grid; Usage Examples Basic Usage &amp;amp;lt;Grid&amp;gt; Content goes here &amp;amp;lt;/Grid&amp;gt; With Options &amp;amp;lt;Grid className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-grid&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Grid&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Grid component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Grid Design",
        "url": "/components/all/grid/design/",
        "content": "Grid Design Guidelines Anatomy The grid component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Grid component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Grid Examples",
        "url": "/components/all/grid/examples/",
        "content": "Grid Examples Basic Example Basic usage of the grid component. &amp;amp;lt;div class=&amp;quot;eds-grid&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; Basic grid content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic grid content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-grid eds-grid--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-grid eds-grid--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-grid&amp;quot; id=&amp;quot;interactive-grid&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;grid-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;grid-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Grid interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the grid responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-grid eds-grid--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-grid__content&amp;quot;&amp;gt; This grid adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This grid adapts to different screen sizes",
        "description": "Examples of different grid variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Icon Accessibility",
        "url": "/components/all/icon/accessibility/",
        "content": "Icon Accessibility Guidelines Overview Ensuring the icon component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-icon&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;icon-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;icon-title&amp;quot;&amp;gt;Accessible Icon&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Icon component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Icon Code",
        "url": "/components/all/icon/code/",
        "content": "Icon Implementation HTML Structure &amp;amp;lt;!-- Basic Icon --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-icon { display: block; position: relative; } .eds-icon__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeIcon() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./icon.css&amp;#039;; const Icon = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-icon ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-icon__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Icon; Usage Examples Basic Usage &amp;amp;lt;Icon&amp;gt; Content goes here &amp;amp;lt;/Icon&amp;gt; With Options &amp;amp;lt;Icon className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-icon&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Icon&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Icon component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Icon Design",
        "url": "/components/all/icon/design/",
        "content": "Icon Design Guidelines Anatomy The icon component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Icon component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Icon Examples",
        "url": "/components/all/icon/examples/",
        "content": "Icon Examples Basic Example Basic usage of the icon component. &amp;amp;lt;div class=&amp;quot;eds-icon&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; Basic icon content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic icon content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-icon eds-icon--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-icon eds-icon--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-icon&amp;quot; id=&amp;quot;interactive-icon&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;icon-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;icon-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Icon interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the icon responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-icon eds-icon--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-icon__content&amp;quot;&amp;gt; This icon adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This icon adapts to different screen sizes",
        "description": "Examples of different icon variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Image Accessibility",
        "url": "/components/all/image/accessibility/",
        "content": "Image Accessibility Guidelines Overview Ensuring the image component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-image&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;image-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;image-title&amp;quot;&amp;gt;Accessible Image&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Image component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Image Code",
        "url": "/components/all/image/code/",
        "content": "Image Implementation HTML Structure &amp;amp;lt;!-- Basic Image --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-image { display: block; position: relative; } .eds-image__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeImage() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./image.css&amp;#039;; const Image = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-image ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-image__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Image; Usage Examples Basic Usage &amp;amp;lt;Image&amp;gt; Content goes here &amp;amp;lt;/Image&amp;gt; With Options &amp;amp;lt;Image className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-image&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Image&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Image component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Image Design",
        "url": "/components/all/image/design/",
        "content": "Image Design Guidelines Anatomy The image component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Image component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Image Examples",
        "url": "/components/all/image/examples/",
        "content": "Image Examples Basic Example Basic usage of the image component. &amp;amp;lt;div class=&amp;quot;eds-image&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; Basic image content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic image content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-image eds-image--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-image eds-image--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-image&amp;quot; id=&amp;quot;interactive-image&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;image-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;image-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Image interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the image responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-image eds-image--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-image__content&amp;quot;&amp;gt; This image adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This image adapts to different screen sizes",
        "description": "Examples of different image variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "",
        "url": "/components/all/inline-alert/accessibility/",
        "content": "",
        "description": "",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "",
        "url": "/components/all/inline-alert/code/",
        "content": "",
        "description": "",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "",
        "url": "/components/all/inline-alert/design/",
        "content": "",
        "description": "",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "",
        "url": "/components/all/inline-alert/examples/",
        "content": "",
        "description": "",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Input Accessibility",
        "url": "/components/all/input/accessibility/",
        "content": "Input Accessibility Guidelines Overview Ensuring the input component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-input&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;input-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;input-title&amp;quot;&amp;gt;Accessible Input&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Input component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Input Code",
        "url": "/components/all/input/code/",
        "content": "Input Implementation HTML Structure &amp;amp;lt;!-- Basic Input --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-input { display: block; position: relative; } .eds-input__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeInput() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./input.css&amp;#039;; const Input = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-input ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-input__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Input; Usage Examples Basic Usage &amp;amp;lt;Input&amp;gt; Content goes here &amp;amp;lt;/Input&amp;gt; With Options &amp;amp;lt;Input className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-input&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Input&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Input component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Input Design",
        "url": "/components/all/input/design/",
        "content": "Input Design Guidelines Anatomy The input component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Input component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Input Examples",
        "url": "/components/all/input/examples/",
        "content": "Input Examples Basic Example Basic usage of the input component. &amp;amp;lt;div class=&amp;quot;eds-input&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; Basic input content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic input content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-input eds-input--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-input eds-input--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-input&amp;quot; id=&amp;quot;interactive-input&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;input-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;input-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Input interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the input responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-input eds-input--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-input__content&amp;quot;&amp;gt; This input adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This input adapts to different screen sizes",
        "description": "Examples of different input variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Label Accessibility",
        "url": "/components/all/label/accessibility/",
        "content": "Label Accessibility Guidelines Overview Ensuring the label component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-label&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;label-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;label-title&amp;quot;&amp;gt;Accessible Label&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Label component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Label Code",
        "url": "/components/all/label/code/",
        "content": "Label Implementation HTML Structure &amp;amp;lt;!-- Basic Label --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-label { display: block; position: relative; } .eds-label__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeLabel() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./label.css&amp;#039;; const Label = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-label ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-label__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Label; Usage Examples Basic Usage &amp;amp;lt;Label&amp;gt; Content goes here &amp;amp;lt;/Label&amp;gt; With Options &amp;amp;lt;Label className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-label&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Label&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Label component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Label Design",
        "url": "/components/all/label/design/",
        "content": "Label Design Guidelines Anatomy The label component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Label component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Label Examples",
        "url": "/components/all/label/examples/",
        "content": "Label Examples Basic Example Basic usage of the label component. &amp;amp;lt;div class=&amp;quot;eds-label&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; Basic label content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic label content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-label eds-label--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-label eds-label--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-label&amp;quot; id=&amp;quot;interactive-label&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;label-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;label-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Label interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the label responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-label eds-label--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-label__content&amp;quot;&amp;gt; This label adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This label adapts to different screen sizes",
        "description": "Examples of different label variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Link Accessibility",
        "url": "/components/all/link/accessibility/",
        "content": "Link Accessibility Guidelines Overview Ensuring the link component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-link&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;link-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;link-title&amp;quot;&amp;gt;Accessible Link&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Link component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Link Code",
        "url": "/components/all/link/code/",
        "content": "Link Implementation HTML Structure &amp;amp;lt;!-- Basic Link --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-link { display: block; position: relative; } .eds-link__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeLink() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./link.css&amp;#039;; const Link = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-link ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-link__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Link; Usage Examples Basic Usage &amp;amp;lt;Link&amp;gt; Content goes here &amp;amp;lt;/Link&amp;gt; With Options &amp;amp;lt;Link className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-link&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Link&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Link component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Link Design",
        "url": "/components/all/link/design/",
        "content": "Link Design Guidelines Anatomy The link component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Link component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Link Examples",
        "url": "/components/all/link/examples/",
        "content": "Link Examples Basic Example Basic usage of the link component. &amp;amp;lt;div class=&amp;quot;eds-link&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; Basic link content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic link content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-link eds-link--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-link eds-link--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-link&amp;quot; id=&amp;quot;interactive-link&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;link-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;link-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Link interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the link responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-link eds-link--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-link__content&amp;quot;&amp;gt; This link adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This link adapts to different screen sizes",
        "description": "Examples of different link variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "List Group Design",
        "url": "/components/all/list-group/design/",
        "content": "List Group Design Guidelines Anatomy The list group component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the List Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "List Group Accessibility",
        "url": "/components/all/list-group/accessibility/",
        "content": "List Group Accessibility Guidelines Overview Ensuring the list group component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-list-group&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;list-group-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;list-group-title&amp;quot;&amp;gt;Accessible List Group&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the List Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "List Group Code",
        "url": "/components/all/list-group/code/",
        "content": "List Group Implementation HTML Structure &amp;amp;lt;!-- Basic List Group --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-list-group { display: block; position: relative; } .eds-list-group__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeListGroup() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./list-group.css&amp;#039;; const ListGroup = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-list-group ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default ListGroup; Usage Examples Basic Usage &amp;amp;lt;ListGroup&amp;gt; Content goes here &amp;amp;lt;/ListGroup&amp;gt; With Options &amp;amp;lt;ListGroup className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-list-group&amp;quot; &amp;gt; Content with options &amp;amp;lt;/ListGroup&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the List Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "List Group Examples",
        "url": "/components/all/list-group/examples/",
        "content": "List Group Examples Basic Example Basic usage of the list group component. &amp;amp;lt;div class=&amp;quot;eds-list-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; Basic list group content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic list group content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-list-group eds-list-group--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-list-group eds-list-group--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-list-group&amp;quot; id=&amp;quot;interactive-list-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;list-group-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;list-group-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;List Group interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the list group responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-list-group eds-list-group--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-list-group__content&amp;quot;&amp;gt; This list group adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This list group adapts to different screen sizes",
        "description": "Examples of different list group variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Menu Accessibility",
        "url": "/components/all/menu/accessibility/",
        "content": "Menu Accessibility Guidelines Overview Ensuring the menu component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-menu&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;menu-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;menu-title&amp;quot;&amp;gt;Accessible Menu&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Menu component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Menu Code",
        "url": "/components/all/menu/code/",
        "content": "Menu Implementation HTML Structure &amp;amp;lt;!-- Basic Menu --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-menu { display: block; position: relative; } .eds-menu__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeMenu() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./menu.css&amp;#039;; const Menu = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-menu ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-menu__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Menu; Usage Examples Basic Usage &amp;amp;lt;Menu&amp;gt; Content goes here &amp;amp;lt;/Menu&amp;gt; With Options &amp;amp;lt;Menu className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-menu&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Menu&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Menu component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Menu Design",
        "url": "/components/all/menu/design/",
        "content": "Menu Design Guidelines Anatomy The menu component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Menu component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Menu Examples",
        "url": "/components/all/menu/examples/",
        "content": "Menu Examples Basic Example Basic usage of the menu component. &amp;amp;lt;div class=&amp;quot;eds-menu&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; Basic menu content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic menu content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-menu eds-menu--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-menu eds-menu--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-menu&amp;quot; id=&amp;quot;interactive-menu&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;menu-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;menu-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Menu interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the menu responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-menu eds-menu--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-menu__content&amp;quot;&amp;gt; This menu adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This menu adapts to different screen sizes",
        "description": "Examples of different menu variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Microcopy Accessibility",
        "url": "/components/all/microcopy/accessibility/",
        "content": "Microcopy Accessibility Guidelines Overview Ensuring the microcopy component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-microcopy&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;microcopy-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;microcopy-title&amp;quot;&amp;gt;Accessible Microcopy&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Microcopy component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Microcopy Code",
        "url": "/components/all/microcopy/code/",
        "content": "Microcopy Implementation HTML Structure &amp;amp;lt;!-- Basic Microcopy --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-microcopy { display: block; position: relative; } .eds-microcopy__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeMicrocopy() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./microcopy.css&amp;#039;; const Microcopy = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-microcopy ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Microcopy; Usage Examples Basic Usage &amp;amp;lt;Microcopy&amp;gt; Content goes here &amp;amp;lt;/Microcopy&amp;gt; With Options &amp;amp;lt;Microcopy className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-microcopy&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Microcopy&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Microcopy component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Microcopy Design",
        "url": "/components/all/microcopy/design/",
        "content": "Microcopy Design Guidelines Anatomy The microcopy component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Microcopy component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Microcopy Examples",
        "url": "/components/all/microcopy/examples/",
        "content": "Microcopy Examples Basic Example Basic usage of the microcopy component. &amp;amp;lt;div class=&amp;quot;eds-microcopy&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; Basic microcopy content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic microcopy content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-microcopy eds-microcopy--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-microcopy eds-microcopy--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-microcopy&amp;quot; id=&amp;quot;interactive-microcopy&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;microcopy-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;microcopy-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Microcopy interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the microcopy responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-microcopy eds-microcopy--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-microcopy__content&amp;quot;&amp;gt; This microcopy adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This microcopy adapts to different screen sizes",
        "description": "Examples of different microcopy variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Modal Design",
        "url": "/components/all/modal/design/",
        "content": "Modal Design Guidelines Anatomy The modal component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Modal component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Modal Accessibility",
        "url": "/components/all/modal/accessibility/",
        "content": "Modal Accessibility Guidelines Overview Ensuring the modal component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-modal&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;modal-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;modal-title&amp;quot;&amp;gt;Accessible Modal&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Modal component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Modal Code",
        "url": "/components/all/modal/code/",
        "content": "Modal Implementation HTML Structure &amp;amp;lt;!-- Basic Modal --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-modal { display: block; position: relative; } .eds-modal__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeModal() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./modal.css&amp;#039;; const Modal = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-modal ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-modal__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Modal; Usage Examples Basic Usage &amp;amp;lt;Modal&amp;gt; Content goes here &amp;amp;lt;/Modal&amp;gt; With Options &amp;amp;lt;Modal className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-modal&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Modal&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Modal component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Modal Examples",
        "url": "/components/all/modal/examples/",
        "content": "Modal Examples Basic Example Basic usage of the modal component. &amp;amp;lt;div class=&amp;quot;eds-modal&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; Basic modal content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic modal content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-modal eds-modal--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-modal eds-modal--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-modal&amp;quot; id=&amp;quot;interactive-modal&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;modal-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;modal-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Modal interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the modal responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-modal eds-modal--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-modal__content&amp;quot;&amp;gt; This modal adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This modal adapts to different screen sizes",
        "description": "Examples of different modal variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Footer Accessibility",
        "url": "/components/all/page-footer/accessibility/",
        "content": "Page Footer Accessibility Guidelines Overview Ensuring the page footer component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-page-footer&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;page-footer-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;page-footer-title&amp;quot;&amp;gt;Accessible Page Footer&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Page Footer component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Footer Code",
        "url": "/components/all/page-footer/code/",
        "content": "Page Footer Implementation HTML Structure &amp;amp;lt;!-- Basic Page Footer --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-page-footer { display: block; position: relative; } .eds-page-footer__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializePageFooter() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./page-footer.css&amp;#039;; const PageFooter = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-page-footer ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default PageFooter; Usage Examples Basic Usage &amp;amp;lt;PageFooter&amp;gt; Content goes here &amp;amp;lt;/PageFooter&amp;gt; With Options &amp;amp;lt;PageFooter className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-page-footer&amp;quot; &amp;gt; Content with options &amp;amp;lt;/PageFooter&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Page Footer component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Footer Design",
        "url": "/components/all/page-footer/design/",
        "content": "Page Footer Design Guidelines Anatomy The page footer component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Page Footer component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Footer Examples",
        "url": "/components/all/page-footer/examples/",
        "content": "Page Footer Examples Basic Example Basic usage of the page footer component. &amp;amp;lt;div class=&amp;quot;eds-page-footer&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; Basic page footer content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic page footer content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-page-footer eds-page-footer--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-page-footer eds-page-footer--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-page-footer&amp;quot; id=&amp;quot;interactive-page-footer&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;page-footer-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;page-footer-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Page Footer interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the page footer responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-page-footer eds-page-footer--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-footer__content&amp;quot;&amp;gt; This page footer adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This page footer adapts to different screen sizes",
        "description": "Examples of different page footer variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Header Accessibility",
        "url": "/components/all/page-header/accessibility/",
        "content": "Page Header Accessibility Guidelines Overview Ensuring the page header component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-page-header&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;page-header-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;page-header-title&amp;quot;&amp;gt;Accessible Page Header&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Page Header component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Header Code",
        "url": "/components/all/page-header/code/",
        "content": "Page Header Implementation HTML Structure &amp;amp;lt;!-- Basic Page Header --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-page-header { display: block; position: relative; } .eds-page-header__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializePageHeader() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./page-header.css&amp;#039;; const PageHeader = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-page-header ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default PageHeader; Usage Examples Basic Usage &amp;amp;lt;PageHeader&amp;gt; Content goes here &amp;amp;lt;/PageHeader&amp;gt; With Options &amp;amp;lt;PageHeader className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-page-header&amp;quot; &amp;gt; Content with options &amp;amp;lt;/PageHeader&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Page Header component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Header Design",
        "url": "/components/all/page-header/design/",
        "content": "Page Header Design Guidelines Anatomy The page header component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Page Header component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Page Header Examples",
        "url": "/components/all/page-header/examples/",
        "content": "Page Header Examples Basic Example Basic usage of the page header component. &amp;amp;lt;div class=&amp;quot;eds-page-header&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; Basic page header content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic page header content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-page-header eds-page-header--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-page-header eds-page-header--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-page-header&amp;quot; id=&amp;quot;interactive-page-header&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;page-header-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;page-header-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Page Header interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the page header responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-page-header eds-page-header--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-page-header__content&amp;quot;&amp;gt; This page header adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This page header adapts to different screen sizes",
        "description": "Examples of different page header variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Popover Accessibility",
        "url": "/components/all/popover/accessibility/",
        "content": "Popover Accessibility Guidelines Overview Ensuring the popover component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-popover&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;popover-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;popover-title&amp;quot;&amp;gt;Accessible Popover&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Popover component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Popover Code",
        "url": "/components/all/popover/code/",
        "content": "Popover Implementation HTML Structure &amp;amp;lt;!-- Basic Popover --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-popover { display: block; position: relative; } .eds-popover__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializePopover() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./popover.css&amp;#039;; const Popover = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-popover ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-popover__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Popover; Usage Examples Basic Usage &amp;amp;lt;Popover&amp;gt; Content goes here &amp;amp;lt;/Popover&amp;gt; With Options &amp;amp;lt;Popover className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-popover&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Popover&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Popover component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Popover Design",
        "url": "/components/all/popover/design/",
        "content": "Popover Design Guidelines Anatomy The popover component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Popover component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Popover Examples",
        "url": "/components/all/popover/examples/",
        "content": "Popover Examples Basic Example Basic usage of the popover component. &amp;amp;lt;div class=&amp;quot;eds-popover&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; Basic popover content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic popover content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-popover eds-popover--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-popover eds-popover--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-popover&amp;quot; id=&amp;quot;interactive-popover&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;popover-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;popover-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Popover interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the popover responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-popover eds-popover--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-popover__content&amp;quot;&amp;gt; This popover adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This popover adapts to different screen sizes",
        "description": "Examples of different popover variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Progress Indicator Accessibility",
        "url": "/components/all/progress-indicator/accessibility/",
        "content": "Progress Indicator Accessibility Guidelines Overview Ensuring the progress indicator component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-progress-indicator&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;progress-indicator-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;progress-indicator-title&amp;quot;&amp;gt;Accessible Progress Indicator&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Progress Indicator component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Progress Indicator Code",
        "url": "/components/all/progress-indicator/code/",
        "content": "Progress Indicator Implementation HTML Structure &amp;amp;lt;!-- Basic Progress Indicator --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-progress-indicator { display: block; position: relative; } .eds-progress-indicator__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeProgressIndicator() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./progress-indicator.css&amp;#039;; const ProgressIndicator = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-progress-indicator ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default ProgressIndicator; Usage Examples Basic Usage &amp;amp;lt;ProgressIndicator&amp;gt; Content goes here &amp;amp;lt;/ProgressIndicator&amp;gt; With Options &amp;amp;lt;ProgressIndicator className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-progress-indicator&amp;quot; &amp;gt; Content with options &amp;amp;lt;/ProgressIndicator&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Progress Indicator component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Progress Indicator Design",
        "url": "/components/all/progress-indicator/design/",
        "content": "Progress Indicator Design Guidelines Anatomy The progress indicator component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Progress Indicator component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Progress Indicator Examples",
        "url": "/components/all/progress-indicator/examples/",
        "content": "Progress Indicator Examples Basic Example Basic usage of the progress indicator component. &amp;amp;lt;div class=&amp;quot;eds-progress-indicator&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; Basic progress indicator content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic progress indicator content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-progress-indicator eds-progress-indicator--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-progress-indicator eds-progress-indicator--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-progress-indicator&amp;quot; id=&amp;quot;interactive-progress-indicator&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;progress-indicator-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;progress-indicator-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Progress Indicator interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the progress indicator responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-progress-indicator eds-progress-indicator--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-progress-indicator__content&amp;quot;&amp;gt; This progress indicator adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This progress indicator adapts to different screen sizes",
        "description": "Examples of different progress indicator variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Group Code",
        "url": "/components/all/radio-group/code/",
        "content": "Radio Group Implementation HTML Structure &amp;amp;lt;!-- Basic Radio Group --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-radio-group { display: block; position: relative; } .eds-radio-group__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeRadioGroup() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./radio-group.css&amp;#039;; const RadioGroup = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-radio-group ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default RadioGroup; Usage Examples Basic Usage &amp;amp;lt;RadioGroup&amp;gt; Content goes here &amp;amp;lt;/RadioGroup&amp;gt; With Options &amp;amp;lt;RadioGroup className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-radio-group&amp;quot; &amp;gt; Content with options &amp;amp;lt;/RadioGroup&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Radio Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Group Design",
        "url": "/components/all/radio-group/design/",
        "content": "Radio Group Design Guidelines Anatomy The radio group component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Radio Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Group Accessibility",
        "url": "/components/all/radio-group/accessibility/",
        "content": "Radio Group Accessibility Guidelines Overview Ensuring the radio group component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-radio-group&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;radio-group-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;radio-group-title&amp;quot;&amp;gt;Accessible Radio Group&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Radio Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Group Examples",
        "url": "/components/all/radio-group/examples/",
        "content": "Radio Group Examples Basic Example Basic usage of the radio group component. &amp;amp;lt;div class=&amp;quot;eds-radio-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; Basic radio group content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic radio group content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-radio-group eds-radio-group--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-radio-group eds-radio-group--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-radio-group&amp;quot; id=&amp;quot;interactive-radio-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;radio-group-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;radio-group-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Radio Group interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the radio group responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-radio-group eds-radio-group--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio-group__content&amp;quot;&amp;gt; This radio group adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This radio group adapts to different screen sizes",
        "description": "Examples of different radio group variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Code",
        "url": "/components/all/radio/code/",
        "content": "Radio Implementation HTML Structure &amp;amp;lt;!-- Basic Radio --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-radio { display: block; position: relative; } .eds-radio__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeRadio() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./radio.css&amp;#039;; const Radio = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-radio ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-radio__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Radio; Usage Examples Basic Usage &amp;amp;lt;Radio&amp;gt; Content goes here &amp;amp;lt;/Radio&amp;gt; With Options &amp;amp;lt;Radio className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-radio&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Radio&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Radio component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Design",
        "url": "/components/all/radio/design/",
        "content": "Radio Design Guidelines Anatomy The radio component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Radio component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Accessibility",
        "url": "/components/all/radio/accessibility/",
        "content": "Radio Accessibility Guidelines Overview Ensuring the radio component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-radio&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;radio-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;radio-title&amp;quot;&amp;gt;Accessible Radio&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Radio component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Radio Examples",
        "url": "/components/all/radio/examples/",
        "content": "Radio Examples Basic Example Basic usage of the radio component. &amp;amp;lt;div class=&amp;quot;eds-radio&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; Basic radio content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic radio content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-radio eds-radio--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-radio eds-radio--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-radio&amp;quot; id=&amp;quot;interactive-radio&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;radio-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;radio-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Radio interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the radio responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-radio eds-radio--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-radio__content&amp;quot;&amp;gt; This radio adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This radio adapts to different screen sizes",
        "description": "Examples of different radio variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segment Accessibility",
        "url": "/components/all/segment/accessibility/",
        "content": "Segment Accessibility Guidelines Overview Ensuring the segment component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-segment&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;segment-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;segment-title&amp;quot;&amp;gt;Accessible Segment&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Segment component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segment Code",
        "url": "/components/all/segment/code/",
        "content": "Segment Implementation HTML Structure &amp;amp;lt;!-- Basic Segment --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-segment { display: block; position: relative; } .eds-segment__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeSegment() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./segment.css&amp;#039;; const Segment = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-segment ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-segment__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Segment; Usage Examples Basic Usage &amp;amp;lt;Segment&amp;gt; Content goes here &amp;amp;lt;/Segment&amp;gt; With Options &amp;amp;lt;Segment className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-segment&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Segment&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Segment component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segment Design",
        "url": "/components/all/segment/design/",
        "content": "Segment Design Guidelines Anatomy The segment component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Segment component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segment Examples",
        "url": "/components/all/segment/examples/",
        "content": "Segment Examples Basic Example Basic usage of the segment component. &amp;amp;lt;div class=&amp;quot;eds-segment&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; Basic segment content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic segment content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-segment eds-segment--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-segment eds-segment--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-segment&amp;quot; id=&amp;quot;interactive-segment&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;segment-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;segment-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Segment interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the segment responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-segment eds-segment--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segment__content&amp;quot;&amp;gt; This segment adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This segment adapts to different screen sizes",
        "description": "Examples of different segment variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segmented Control Design",
        "url": "/components/all/segmented-control/design/",
        "content": "Segmented Control Design Guidelines Anatomy The segmented control component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Segmented Control component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segmented Control Accessibility",
        "url": "/components/all/segmented-control/accessibility/",
        "content": "Segmented Control Accessibility Guidelines Overview Ensuring the segmented control component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-segmented-control&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;segmented-control-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;segmented-control-title&amp;quot;&amp;gt;Accessible Segmented Control&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Segmented Control component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segmented Control Code",
        "url": "/components/all/segmented-control/code/",
        "content": "Segmented Control Implementation HTML Structure &amp;amp;lt;!-- Basic Segmented Control --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-segmented-control { display: block; position: relative; } .eds-segmented-control__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeSegmentedControl() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./segmented-control.css&amp;#039;; const SegmentedControl = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-segmented-control ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default SegmentedControl; Usage Examples Basic Usage &amp;amp;lt;SegmentedControl&amp;gt; Content goes here &amp;amp;lt;/SegmentedControl&amp;gt; With Options &amp;amp;lt;SegmentedControl className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-segmented-control&amp;quot; &amp;gt; Content with options &amp;amp;lt;/SegmentedControl&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Segmented Control component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Segmented Control Examples",
        "url": "/components/all/segmented-control/examples/",
        "content": "Segmented Control Examples Basic Example Basic usage of the segmented control component. &amp;amp;lt;div class=&amp;quot;eds-segmented-control&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; Basic segmented control content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic segmented control content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-segmented-control eds-segmented-control--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-segmented-control eds-segmented-control--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-segmented-control&amp;quot; id=&amp;quot;interactive-segmented-control&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;segmented-control-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;segmented-control-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Segmented Control interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the segmented control responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-segmented-control eds-segmented-control--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-segmented-control__content&amp;quot;&amp;gt; This segmented control adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This segmented control adapts to different screen sizes",
        "description": "Examples of different segmented control variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Select Accessibility",
        "url": "/components/all/select/accessibility/",
        "content": "Select Accessibility Guidelines Overview Ensuring the select component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-select&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;select-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;select-title&amp;quot;&amp;gt;Accessible Select&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Select component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Select Code",
        "url": "/components/all/select/code/",
        "content": "Select Implementation HTML Structure &amp;amp;lt;!-- Basic Select --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-select { display: block; position: relative; } .eds-select__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeSelect() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./select.css&amp;#039;; const Select = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-select ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-select__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Select; Usage Examples Basic Usage &amp;amp;lt;Select&amp;gt; Content goes here &amp;amp;lt;/Select&amp;gt; With Options &amp;amp;lt;Select className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-select&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Select&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Select component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Select Design",
        "url": "/components/all/select/design/",
        "content": "Select Design Guidelines Anatomy The select component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Select component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Select Examples",
        "url": "/components/all/select/examples/",
        "content": "Select Examples Basic Example Basic usage of the select component. &amp;amp;lt;div class=&amp;quot;eds-select&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; Basic select content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic select content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-select eds-select--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-select eds-select--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-select&amp;quot; id=&amp;quot;interactive-select&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;select-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;select-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Select interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the select responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-select eds-select--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-select__content&amp;quot;&amp;gt; This select adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This select adapts to different screen sizes",
        "description": "Examples of different select variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Slider Accessibility",
        "url": "/components/all/slider/accessibility/",
        "content": "Slider Accessibility Guidelines Overview Ensuring the slider component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-slider&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;slider-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;slider-title&amp;quot;&amp;gt;Accessible Slider&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Slider component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Slider Code",
        "url": "/components/all/slider/code/",
        "content": "Slider Implementation HTML Structure &amp;amp;lt;!-- Basic Slider --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-slider { display: block; position: relative; } .eds-slider__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeSlider() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./slider.css&amp;#039;; const Slider = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-slider ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-slider__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Slider; Usage Examples Basic Usage &amp;amp;lt;Slider&amp;gt; Content goes here &amp;amp;lt;/Slider&amp;gt; With Options &amp;amp;lt;Slider className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-slider&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Slider&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Slider component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Slider Design",
        "url": "/components/all/slider/design/",
        "content": "Slider Design Guidelines Anatomy The slider component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Slider component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Slider Examples",
        "url": "/components/all/slider/examples/",
        "content": "Slider Examples Basic Example Basic usage of the slider component. &amp;amp;lt;div class=&amp;quot;eds-slider&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; Basic slider content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic slider content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-slider eds-slider--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-slider eds-slider--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-slider&amp;quot; id=&amp;quot;interactive-slider&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;slider-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;slider-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Slider interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the slider responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-slider eds-slider--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-slider__content&amp;quot;&amp;gt; This slider adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This slider adapts to different screen sizes",
        "description": "Examples of different slider variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Spinner Accessibility",
        "url": "/components/all/spinner/accessibility/",
        "content": "Spinner Accessibility Guidelines Overview Ensuring the spinner component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-spinner&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;spinner-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;spinner-title&amp;quot;&amp;gt;Accessible Spinner&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Spinner component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Spinner Code",
        "url": "/components/all/spinner/code/",
        "content": "Spinner Implementation HTML Structure &amp;amp;lt;!-- Basic Spinner --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-spinner { display: block; position: relative; } .eds-spinner__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeSpinner() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./spinner.css&amp;#039;; const Spinner = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-spinner ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Spinner; Usage Examples Basic Usage &amp;amp;lt;Spinner&amp;gt; Content goes here &amp;amp;lt;/Spinner&amp;gt; With Options &amp;amp;lt;Spinner className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-spinner&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Spinner&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Spinner component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Spinner Design",
        "url": "/components/all/spinner/design/",
        "content": "Spinner Design Guidelines Anatomy The spinner component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Spinner component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Spinner Examples",
        "url": "/components/all/spinner/examples/",
        "content": "Spinner Examples Basic Example Basic usage of the spinner component. &amp;amp;lt;div class=&amp;quot;eds-spinner&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; Basic spinner content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic spinner content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-spinner eds-spinner--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-spinner eds-spinner--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-spinner&amp;quot; id=&amp;quot;interactive-spinner&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;spinner-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;spinner-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Spinner interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the spinner responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-spinner eds-spinner--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-spinner__content&amp;quot;&amp;gt; This spinner adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This spinner adapts to different screen sizes",
        "description": "Examples of different spinner variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Status Accessibility",
        "url": "/components/all/status/accessibility/",
        "content": "Status Accessibility Guidelines Overview Ensuring the status component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-status&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;status-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;status-title&amp;quot;&amp;gt;Accessible Status&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Status component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Status Code",
        "url": "/components/all/status/code/",
        "content": "Status Implementation HTML Structure &amp;amp;lt;!-- Basic Status --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-status { display: block; position: relative; } .eds-status__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeStatus() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./status.css&amp;#039;; const Status = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-status ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-status__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Status; Usage Examples Basic Usage &amp;amp;lt;Status&amp;gt; Content goes here &amp;amp;lt;/Status&amp;gt; With Options &amp;amp;lt;Status className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-status&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Status&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Status component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Status Design",
        "url": "/components/all/status/design/",
        "content": "Status Design Guidelines Anatomy The status component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Status component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Status Examples",
        "url": "/components/all/status/examples/",
        "content": "Status Examples Basic Example Basic usage of the status component. &amp;amp;lt;div class=&amp;quot;eds-status&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; Basic status content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic status content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-status eds-status--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-status eds-status--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-status&amp;quot; id=&amp;quot;interactive-status&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;status-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;status-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Status interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the status responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-status eds-status--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-status__content&amp;quot;&amp;gt; This status adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This status adapts to different screen sizes",
        "description": "Examples of different status variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Stepper Design",
        "url": "/components/all/stepper/design/",
        "content": "Stepper Design Guidelines Anatomy The stepper component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Stepper component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Stepper Accessibility",
        "url": "/components/all/stepper/accessibility/",
        "content": "Stepper Accessibility Guidelines Overview Ensuring the stepper component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-stepper&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;stepper-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;stepper-title&amp;quot;&amp;gt;Accessible Stepper&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Stepper component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Stepper Code",
        "url": "/components/all/stepper/code/",
        "content": "Stepper Implementation HTML Structure &amp;amp;lt;!-- Basic Stepper --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-stepper { display: block; position: relative; } .eds-stepper__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeStepper() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./stepper.css&amp;#039;; const Stepper = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-stepper ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Stepper; Usage Examples Basic Usage &amp;amp;lt;Stepper&amp;gt; Content goes here &amp;amp;lt;/Stepper&amp;gt; With Options &amp;amp;lt;Stepper className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-stepper&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Stepper&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Stepper component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Stepper Examples",
        "url": "/components/all/stepper/examples/",
        "content": "Stepper Examples Basic Example Basic usage of the stepper component. &amp;amp;lt;div class=&amp;quot;eds-stepper&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; Basic stepper content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic stepper content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-stepper eds-stepper--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-stepper eds-stepper--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-stepper&amp;quot; id=&amp;quot;interactive-stepper&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;stepper-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;stepper-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Stepper interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the stepper responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-stepper eds-stepper--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-stepper__content&amp;quot;&amp;gt; This stepper adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This stepper adapts to different screen sizes",
        "description": "Examples of different stepper variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Switch Accessibility",
        "url": "/components/all/switch/accessibility/",
        "content": "Switch Accessibility Guidelines Overview Ensuring the switch component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-switch&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;switch-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;switch-title&amp;quot;&amp;gt;Accessible Switch&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Switch component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Switch Code",
        "url": "/components/all/switch/code/",
        "content": "Switch Implementation HTML Structure &amp;amp;lt;!-- Basic Switch --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-switch { display: block; position: relative; } .eds-switch__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeSwitch() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./switch.css&amp;#039;; const Switch = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-switch ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-switch__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Switch; Usage Examples Basic Usage &amp;amp;lt;Switch&amp;gt; Content goes here &amp;amp;lt;/Switch&amp;gt; With Options &amp;amp;lt;Switch className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-switch&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Switch&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Switch component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Switch Design",
        "url": "/components/all/switch/design/",
        "content": "Switch Design Guidelines Anatomy The switch component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Switch component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Switch Examples",
        "url": "/components/all/switch/examples/",
        "content": "Switch Examples Basic Example Basic usage of the switch component. &amp;amp;lt;div class=&amp;quot;eds-switch&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; Basic switch content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic switch content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-switch eds-switch--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-switch eds-switch--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-switch&amp;quot; id=&amp;quot;interactive-switch&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;switch-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;switch-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Switch interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the switch responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-switch eds-switch--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-switch__content&amp;quot;&amp;gt; This switch adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This switch adapts to different screen sizes",
        "description": "Examples of different switch variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tab Group Accessibility",
        "url": "/components/all/tab-group/accessibility/",
        "content": "Tab Group Accessibility Guidelines Overview Ensuring the tab group component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-tab-group&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;tab-group-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;tab-group-title&amp;quot;&amp;gt;Accessible Tab Group&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Tab Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tab Group Code",
        "url": "/components/all/tab-group/code/",
        "content": "Tab Group Implementation HTML Structure &amp;amp;lt;!-- Basic Tab Group --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-tab-group { display: block; position: relative; } .eds-tab-group__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTabGroup() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./tab-group.css&amp;#039;; const TabGroup = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-tab-group ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default TabGroup; Usage Examples Basic Usage &amp;amp;lt;TabGroup&amp;gt; Content goes here &amp;amp;lt;/TabGroup&amp;gt; With Options &amp;amp;lt;TabGroup className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-tab-group&amp;quot; &amp;gt; Content with options &amp;amp;lt;/TabGroup&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Tab Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tab Group Design",
        "url": "/components/all/tab-group/design/",
        "content": "Tab Group Design Guidelines Anatomy The tab group component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Tab Group component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tab Group Examples",
        "url": "/components/all/tab-group/examples/",
        "content": "Tab Group Examples Basic Example Basic usage of the tab group component. &amp;amp;lt;div class=&amp;quot;eds-tab-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; Basic tab group content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic tab group content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-tab-group eds-tab-group--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-tab-group eds-tab-group--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-tab-group&amp;quot; id=&amp;quot;interactive-tab-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;tab-group-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;tab-group-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Tab Group interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the tab group responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-tab-group eds-tab-group--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tab-group__content&amp;quot;&amp;gt; This tab group adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This tab group adapts to different screen sizes",
        "description": "Examples of different tab group variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Table Accessibility",
        "url": "/components/all/table/accessibility/",
        "content": "Table Accessibility Guidelines Overview Ensuring the table component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-table&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;table-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;table-title&amp;quot;&amp;gt;Accessible Table&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Table component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Table Code",
        "url": "/components/all/table/code/",
        "content": "Table Implementation HTML Structure &amp;amp;lt;!-- Basic Table --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-table { display: block; position: relative; } .eds-table__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTable() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./table.css&amp;#039;; const Table = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-table ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-table__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Table; Usage Examples Basic Usage &amp;amp;lt;Table&amp;gt; Content goes here &amp;amp;lt;/Table&amp;gt; With Options &amp;amp;lt;Table className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-table&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Table&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Table component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Table Design",
        "url": "/components/all/table/design/",
        "content": "Table Design Guidelines Anatomy The table component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Table component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Table Examples",
        "url": "/components/all/table/examples/",
        "content": "Table Examples Basic Example Basic usage of the table component. &amp;amp;lt;div class=&amp;quot;eds-table&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; Basic table content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic table content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-table eds-table--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-table eds-table--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-table&amp;quot; id=&amp;quot;interactive-table&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;table-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;table-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Table interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the table responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-table eds-table--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-table__content&amp;quot;&amp;gt; This table adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This table adapts to different screen sizes",
        "description": "Examples of different table variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tag Accessibility",
        "url": "/components/all/tag/accessibility/",
        "content": "Tag Accessibility Guidelines Overview Ensuring the tag component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-tag&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;tag-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;tag-title&amp;quot;&amp;gt;Accessible Tag&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Tag component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tag Code",
        "url": "/components/all/tag/code/",
        "content": "Tag Implementation HTML Structure &amp;amp;lt;!-- Basic Tag --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-tag { display: block; position: relative; } .eds-tag__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTag() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./tag.css&amp;#039;; const Tag = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-tag ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-tag__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Tag; Usage Examples Basic Usage &amp;amp;lt;Tag&amp;gt; Content goes here &amp;amp;lt;/Tag&amp;gt; With Options &amp;amp;lt;Tag className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-tag&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Tag&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Tag component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tag Design",
        "url": "/components/all/tag/design/",
        "content": "Tag Design Guidelines Anatomy The tag component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Tag component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tag Examples",
        "url": "/components/all/tag/examples/",
        "content": "Tag Examples Basic Example Basic usage of the tag component. &amp;amp;lt;div class=&amp;quot;eds-tag&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; Basic tag content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic tag content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-tag eds-tag--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-tag eds-tag--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-tag&amp;quot; id=&amp;quot;interactive-tag&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;tag-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;tag-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Tag interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the tag responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-tag eds-tag--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tag__content&amp;quot;&amp;gt; This tag adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This tag adapts to different screen sizes",
        "description": "Examples of different tag variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Text Input Accessibility",
        "url": "/components/all/text-input/accessibility/",
        "content": "Text Input Accessibility Guidelines Overview Ensuring the text input component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-text-input&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;text-input-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;text-input-title&amp;quot;&amp;gt;Accessible Text Input&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Text Input component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Text Input Code",
        "url": "/components/all/text-input/code/",
        "content": "Text Input Implementation HTML Structure &amp;amp;lt;!-- Basic Text Input --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-text-input { display: block; position: relative; } .eds-text-input__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTextInput() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./text-input.css&amp;#039;; const TextInput = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-text-input ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default TextInput; Usage Examples Basic Usage &amp;amp;lt;TextInput&amp;gt; Content goes here &amp;amp;lt;/TextInput&amp;gt; With Options &amp;amp;lt;TextInput className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-text-input&amp;quot; &amp;gt; Content with options &amp;amp;lt;/TextInput&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Text Input component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Text Input Design",
        "url": "/components/all/text-input/design/",
        "content": "Text Input Design Guidelines Anatomy The text input component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Text Input component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Text Input Examples",
        "url": "/components/all/text-input/examples/",
        "content": "Text Input Examples Basic Example Basic usage of the text input component. &amp;amp;lt;div class=&amp;quot;eds-text-input&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; Basic text input content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic text input content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-text-input eds-text-input--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-text-input eds-text-input--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-text-input&amp;quot; id=&amp;quot;interactive-text-input&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;text-input-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;text-input-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Text Input interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the text input responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-text-input eds-text-input--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-text-input__content&amp;quot;&amp;gt; This text input adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This text input adapts to different screen sizes",
        "description": "Examples of different text input variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Textarea Design",
        "url": "/components/all/textarea/design/",
        "content": "Textarea Design Guidelines Anatomy The textarea component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Textarea component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Textarea Accessibility",
        "url": "/components/all/textarea/accessibility/",
        "content": "Textarea Accessibility Guidelines Overview Ensuring the textarea component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-textarea&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;textarea-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;textarea-title&amp;quot;&amp;gt;Accessible Textarea&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Textarea component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Textarea Code",
        "url": "/components/all/textarea/code/",
        "content": "Textarea Implementation HTML Structure &amp;amp;lt;!-- Basic Textarea --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-textarea { display: block; position: relative; } .eds-textarea__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTextarea() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./textarea.css&amp;#039;; const Textarea = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-textarea ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Textarea; Usage Examples Basic Usage &amp;amp;lt;Textarea&amp;gt; Content goes here &amp;amp;lt;/Textarea&amp;gt; With Options &amp;amp;lt;Textarea className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-textarea&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Textarea&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Textarea component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Textarea Examples",
        "url": "/components/all/textarea/examples/",
        "content": "Textarea Examples Basic Example Basic usage of the textarea component. &amp;amp;lt;div class=&amp;quot;eds-textarea&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; Basic textarea content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic textarea content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-textarea eds-textarea--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-textarea eds-textarea--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-textarea&amp;quot; id=&amp;quot;interactive-textarea&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;textarea-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;textarea-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Textarea interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the textarea responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-textarea eds-textarea--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-textarea__content&amp;quot;&amp;gt; This textarea adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This textarea adapts to different screen sizes",
        "description": "Examples of different textarea variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tile Accessibility",
        "url": "/components/all/tile/accessibility/",
        "content": "Tile Accessibility Guidelines Overview Ensuring the tile component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-tile&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;tile-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;tile-title&amp;quot;&amp;gt;Accessible Tile&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Tile component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tile Code",
        "url": "/components/all/tile/code/",
        "content": "Tile Implementation HTML Structure &amp;amp;lt;!-- Basic Tile --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-tile { display: block; position: relative; } .eds-tile__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTile() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./tile.css&amp;#039;; const Tile = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-tile ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-tile__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Tile; Usage Examples Basic Usage &amp;amp;lt;Tile&amp;gt; Content goes here &amp;amp;lt;/Tile&amp;gt; With Options &amp;amp;lt;Tile className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-tile&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Tile&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Tile component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tile Design",
        "url": "/components/all/tile/design/",
        "content": "Tile Design Guidelines Anatomy The tile component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Tile component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tile Examples",
        "url": "/components/all/tile/examples/",
        "content": "Tile Examples Basic Example Basic usage of the tile component. &amp;amp;lt;div class=&amp;quot;eds-tile&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; Basic tile content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic tile content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-tile eds-tile--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-tile eds-tile--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-tile&amp;quot; id=&amp;quot;interactive-tile&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;tile-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;tile-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Tile interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the tile responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-tile eds-tile--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tile__content&amp;quot;&amp;gt; This tile adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This tile adapts to different screen sizes",
        "description": "Examples of different tile variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Title Code",
        "url": "/components/all/title/code/",
        "content": "Title Implementation HTML Structure &amp;amp;lt;!-- Basic Title --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-title { display: block; position: relative; } .eds-title__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTitle() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./title.css&amp;#039;; const Title = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-title ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-title__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Title; Usage Examples Basic Usage &amp;amp;lt;Title&amp;gt; Content goes here &amp;amp;lt;/Title&amp;gt; With Options &amp;amp;lt;Title className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-title&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Title&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Title component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Title Design",
        "url": "/components/all/title/design/",
        "content": "Title Design Guidelines Anatomy The title component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Title component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Title Accessibility",
        "url": "/components/all/title/accessibility/",
        "content": "Title Accessibility Guidelines Overview Ensuring the title component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-title&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;title-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;title-title&amp;quot;&amp;gt;Accessible Title&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Title component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Title Examples",
        "url": "/components/all/title/examples/",
        "content": "Title Examples Basic Example Basic usage of the title component. &amp;amp;lt;div class=&amp;quot;eds-title&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; Basic title content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic title content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-title eds-title--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-title eds-title--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-title&amp;quot; id=&amp;quot;interactive-title&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;title-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;title-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Title interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the title responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-title eds-title--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-title__content&amp;quot;&amp;gt; This title adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This title adapts to different screen sizes",
        "description": "Examples of different title variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tooltip Design",
        "url": "/components/all/tooltip/design/",
        "content": "Tooltip Design Guidelines Anatomy The tooltip component consists of several key elements: Element 1: Description of element 1 Element 2: Description of element 2 Element 3: Description of element 3 Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Typography Text style 1: 16px/1rem, font-weight: 600 Text style 2: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Margin: 8px (0.5rem) Border radius: 4px (0.25rem) States Default: Description of default state Hover: Description of hover state Focus: Description of focus state Active: Description of active state Disabled: Description of disabled state Variations Variation 1 Description of variation 1. Variation 2 Description of variation 2. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Design recommendation 1 Design recommendation 2 Design recommendation 3 Don&amp;#039;ts Design caution 1 Design caution 2 Design caution 3",
        "description": "Design guidelines for the Tooltip component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tooltip Code",
        "url": "/components/all/tooltip/code/",
        "content": "Tooltip Implementation HTML Structure &amp;amp;lt;!-- Basic Tooltip --&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Component content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .eds-tooltip { display: block; position: relative; } .eds-tooltip__content { padding: var(--spacing-4); } JavaScript // Optional JavaScript for enhanced functionality function initializeTooltip() { // Implementation details } React Implementation import React from &amp;#039;react&amp;#039;; import &amp;#039;./tooltip.css&amp;#039;; const Tooltip = ({ children, className, ...props }) =&amp;gt; { return ( &amp;amp;lt;div className={`eds-tooltip ${className || &amp;#039;&amp;#039;}`} {...props}&amp;gt; &amp;amp;lt;div className=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; {children} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; export default Tooltip; Usage Examples Basic Usage &amp;amp;lt;Tooltip&amp;gt; Content goes here &amp;amp;lt;/Tooltip&amp;gt; With Options &amp;amp;lt;Tooltip className=&amp;quot;custom-class&amp;quot; data-testid=&amp;quot;test-tooltip&amp;quot; &amp;gt; Content with options &amp;amp;lt;/Tooltip&amp;gt; Accessibility Considerations Ensure proper ARIA attributes Support keyboard navigation Maintain sufficient color contrast",
        "description": "Implementation guidelines for the Tooltip component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tooltip Accessibility",
        "url": "/components/all/tooltip/accessibility/",
        "content": "Tooltip Accessibility Guidelines Overview Ensuring the tooltip component is accessible to all users, including those using assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. Keyboard Accessibility Key Function Tab Moves focus to the component Enter/Space Activates the component Arrow keys Navigates within the component (if applicable) Screen Reader Support Use appropriate ARIA roles and attributes Ensure proper labeling of interactive elements Provide context for screen reader users Implementation Checklist Semantic HTML Use native HTML elements when possible Use appropriate heading levels Maintain a logical DOM structure Focus Management Ensure visible focus indication Implement logical tab order Trap focus when needed (e.g., in modals) Color and Contrast Maintain sufficient color contrast Don&amp;#039;t rely solely on color to convey information Test with grayscale to verify information is still understandable States and Properties Properly communicate component state using ARIA when needed Use ARIA live regions for dynamic content when appropriate Testing Recommendations Automated Testing Use accessibility tools to check for common issues Verify HTML validity Manual Testing Test with keyboard navigation Test with screen readers Verify proper focus management Code Example with Accessibility Features &amp;amp;lt;div class=&amp;quot;eds-tooltip&amp;quot; role=&amp;quot;region&amp;quot; aria-labelledby=&amp;quot;tooltip-title&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;tooltip-title&amp;quot;&amp;gt;Accessible Tooltip&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; &amp;amp;lt;!-- Accessible content goes here --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt;",
        "description": "Accessibility guidelines for the Tooltip component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Tooltip Examples",
        "url": "/components/all/tooltip/examples/",
        "content": "Tooltip Examples Basic Example Basic usage of the tooltip component. &amp;amp;lt;div class=&amp;quot;eds-tooltip&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; Basic tooltip content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Basic tooltip content Variation 1 Description of variation 1. &amp;amp;lt;div class=&amp;quot;eds-tooltip eds-tooltip--variation-1&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; Variation 1 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 1 content Variation 2 Description of variation 2. &amp;amp;lt;div class=&amp;quot;eds-tooltip eds-tooltip--variation-2&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; Variation 2 content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Variation 2 content Interactive Example Interactive example with JavaScript integration. &amp;amp;lt;div class=&amp;quot;eds-tooltip&amp;quot; id=&amp;quot;interactive-tooltip&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; Interactive content &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;eds-button&amp;quot; id=&amp;quot;tooltip-action-button&amp;quot;&amp;gt;Interact&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;script&amp;gt; document.getElementById(&amp;#039;tooltip-action-button&amp;#039;).addEventListener(&amp;#039;click&amp;#039;, function() { // Interactive functionality alert(&amp;#039;Tooltip interaction triggered&amp;#039;); }); &amp;amp;lt;/script&amp;gt; Interactive content Interact Responsive Behavior Demonstrates how the tooltip responds to different screen sizes. &amp;amp;lt;div class=&amp;quot;eds-tooltip eds-tooltip--responsive&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-tooltip__content&amp;quot;&amp;gt; This tooltip adapts to different screen sizes &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; This tooltip adapts to different screen sizes",
        "description": "Examples of different tooltip variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Alert",
        "url": "/components/all/alert/",
        "content": "Alert An alert displays a short, important message in a way that attracts the user&amp;#039;s attention without interrupting the user&amp;#039;s task. Overview Alerts provide contextual feedback messages for typical user actions. They can be used to communicate success, information, warnings, or errors. Types Success: Indicates the successful completion of an action Warning: Warns the user of a potentially negative outcome Error: Indicates that an error has occurred Info: Provides neutral or general information to the user When to Use To provide feedback after user actions To notify users of system status changes To highlight important information To display error messages or validation feedback Best Practices Keep alert messages concise and clear Use appropriate alert types based on the context Include actionable information when relevant Ensure alerts are accessible to all users Position alerts where they are easily noticeable but not disruptive Related Components Inline Alert Toast Banner Tabs Design Code Accessibility Examples",
        "description": "An alert displays a short, important message in a way that attracts the user&amp;#039;s attention without interrupting the user&amp;#039;s task.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Alert Design",
        "url": "/components/all/alert/design/",
        "content": "Alert Design Guidelines Anatomy The alert component consists of several key elements: Container: Wraps the entire alert with distinctive background colors based on alert type Icon: Visual indicator of the alert type (success, warning, error, info) Title (optional): Bold text summarizing the alert message Message: Primary content of the alert Close button (optional): Allows users to dismiss the alert Visual Design Colors Alert Type Background Color Border Color Icon Color Success var(--color-success-light) var(--color-success) var(--color-success) Warning var(--color-warning-light) var(--color-warning) var(--color-warning) Error var(--color-error-light) var(--color-error) var(--color-error) Info var(--color-info-light) var(--color-info) var(--color-info) Typography Title: 16px/1rem, font-weight: 600 Message: 14px/0.875rem, font-weight: 400 Sizing and Spacing Padding: 16px (1rem) Border radius: 4px (0.25rem) Border width: 1px Icon size: 20px (1.25rem) Space between icon and text: 12px (0.75rem) States Default: Shown with full opacity Dismissing: Fade-out animation when being dismissed Dismissed: Hidden from view Variations Simple Alert A basic alert with an icon and message. Alert with Title Includes a bold title above the message for added emphasis. Dismissible Alert Includes a close button that allows users to dismiss the alert. Alert with Actions Includes action buttons or links to help users respond to the alert. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Keep messages concise and actionable Use appropriate colors for each alert type Include an icon to reinforce the alert type Position alerts where they are easily visible Don&amp;#039;ts Use too many alerts on a single page Include complex or lengthy content in alerts Use custom colors that don&amp;#039;t meet accessibility standards Create alerts that completely block content unless absolutely necessary",
        "description": "Design guidelines for the Alert component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Alert Code",
        "url": "/components/all/alert/code/",
        "content": "Alert Code Implementation The Alert component is available in various frameworks and can be implemented using the code examples below. HTML Implementation &amp;amp;lt;div class=&amp;quot;alert alert-success&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Your changes have been successfully saved.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;alert-close&amp;quot; aria-label=&amp;quot;Close alert&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; CSS .alert { display: flex; align-items: flex-start; padding: 1rem; border-radius: 0.25rem; border: 1px solid; margin-bottom: 1rem; } .alert-success { background-color: var(--color-success-light); border-color: var(--color-success); color: var(--color-success-dark); } .alert-warning { background-color: var(--color-warning-light); border-color: var(--color-warning); color: var(--color-warning-dark); } .alert-error { background-color: var(--color-error-light); border-color: var(--color-error); color: var(--color-error-dark); } .alert-info { background-color: var(--color-info-light); border-color: var(--color-info); color: var(--color-info-dark); } .alert-icon { flex-shrink: 0; margin-right: 0.75rem; display: flex; } .alert-content { flex-grow: 1; } .alert-title { font-weight: 600; margin-top: 0; margin-bottom: 0.25rem; } .alert-message { margin: 0; } .alert-close { background: none; border: none; cursor: pointer; padding: 0.25rem; color: currentColor; opacity: 0.7; } .alert-close:hover { opacity: 1; } JavaScript // Close alert functionality document.querySelectorAll(&amp;#039;.alert-close&amp;#039;).forEach(button =&amp;gt; { button.addEventListener(&amp;#039;click&amp;#039;, () =&amp;gt; { const alert = button.closest(&amp;#039;.alert&amp;#039;); // Add fade-out animation alert.style.opacity = &amp;#039;0&amp;#039;; alert.style.transition = &amp;#039;opacity 0.3s ease-out&amp;#039;; // Remove alert after animation completes setTimeout(() =&amp;gt; { alert.remove(); }, 300); }); }); React Implementation import React, { useState } from &amp;#039;react&amp;#039;; import &amp;#039;./Alert.css&amp;#039;; const icons = { success: ( &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fillRule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&amp;quot; clipRule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; ), warning: ( &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fillRule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z&amp;quot; clipRule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; ), error: ( &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fillRule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z&amp;quot; clipRule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; ), info: ( &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fillRule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z&amp;quot; clipRule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; ) }; const Alert = ({ type = &amp;#039;info&amp;#039;, title, children, dismissible = false }) =&amp;gt; { const [isVisible, setIsVisible] = useState(true); if (!isVisible) { return null; } return ( &amp;amp;lt;div className={`alert alert-${type}`} role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div className=&amp;quot;alert-icon&amp;quot;&amp;gt; {icons[type]} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div className=&amp;quot;alert-content&amp;quot;&amp;gt; {title &amp;amp;amp;&amp;amp;amp; &amp;amp;lt;h4 className=&amp;quot;alert-title&amp;quot;&amp;gt;{title}&amp;amp;lt;/h4&amp;gt;} &amp;amp;lt;p className=&amp;quot;alert-message&amp;quot;&amp;gt;{children}&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; {dismissible &amp;amp;amp;&amp;amp;amp; ( &amp;amp;lt;button className=&amp;quot;alert-close&amp;quot; onClick={() =&amp;gt; setIsVisible(false)} aria-label=&amp;quot;Close alert&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; )} &amp;amp;lt;/div&amp;gt; ); }; export default Alert; Usage &amp;amp;lt;Alert type=&amp;quot;success&amp;quot; title=&amp;quot;Success!&amp;quot;&amp;gt; Your changes have been successfully saved. &amp;amp;lt;/Alert&amp;gt; &amp;amp;lt;Alert type=&amp;quot;warning&amp;quot;&amp;gt; Please review your information before continuing. &amp;amp;lt;/Alert&amp;gt; &amp;amp;lt;Alert type=&amp;quot;error&amp;quot; dismissible&amp;gt; An error occurred while submitting the form. &amp;amp;lt;/Alert&amp;gt; &amp;amp;lt;Alert type=&amp;quot;info&amp;quot; title=&amp;quot;Note&amp;quot; dismissible&amp;gt; Your session will expire in 5 minutes. &amp;amp;lt;/Alert&amp;gt; Customization Options The Alert component can be customized with the following props: Prop Type Default Description type string &amp;#039;info&amp;#039; One of: &amp;#039;success&amp;#039;, &amp;#039;warning&amp;#039;, &amp;#039;error&amp;#039;, &amp;#039;info&amp;#039; title string null Optional title text for the alert children node - Main content of the alert dismissible boolean false Whether the alert can be dismissed onClose function - Function to call when alert is dismissed",
        "description": "Implementation guidelines for the Alert component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Alert Accessibility",
        "url": "/components/all/alert/accessibility/",
        "content": "Alert Accessibility Guidelines Alerts are important UI elements for communicating information to users, and must be designed to be accessible to all users, including those with disabilities. WCAG Compliance The Alert component should comply with the following WCAG 2.1 success criteria: 1.4.1 Use of Color (Level A): Color alone is not used to convey information 1.4.3 Contrast (Level AA): Text has sufficient contrast against background 2.4.2 Page Titled (Level A): Alert content has descriptive heading when appropriate 4.1.2 Name, Role, Value (Level A): Alert has appropriate ARIA roles and properties Implementation Requirements Proper Semantic Structure Use the role=&amp;amp;quot;alert&amp;amp;quot; attribute to ensure screen readers announce the alert content immediately For non-critical alerts, use role=&amp;amp;quot;status&amp;amp;quot; instead Include descriptive and concise text that clearly explains the purpose of the alert &amp;amp;lt;div role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;p&amp;gt;Your changes have been successfully saved.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; Focus Management For critical alerts, consider moving focus to the alert Ensure dismissible alerts return focus to the previously focused element when closed For alerts that appear as a result of user action, ensure they are in a logical position in the reading order Keyboard Accessibility For dismissible alerts: Ensure the close button is keyboard focusable (tabbable) Provide clear visual indication of focus state Implement proper key handlers (Enter/Space) to activate the close button &amp;amp;lt;button class=&amp;quot;alert-close&amp;quot; aria-label=&amp;quot;Close alert&amp;quot;&amp;gt; &amp;amp;lt;svg aria-hidden=&amp;quot;true&amp;quot; focusable=&amp;quot;false&amp;quot;&amp;gt;&amp;amp;lt;!-- icon --&amp;gt;&amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; Screen Reader Considerations Use ARIA live regions appropriately: aria-live=&amp;amp;quot;assertive&amp;amp;quot; for critical alerts aria-live=&amp;amp;quot;polite&amp;amp;quot; for non-critical alerts Provide context about the type of alert using aria-label or other text &amp;amp;lt;div class=&amp;quot;alert alert-success&amp;quot; role=&amp;quot;alert&amp;quot; aria-labelledby=&amp;quot;alert-heading&amp;quot;&amp;gt; &amp;amp;lt;h2 id=&amp;quot;alert-heading&amp;quot; class=&amp;quot;alert-title&amp;quot;&amp;gt;Success&amp;amp;lt;/h2&amp;gt; &amp;amp;lt;p&amp;gt;Your changes have been successfully saved.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; Color and Contrast Ensure the alert has sufficient color contrast (minimum 4.5:1 ratio for text) Don&amp;#039;t rely solely on color to convey the type of alert (use icons and text) Provide visual boundaries (borders) to help define the alert area Icon Usage Include descriptive icons that reinforce the alert type Make icons decorative with aria-hidden=&amp;amp;quot;true&amp;amp;quot; and focusable=&amp;amp;quot;false&amp;amp;quot; Ensure icons have sufficient contrast against their background &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg aria-hidden=&amp;quot;true&amp;quot; focusable=&amp;quot;false&amp;quot;&amp;gt;&amp;amp;lt;!-- icon --&amp;gt;&amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; Motion and Animation Avoid excessive animation that could trigger vestibular disorders If animations are used (such as when dismissing alerts): Keep them brief (under 5 seconds) Ensure they respect the user&amp;#039;s reduced motion preferences @media (prefers-reduced-motion: reduce) { .alert { transition: none; } } Testing Guidelines Test alerts with: Screen readers (NVDA, JAWS, VoiceOver) to ensure content is announced appropriately Keyboard only navigation to verify all interactive elements are accessible High contrast mode to check visibility in Windows High Contrast settings Zoom levels of up to 200% to ensure content remains readable Common Accessibility Issues to Avoid Missing role=&amp;amp;quot;alert&amp;amp;quot; or appropriate ARIA live region attributes Low color contrast between text and background Relying solely on color to convey alert type Missing text alternatives for icons Auto-dismissing alerts without sufficient time to read Animations that can&amp;#039;t be disabled Lack of keyboard accessibility for interactive alerts",
        "description": "Accessibility guidelines for the Alert component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Alert Examples",
        "url": "/components/all/alert/examples/",
        "content": "Alert Examples Below are various examples of the Alert component in different contexts and configurations. Basic Alert Types Success Alert &amp;amp;lt;div class=&amp;quot;alert alert-success&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Your changes have been successfully saved.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Your changes have been successfully saved. Warning Alert &amp;amp;lt;div class=&amp;quot;alert alert-warning&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Please review your information before continuing.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Please review your information before continuing. Error Alert &amp;amp;lt;div class=&amp;quot;alert alert-error&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;An error occurred while submitting the form.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; An error occurred while submitting the form. Info Alert &amp;amp;lt;div class=&amp;quot;alert alert-info&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Your session will expire in 5 minutes.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Your session will expire in 5 minutes. Alert with Title &amp;amp;lt;div class=&amp;quot;alert alert-info&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9a1 1 0 00-1-1z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;h4 class=&amp;quot;alert-title&amp;quot;&amp;gt;Information&amp;amp;lt;/h4&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Your session will expire in 5 minutes. Please save your work.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Information Your session will expire in 5 minutes. Please save your work. Dismissible Alert &amp;amp;lt;div class=&amp;quot;alert alert-success&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Your changes have been successfully saved.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;alert-close&amp;quot; aria-label=&amp;quot;Close alert&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; Your changes have been successfully saved. Alert with Actions &amp;amp;lt;div class=&amp;quot;alert alert-warning&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;h4 class=&amp;quot;alert-title&amp;quot;&amp;gt;Unsaved Changes&amp;amp;lt;/h4&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;You have unsaved changes that will be lost if you navigate away from this page.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-actions&amp;quot;&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-warning&amp;quot;&amp;gt;Save Changes&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-outline&amp;quot;&amp;gt;Discard&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Unsaved Changes You have unsaved changes that will be lost if you navigate away from this page. Save Changes Discard Form Validation Alert &amp;amp;lt;form&amp;gt; &amp;amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;Email&amp;amp;lt;/label&amp;gt; &amp;amp;lt;input type=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; class=&amp;quot;is-invalid&amp;quot; /&amp;gt; &amp;amp;lt;div class=&amp;quot;alert alert-error&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM7 4a1 1 0 0 0-1 1v4a1 1 0 1 0 2 0V5a1 1 0 0 0-1-1zm0 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;Please enter a valid email address.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Submit&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/form&amp;gt; Email Please enter a valid email address. Submit System Status Alert &amp;amp;lt;div class=&amp;quot;alert alert-warning alert-system&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-icon&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;20&amp;quot; height=&amp;quot;20&amp;quot; viewBox=&amp;quot;0 0 20 20&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path fill-rule=&amp;quot;evenodd&amp;quot; d=&amp;quot;M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z&amp;quot; clip-rule=&amp;quot;evenodd&amp;quot; /&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;h4 class=&amp;quot;alert-title&amp;quot;&amp;gt;System Maintenance&amp;amp;lt;/h4&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;The system will be undergoing maintenance on March 15th from 2:00 AM to 4:00 AM EST. Please save your work before this time.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; System Maintenance The system will be undergoing maintenance on March 15th from 2:00 AM to 4:00 AM EST. Please save your work before this time. Global Banner Alert &amp;amp;lt;div class=&amp;quot;alert alert-info alert-banner&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;alert-content&amp;quot;&amp;gt; &amp;amp;lt;p class=&amp;quot;alert-message&amp;quot;&amp;gt;We&amp;#039;ve updated our privacy policy. &amp;amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Learn more&amp;amp;lt;/a&amp;gt;&amp;amp;lt;/p&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button class=&amp;quot;alert-close&amp;quot; aria-label=&amp;quot;Close alert&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; We&amp;#039;ve updated our privacy policy. Learn more",
        "description": "Examples of the Alert component in various contexts",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button",
        "url": "/components/all/button/",
        "content": "Button Buttons enable users to trigger actions or events with a single click. They communicate what action will occur when the user interacts with them. Overview Buttons are interactive elements that enable users to trigger actions throughout the interface. They should clearly communicate what will happen when pressed and provide visual feedback during interaction. Types Primary: High-emphasis buttons for main actions Secondary: Medium-emphasis buttons for secondary actions Tertiary: Low-emphasis buttons for tertiary actions Danger: For destructive actions that should be highlighted Ghost: Minimally visually intrusive buttons Icon: Buttons that consist primarily of an icon with optional text When to Use To submit forms To trigger modal dialogs To initiate a new action To proceed through a multi-step process To provide navigation options Best Practices Use clear, concise, and action-oriented labels Prioritize button hierarchy on each screen Maintain consistent positioning across similar screens Ensure buttons are large enough to be easily tapped on touch devices Avoid using too many buttons in one section Use standard button styles for recognizability Related Components Link Form Actions Segmented Control Tabs Design Code Accessibility Examples",
        "description": "Buttons enable users to trigger actions or events with a single click.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button Design",
        "url": "/components/all/button/design/",
        "content": "Button Design Guidelines Anatomy The button component consists of several key elements: Container: The visible boundary of the button that provides the interactive area Label: Text that describes the action the button performs Icon (optional): Visual symbol that reinforces the action or provides additional context Focus state: Visual indicator when the button receives keyboard focus Visual Design Colors Button Type Background Color Text Color Border Hover State Primary var(--color-primary) var(--color-white) none var(--color-primary-dark) Secondary var(--color-white) var(--color-primary) 1px solid var(--color-primary) var(--color-primary-light) background Tertiary transparent var(--color-primary) none var(--color-primary-light) background Danger var(--color-error) var(--color-white) none var(--color-error-dark) Ghost transparent var(--color-text) none var(--color-gray-100) background Typography Font: System font stack (same as body text) Font weight: 500 (medium) or 600 (semibold) Font size: 14px (0.875rem) or 16px (1rem) Text case: Sentence case (capitalize first word only) Text alignment: Center-aligned Sizing and Spacing Size Height Padding (Left/Right) Font Size Icon Size Small 32px 12px 14px 16px Medium 40px 16px 14px 18px Large 48px 20px 16px 20px XLarge 56px 24px 16px 22px Border radius: 4px (0.25rem) for standard buttons, 8px (0.5rem) for rounded buttons Spacing between buttons: 16px (1rem) for horizontal layout, 12px (0.75rem) for vertical layout Icon spacing: 8px (0.5rem) between icon and text States Interactive States Default: The button&amp;#039;s normal appearance Hover: Visual feedback when a pointer is positioned over the button Focus: Visual indication when the button receives keyboard focus Active/Pressed: Visual feedback when the button is being clicked/tapped Disabled: Visual indication that the button is not interactive State Styling State Visual Changes Hover Darken background color by 10%, cursor: pointer Focus 2px outline in var(--color-focus), offset by 2px Active Darken background color by 15%, &amp;amp;quot;pressed&amp;amp;quot; effect (slight scale/shadow change) Disabled 60% opacity, cursor: not-allowed Variations Button with Icon Icons can be positioned either to the left or right of the button text: Left-aligned icon: Used for actions or to categorize the button Right-aligned icon: Typically indicates direction (e.g., forward/next actions) Icon-only Button Always include a tooltip or aria-label for accessibility Maintain adequate touch target size (minimum 44px × 44px) Use familiar, recognizable icons Full-width Button Occupies 100% of the container width Typically used in mobile layouts or for main actions in forms Loading State Include a spinner animation to indicate processing Maintain the same button width to prevent layout shifts Disable the button during loading to prevent multiple submissions Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Use a primary button for the main action on a page Keep button labels concise and action-oriented Maintain consistent button styling throughout the application Ensure sufficient contrast between button text and background Group related buttons together Don&amp;#039;ts Use too many primary buttons on a single page Place multiple buttons with equal visual weight next to each other Use overly generic labels like &amp;amp;quot;Click Here&amp;amp;quot; or &amp;amp;quot;Submit&amp;amp;quot; Create custom button styles that don&amp;#039;t match the design system Put too much text on a button",
        "description": "Design specifications and guidelines for the Button component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button Code",
        "url": "/components/all/button/code/",
        "content": "Button Code Implementation The Button component is available in various frameworks and can be implemented using the code examples below. HTML Implementation &amp;amp;lt;!-- Primary Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Primary Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Secondary Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-secondary&amp;quot;&amp;gt;Secondary Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Tertiary Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-tertiary&amp;quot;&amp;gt;Tertiary Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Danger Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-danger&amp;quot;&amp;gt;Danger Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Ghost Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-ghost&amp;quot;&amp;gt;Ghost Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Button with Left Icon --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;btn-icon btn-icon-left&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; Button with Icon &amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Button with Right Icon --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt; Next &amp;amp;lt;svg class=&amp;quot;btn-icon btn-icon-right&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Icon-only Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-icon-only&amp;quot; aria-label=&amp;quot;Settings&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Disabled Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; disabled&amp;gt;Disabled Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Full-width Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-full-width&amp;quot;&amp;gt;Full-width Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Small Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-sm&amp;quot;&amp;gt;Small Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Large Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-lg&amp;quot;&amp;gt;Large Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Extra Large Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-xl&amp;quot;&amp;gt;Extra Large Button&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Loading Button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-loading&amp;quot; disabled&amp;gt; &amp;amp;lt;span class=&amp;quot;btn-spinner&amp;quot;&amp;gt;&amp;amp;lt;/span&amp;gt; &amp;amp;lt;span class=&amp;quot;btn-text&amp;quot;&amp;gt;Loading...&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; CSS .btn { display: inline-flex; align-items: center; justify-content: center; font-family: inherit; font-weight: 500; font-size: 0.875rem; line-height: 1.5; text-align: center; text-decoration: none; vertical-align: middle; cursor: pointer; user-select: none; border: 1px solid transparent; padding: 0.5rem 1rem; border-radius: 0.25rem; transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out; } .btn:focus { outline: 0; box-shadow: 0 0 0 0.25rem rgba(var(--color-primary-rgb), 0.25); } .btn:disabled, .btn.disabled { opacity: 0.65; pointer-events: none; } /* Button Variants */ .btn-primary { color: var(--color-white); background-color: var(--color-primary); border-color: var(--color-primary); } .btn-primary:hover { color: var(--color-white); background-color: var(--color-primary-dark); border-color: var(--color-primary-dark); } .btn-secondary { color: var(--color-primary); background-color: var(--color-white); border-color: var(--color-primary); } .btn-secondary:hover { color: var(--color-primary); background-color: var(--color-primary-light); border-color: var(--color-primary); } .btn-tertiary { color: var(--color-primary); background-color: transparent; border-color: transparent; } .btn-tertiary:hover { color: var(--color-primary-dark); background-color: var(--color-primary-light); } .btn-danger { color: var(--color-white); background-color: var(--color-error); border-color: var(--color-error); } .btn-danger:hover { color: var(--color-white); background-color: var(--color-error-dark); border-color: var(--color-error-dark); } .btn-ghost { color: var(--color-text); background-color: transparent; border-color: transparent; } .btn-ghost:hover { color: var(--color-text-dark); background-color: var(--color-gray-100); } /* Button Sizes */ .btn-sm { padding: 0.25rem 0.5rem; font-size: 0.75rem; border-radius: 0.2rem; height: 2rem; } .btn-lg { padding: 0.75rem 1.5rem; font-size: 1rem; border-radius: 0.3rem; height: 3rem; } .btn-xl { padding: 1rem 2rem; font-size: 1.125rem; border-radius: 0.3rem; height: 3.5rem; } /* Full-width Button */ .btn-full-width { display: block; width: 100%; } /* Icon Button */ .btn-icon { display: inline-flex; fill: currentColor; width: 1rem; height: 1rem; } .btn-icon-left { margin-right: 0.5rem; } .btn-icon-right { margin-left: 0.5rem; } .btn-icon-only { padding: 0.5rem; border-radius: 50%; line-height: 1; } /* Loading Button */ .btn-loading { position: relative; } .btn-spinner { display: inline-block; width: 1rem; height: 1rem; margin-right: 0.5rem; vertical-align: text-bottom; border: 0.2em solid currentColor; border-right-color: transparent; border-radius: 50%; animation: spinner-border .75s linear infinite; } @keyframes spinner-border { to { transform: rotate(360deg); } } JavaScript // Add event listeners to buttons document.querySelectorAll(&amp;#039;.btn&amp;#039;).forEach(button =&amp;gt; { button.addEventListener(&amp;#039;click&amp;#039;, function(event) { if (this.classList.contains(&amp;#039;btn-loading&amp;#039;)) { // Prevent multiple clicks on loading buttons event.preventDefault(); return; } // For buttons that trigger loading states if (this.dataset.loading === &amp;#039;true&amp;#039;) { this.classList.add(&amp;#039;btn-loading&amp;#039;); this.disabled = true; const originalText = this.innerHTML; this.innerHTML = ` &amp;amp;lt;span class=&amp;quot;btn-spinner&amp;quot;&amp;gt;&amp;amp;lt;/span&amp;gt; &amp;amp;lt;span class=&amp;quot;btn-text&amp;quot;&amp;gt;Loading...&amp;amp;lt;/span&amp;gt; `; // Simulate async operation setTimeout(() =&amp;gt; { this.classList.remove(&amp;#039;btn-loading&amp;#039;); this.disabled = false; this.innerHTML = originalText; }, 2000); } }); }); React Implementation import React, { useState } from &amp;#039;react&amp;#039;; import &amp;#039;./Button.css&amp;#039;; const Button = ({ children, type = &amp;#039;button&amp;#039;, variant = &amp;#039;primary&amp;#039;, size = &amp;#039;medium&amp;#039;, icon = null, iconPosition = &amp;#039;left&amp;#039;, fullWidth = false, isLoading = false, disabled = false, onClick, ...props }) =&amp;gt; { const handleClick = (event) =&amp;gt; { if (disabled || isLoading) return; if (onClick) onClick(event); }; const getButtonClasses = () =&amp;gt; { const classes = [&amp;#039;btn&amp;#039;, `btn-${variant}`]; if (size === &amp;#039;small&amp;#039;) classes.push(&amp;#039;btn-sm&amp;#039;); if (size === &amp;#039;large&amp;#039;) classes.push(&amp;#039;btn-lg&amp;#039;); if (size === &amp;#039;xlarge&amp;#039;) classes.push(&amp;#039;btn-xl&amp;#039;); if (fullWidth) classes.push(&amp;#039;btn-full-width&amp;#039;); if (isLoading) classes.push(&amp;#039;btn-loading&amp;#039;); if (icon &amp;amp;amp;&amp;amp;amp; !children) classes.push(&amp;#039;btn-icon-only&amp;#039;); return classes.join(&amp;#039; &amp;#039;); }; const renderIcon = () =&amp;gt; { if (!icon) return null; return ( &amp;amp;lt;span className={`btn-icon ${children ? `btn-icon-${iconPosition}` : &amp;#039;&amp;#039;}`}&amp;gt; {icon} &amp;amp;lt;/span&amp;gt; ); }; const renderContent = () =&amp;gt; { if (isLoading) { return ( &amp;amp;lt;&amp;gt; &amp;amp;lt;span className=&amp;quot;btn-spinner&amp;quot;&amp;gt;&amp;amp;lt;/span&amp;gt; &amp;amp;lt;span className=&amp;quot;btn-text&amp;quot;&amp;gt;Loading...&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/&amp;gt; ); } return ( &amp;amp;lt;&amp;gt; {icon &amp;amp;amp;&amp;amp;amp; iconPosition === &amp;#039;left&amp;#039; &amp;amp;amp;&amp;amp;amp; renderIcon()} {children &amp;amp;amp;&amp;amp;amp; &amp;amp;lt;span className=&amp;quot;btn-text&amp;quot;&amp;gt;{children}&amp;amp;lt;/span&amp;gt;} {icon &amp;amp;amp;&amp;amp;amp; iconPosition === &amp;#039;right&amp;#039; &amp;amp;amp;&amp;amp;amp; renderIcon()} &amp;amp;lt;/&amp;gt; ); }; return ( &amp;amp;lt;button type={type} className={getButtonClasses()} disabled={disabled || isLoading} onClick={handleClick} {...props} &amp;gt; {renderContent()} &amp;amp;lt;/button&amp;gt; ); }; export default Button; Usage // Primary Button &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot;&amp;gt;Primary Button&amp;amp;lt;/Button&amp;gt; // Secondary Button &amp;amp;lt;Button variant=&amp;quot;secondary&amp;quot;&amp;gt;Secondary Button&amp;amp;lt;/Button&amp;gt; // Button with Icon &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; icon={&amp;amp;lt;ArrowRightIcon /&amp;gt;} iconPosition=&amp;quot;right&amp;quot; &amp;gt; Next &amp;amp;lt;/Button&amp;gt; // Icon-only Button &amp;amp;lt;Button variant=&amp;quot;ghost&amp;quot; icon={&amp;amp;lt;SettingsIcon /&amp;gt;} aria-label=&amp;quot;Settings&amp;quot; /&amp;gt; // Loading Button &amp;amp;lt;Button isLoading={true}&amp;gt;Submit&amp;amp;lt;/Button&amp;gt; // Full-width Button &amp;amp;lt;Button variant=&amp;quot;primary&amp;quot; fullWidth={true}&amp;gt; Save Changes &amp;amp;lt;/Button&amp;gt; Accessibility Considerations in Code Always use the appropriate semantic element: Use &amp;amp;lt;button&amp;amp;gt; for actions on the same page Use &amp;amp;lt;a&amp;amp;gt; for navigation to a new page Never use a &amp;amp;lt;div&amp;amp;gt; or &amp;amp;lt;span&amp;amp;gt; styled as a button Include proper ARIA attributes when necessary: Add aria-label for icon-only buttons Use aria-pressed for toggle buttons Set aria-busy=&amp;amp;quot;true&amp;amp;quot; and aria-live=&amp;amp;quot;polite&amp;amp;quot; for loading buttons Ensure keyboard accessibility: Buttons should be focusable and operable with the keyboard Test keyboard functionality for custom button implementations Make loading states perceivable: Include both visual and textual indicators for loading states Use aria-live regions to announce state changes Customization Options The Button component can be customized with the following props: Prop Type Default Description variant string &amp;#039;primary&amp;#039; Button variant: &amp;#039;primary&amp;#039;, &amp;#039;secondary&amp;#039;, &amp;#039;tertiary&amp;#039;, &amp;#039;danger&amp;#039;, &amp;#039;ghost&amp;#039; size string &amp;#039;medium&amp;#039; Button size: &amp;#039;small&amp;#039;, &amp;#039;medium&amp;#039;, &amp;#039;large&amp;#039;, &amp;#039;xlarge&amp;#039; icon node null Icon element to display within the button iconPosition string &amp;#039;left&amp;#039; Position of the icon: &amp;#039;left&amp;#039; or &amp;#039;right&amp;#039; fullWidth boolean false Whether the button should take up the full width of its container isLoading boolean false Whether to show a loading spinner disabled boolean false Whether the button is disabled",
        "description": "Implementation guidelines for the Button component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Component Documentation Guide",
        "url": "/guides/component-documentation/",
        "content": "Component Documentation Guide This guide outlines the standardized structure and process for creating or migrating component documentation within the Enterprise Design System (EDS) documentation platform. Component Structure All components in the EDS documentation follow a standardized structure consisting of: Main Component Page: Overview and general information Four Tab Pages: Design: Visual specifications and guidelines Code: Implementation details and examples Accessibility: Accessibility requirements and best practices Examples: Interactive examples and use cases Directory Structure Components should be organized following this directory structure: src/ └── components/ └── all/ └── [component-name]/ ├── index.md (Main component page) ├── design/ │ └── index.md (Design guidelines) ├── code/ │ └── index.md (Code implementation) ├── accessibility/ │ └── index.md (Accessibility guidelines) └── examples/ └── index.md (Usage examples) Creating Component Documentation 1. Main Component Page (index.md) The main component page should include: Component name (title) Brief description Overview Types/variants When to use Best practices Related components Links to the four tab pages Template: --- layout: layouts/component.njk title: [Component Name] description: [Brief description of the component] tags: allComponents --- # [Component Name] [Brief description of the component] ## Overview [General information and purpose of the component] ## Types - **[Type 1]**: [Description] - **[Type 2]**: [Description] - **[Type 3]**: [Description] ## When to Use - [Use case 1] - [Use case 2] - [Use case 3] ## Best Practices - [Best practice 1] - [Best practice 2] - [Best practice 3] ## Related Components - [Related component 1](/components/all/[related-component-1]/) - [Related component 2](/components/all/[related-component-2]/) ## Tabs - [Design](design/) - [Code](code/) - [Accessibility](accessibility/) - [Examples](examples/) 2. Design Tab (design/index.md) The design tab should include: Anatomy Visual design specifications Colors Typography Sizing and spacing States Variations Do&amp;#039;s and don&amp;#039;ts Template: --- layout: layouts/component.njk title: [Component Name] Design description: Design guidelines for the [Component Name] component --- # [Component Name] Design Guidelines ## Anatomy [Description of component parts and structure] ## Visual Design ### Colors [Color specifications] ### Typography [Typography specifications] ### Sizing and Spacing [Sizing and spacing specifications] ## States [Interactive states documentation] ## Variations [Component variations documentation] ## Design Do&amp;#039;s and Don&amp;#039;ts ### Do&amp;#039;s - [Design recommendation 1] - [Design recommendation 2] ### Don&amp;#039;ts - [Design warning 1] - [Design warning 2] 3. Code Tab (code/index.md) The code tab should include: HTML implementation CSS JavaScript (if applicable) Framework-specific implementations (React, Vue, etc.) Usage examples Accessibility considerations Customization options Template: --- layout: layouts/component.njk title: [Component Name] Code description: Implementation guidelines for the [Component Name] component --- # [Component Name] Code Implementation [Brief introduction to implementing the component] ## HTML Implementation ```html [HTML code example] CSS [CSS code example] JavaScript [JavaScript code example] React Implementation [React code example] Usage [Usage examples] Accessibility Considerations in Code [Accessibility implementation details] Customization Options [Customization documentation with table of properties] ### 4. Accessibility Tab (`accessibility/index.md`) The accessibility tab should include: - WCAG compliance requirements - Implementation requirements - Keyboard support - Screen reader considerations - Testing guidelines - Common issues to avoid **Template:** ```markdown --- layout: layouts/component.njk title: [Component Name] Accessibility description: Accessibility guidelines for the [Component Name] component --- # [Component Name] Accessibility Guidelines [Brief introduction to accessibility for this component] ## WCAG Compliance [WCAG success criteria] ## Implementation Requirements [Implementation details for accessibility] ## Keyboard Accessibility [Keyboard support documentation] ## Screen Reader Considerations [Screen reader support documentation] ## Testing Guidelines [How to test accessibility] ## Common Accessibility Issues to Avoid [List of common issues] 5. Examples Tab (examples/index.md) The examples tab should include: Basic examples Advanced examples Interactive examples Use case demonstrations Code samples with visual results Template: --- layout: layouts/component.njk title: [Component Name] Examples description: Examples of the [Component Name] component in various contexts --- # [Component Name] Examples [Brief introduction to the examples section] ## Basic Examples [Basic examples with code and visual representation] ## Advanced Examples [Advanced examples with code and visual representation] ## Use Case Examples [Use case specific examples] Migrating Legacy Documentation When migrating component documentation from legacy systems: Follow the standardized structure outlined above Convert all HTML or Nunjucks content to Markdown Update references to design tokens and variables Ensure all code examples are up-to-date Add any missing sections required by the new structure Optimize images and other assets Component Categories Components should be categorized under one of these groups within the &amp;amp;quot;All Components&amp;amp;quot; section: Layout Components: Components that define structure and layout Navigation Components: Components used for navigation Form Components: Components used in forms and user input Feedback Components: Components that provide feedback to users Content Components: Components for displaying content Best Practices for Documentation Be concise: Keep documentation clear and to the point Use examples: Provide practical examples for each concept Show visuals: Include screenshots, diagrams, or live examples Maintain consistency: Use consistent terminology and style Link related content: Cross-reference related components and concepts Keep code examples simple: Focus on the core concepts in examples Consider beginners: Assume minimal prior knowledge Update regularly: Keep documentation in sync with component changes Component Status Include the component&amp;#039;s current status in the main page: Production Ready: Fully tested and ready for use in production Beta: Feature complete, but may still undergo changes In Development: Currently being developed and not ready for production use Deprecated: Still supported but scheduled for replacement Documentation Review Process All component documentation should go through the following review process: Technical review by developers Design review by designers Accessibility review by accessibility experts Content review by technical writers Final approval by documentation team lead",
        "description": "Guidelines for creating and migrating component documentation in the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Content Migration Guide",
        "url": "/guides/migration-guide/",
        "content": "Content Migration Guide This guide provides a comprehensive approach to migrating legacy documentation from various sources into the unified Enterprise Design System (EDS) documentation platform. Migration Overview The migration process involves transferring documentation from multiple legacy sources into a standardized 11ty-based documentation system. Each piece of content needs to be converted to Markdown format, organized according to the established structure, and enhanced with proper metadata. Migration Process Step 1: Identify Source Material Catalog existing documentation: Document the URLs/locations of all legacy documentation Note the content type (component, guide, pattern, etc.) Identify the format (HTML, PDF, Nunjucks, etc.) Document any dependencies or related content Prioritize content for migration: Start with frequently used components Prioritize critical documentation Group related content to migrate together Step 2: Prepare for Migration Create destination structure: Set up appropriate directory structure in the 11ty platform Establish clear naming conventions Prepare any required templates Set up migration tools: Configure the migration utilities in /scripts/migration Update any configuration in scripts/migration-config.js Test the migration pipeline with sample content Step 3: Perform Content Migration For Component Documentation Follow the Component Documentation Guide and ensure all components have: Main index page with general information Four standardized tabs: Design Code Accessibility Examples Use this directory structure: src/ └── components/ └── all/ └── [component-name]/ ├── index.md ├── design/ │ └── index.md ├── code/ │ └── index.md ├── accessibility/ │ └── index.md └── examples/ └── index.md For Guide/Article Documentation Convert to Markdown format Add proper frontmatter metadata Place in appropriate directory structure Update internal links Optimize and migrate any associated assets Step 4: Content Enhancement During migration, enhance the documentation by: Improving structure: Add clear headings and subheadings Use consistent section organization Ensure logical content flow Enhancing metadata: Add descriptive titles and descriptions Include proper tagging for search Add related content links Updating examples: Ensure code examples follow current best practices Add interactive examples where possible Include accessible examples Step 5: Quality Assurance After migration, perform these quality checks: Content review: Verify all content has been migrated Check for any missing sections Review for outdated information Technical validation: Test all internal links Ensure all code examples work Verify images and assets load properly Accessibility check: Ensure content follows accessibility guidelines Check contrast and readability Verify proper heading structure Migration Tools The EDS documentation platform includes several tools to assist with migration: HTML to Markdown Converter Located at src/utils/migration/html-to-md.js, this utility converts HTML documentation to Markdown format. // Example usage const { convertHtmlToMd } = require(&amp;#039;../utils/migration/html-to-md&amp;#039;); // Convert an HTML file to Markdown await convertHtmlToMd(&amp;#039;path/to/source.html&amp;#039;, &amp;#039;path/to/destination.md&amp;#039;, { siteType: &amp;#039;confluence&amp;#039;, // or &amp;#039;sharepoint&amp;#039;, &amp;#039;jira&amp;#039;, &amp;#039;wordpress&amp;#039;, etc. preserveHeadingLevels: true, includeTableOfContents: true }); Nunjucks to Markdown Converter Located at src/utils/njk-to-md.js, this utility converts Nunjucks templates to Markdown. // Example usage const { convertNjkToMd } = require(&amp;#039;../utils/njk-to-md&amp;#039;); // Convert a Nunjucks file to Markdown await convertNjkToMd(&amp;#039;path/to/source.njk&amp;#039;, &amp;#039;path/to/destination.md&amp;#039;, { data: {}, // Optional data to pass to the template preserveComponents: true }); XML to Markdown Converter Located at src/utils/migration/xml-to-md.js, this utility converts XML-based documentation (like DITA or DocBook) to Markdown. // Example usage const { convertXmlToMd } = require(&amp;#039;../utils/migration/xml-to-md&amp;#039;); // Convert an XML file to Markdown await convertXmlToMd(&amp;#039;path/to/source.xml&amp;#039;, &amp;#039;path/to/destination.md&amp;#039;, { xmlType: &amp;#039;dita&amp;#039;, // or &amp;#039;docbook&amp;#039;, &amp;#039;generic&amp;#039; preserveStructure: true }); Markdown Formatter Located at src/utils/migration/md-formatter.js, this utility formats and normalizes Markdown content. // Example usage const { formatMarkdown } = require(&amp;#039;../utils/migration/md-formatter&amp;#039;); // Format a Markdown file await formatMarkdown(&amp;#039;path/to/source.md&amp;#039;, &amp;#039;path/to/destination.md&amp;#039;, { fixHeadingLevels: true, applyEdsStyles: true }); Quick Migration Script For bulk migration, use the Quick Migration script located at scripts/quick-migrate.js. # Run from project root node scripts/quick-migrate.js --source=/path/to/source --dest=/path/to/destination Common Migration Challenges Content Structure Differences Challenge: Legacy documentation may have inconsistent or different structure than the new system. Solution: Map legacy document sections to new structure Create templates for common content types Use migration utilities with custom transformations Formatting and Styling Conversion Challenge: Legacy formatting may not convert cleanly to Markdown. Solution: Use the Markdown formatter to clean up converted content Create custom transformations for special cases Manual review and touch-up for complex formatting Media and Asset Management Challenge: Images, videos, and other assets need to be migrated and referenced correctly. Solution: Copy all assets to the appropriate src/assets directory Update references in Markdown content Optimize images during migration Consider using asset processors for automated handling Code Examples Update Challenge: Code examples may be outdated or use deprecated patterns. Solution: Review and update code examples during migration Use linters to check code quality Standardize code formatting Best Practices for Migration Migrate in batches: Group related content and migrate together Test thoroughly: Verify each piece of content after migration Update links: Ensure all internal links are updated to new paths Preserve IDs: Maintain important IDs for bookmarking and linking Track progress: Maintain a migration log to track status Document decisions: Keep a record of migration decisions for reference Post-Migration Activities Create redirects: Set up redirects from old URLs to new locations Update search indexes: Ensure new content is indexed for search Gather feedback: Get user feedback on migrated content Continuous improvement: Iteratively enhance migrated content Support and Resources For support with the migration process: Check the migration utilities documentation Use the example migrations in /example-files Run test migrations with npm run migrate:test Contact the documentation team for assistance",
        "description": "Guidelines for migrating legacy documentation to the Enterprise Design System documentation platform",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Documentation Guides",
        "url": "/guides/",
        "content": "Documentation Guides Welcome to the Enterprise Design System (EDS) Documentation Guides. These guides provide detailed instructions and best practices for creating, maintaining, and migrating content within the EDS documentation platform. Available Guides Component Documentation Guide This guide explains the standardized structure and process for creating component documentation within the EDS platform. It covers: Standardized component structure with four tabs (design, code, accessibility, examples) Templates and examples for creating consistent documentation Best practices for documenting components Quality guidelines and review process Content Migration Guide This guide provides a comprehensive approach to migrating legacy documentation from various sources into the unified EDS documentation platform. It covers: Migration process overview Tools and utilities for content migration Handling different source formats (HTML, Nunjucks, XML, etc.) Quality assurance for migrated content Common migration challenges and solutions Using These Guides Each guide is designed to be a comprehensive resource for a specific aspect of the documentation system. They provide: Step-by-step instructions: Clear procedural guidance for common tasks Templates and examples: Ready-to-use templates that follow best practices Best practices: Recommendations based on experience and industry standards Common challenges: Solutions to frequently encountered issues Contributing to the Guides These guides are living documents that evolve with the EDS documentation platform. If you would like to contribute: Review the existing content for areas that need improvement Follow the existing style and structure Include practical examples that demonstrate concepts Submit updates through the standard documentation workflow Additional Resources In addition to these guides, you can find more resources in: Migration Tools Documentation Component Templates Example Migrations Need Help? If you need assistance or have questions about the documentation platform, please contact the documentation team through the Support channels. Component Documentation Guide Learn how to create standardized component documentation with examples and templates. Read Guide → Content Migration Guide Detailed instructions for migrating content from legacy systems to the EDS documentation platform. Read Guide →",
        "description": "Comprehensive guides for using and contributing to the Enterprise Design System documentation",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button Accessibility",
        "url": "/components/all/button/accessibility/",
        "content": "Button Accessibility Guidelines Buttons are one of the most common interactive elements in interfaces, making their accessibility particularly important. This guide outlines how to create accessible button implementations. WCAG Compliance The Button component should comply with the following WCAG 2.1 success criteria: 1.4.1 Use of Color (Level A): Color is not used as the only visual means of conveying information 1.4.3 Contrast (Level AA): Text has sufficient contrast against background (minimum 4.5:1 ratio) 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface 2.4.7 Focus Visible (Level AA): Keyboard focus indicator is visible 2.5.3 Label in Name (Level A): Visual label text is included in the accessible name 4.1.2 Name, Role, Value (Level A): Button has appropriate role and state information Implementation Requirements Proper Semantic Structure Use the native HTML &amp;amp;lt;button&amp;amp;gt; element for actions within the current page Use the native HTML &amp;amp;lt;a&amp;amp;gt; element for navigation to other pages Always specify a type attribute for buttons in forms (e.g., type=&amp;amp;quot;button&amp;amp;quot;, type=&amp;amp;quot;submit&amp;amp;quot;) Never use non-interactive elements (like &amp;amp;lt;div&amp;amp;gt; or &amp;amp;lt;span&amp;amp;gt;) styled as buttons &amp;amp;lt;!-- Correct: Using a button element for an action --&amp;gt; &amp;amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Save Changes&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Correct: Using an anchor for navigation --&amp;gt; &amp;amp;lt;a href=&amp;quot;/settings&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Go to Settings&amp;amp;lt;/a&amp;gt; &amp;amp;lt;!-- Incorrect: Using a div as a button --&amp;gt; &amp;amp;lt;div class=&amp;quot;btn btn-primary&amp;quot; onclick=&amp;quot;saveChanges()&amp;quot;&amp;gt;Save Changes&amp;amp;lt;/div&amp;gt; Accessible Names Provide clear, descriptive text for buttons that indicates the action it performs For icon-only buttons, include text with aria-label or visually hidden text Ensure that any visually hidden text is appropriately communicated to screen readers &amp;amp;lt;!-- Icon-only button with aria-label --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-icon-only&amp;quot; aria-label=&amp;quot;Close dialog&amp;quot;&amp;gt; &amp;amp;lt;svg aria-hidden=&amp;quot;true&amp;quot; focusable=&amp;quot;false&amp;quot;&amp;gt;&amp;amp;lt;!-- icon --&amp;gt;&amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Icon-only button with visually hidden text --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-icon-only&amp;quot;&amp;gt; &amp;amp;lt;svg aria-hidden=&amp;quot;true&amp;quot; focusable=&amp;quot;false&amp;quot;&amp;gt;&amp;amp;lt;!-- icon --&amp;gt;&amp;amp;lt;/svg&amp;gt; &amp;amp;lt;span class=&amp;quot;visually-hidden&amp;quot;&amp;gt;Close dialog&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Keyboard Accessibility Ensure all buttons are focusable and operable with a keyboard Maintain logical tab order Provide visible focus styles that meet contrast requirements For custom buttons, ensure Enter and Space keys trigger the action /* Focus styles with sufficient contrast */ .btn:focus { outline: 2px solid var(--color-focus); /* High contrast color */ outline-offset: 2px; } /* For Windows High Contrast Mode */ @media (forced-colors: active) { .btn:focus { outline: 2px solid ButtonText; } } State Communication Clearly indicate different button states (disabled, loading, active) Use aria-disabled=&amp;amp;quot;true&amp;amp;quot; for visually disabled buttons that should remain in the tab order Use the disabled attribute for buttons that should be removed from the tab order For loading states, use aria-busy=&amp;amp;quot;true&amp;amp;quot; and consider aria-live to announce status changes &amp;amp;lt;!-- Disabled button removed from tab order --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; disabled&amp;gt;Submit&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Visually disabled but focusable button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; aria-disabled=&amp;quot;true&amp;quot;&amp;gt;Submit&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Loading button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-loading&amp;quot; aria-busy=&amp;quot;true&amp;quot;&amp;gt; &amp;amp;lt;span class=&amp;quot;btn-spinner&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt;&amp;amp;lt;/span&amp;gt; &amp;amp;lt;span&amp;gt;Loading...&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Touch Targets Ensure buttons have adequate touch target size (minimum 44×44 pixels) Provide sufficient spacing between buttons to prevent accidental activation For small buttons, consider increasing the touch target area using padding .btn { min-height: 44px; min-width: 44px; padding: 8px 16px; } /* For very small icon buttons, extend the touch target */ .btn-icon-small { position: relative; width: 24px; height: 24px; } .btn-icon-small::before { content: &amp;quot;&amp;quot;; position: absolute; top: -10px; right: -10px; bottom: -10px; left: -10px; } Color and Contrast Ensure text and background color combinations meet WCAG AA contrast ratio of 4.5:1 Do not use color alone to indicate button types or states Include additional indicators for states (icons, text, borders) Test buttons in high contrast mode &amp;amp;lt;!-- Good: Using both color and icon to convey error state --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-danger&amp;quot;&amp;gt; &amp;amp;lt;svg aria-hidden=&amp;quot;true&amp;quot; focusable=&amp;quot;false&amp;quot;&amp;gt;&amp;amp;lt;!-- warning icon --&amp;gt;&amp;amp;lt;/svg&amp;gt; Delete Account &amp;amp;lt;/button&amp;gt; Screen Reader Considerations Test with popular screen readers (NVDA, JAWS, VoiceOver) Ensure icons within buttons have aria-hidden=&amp;amp;quot;true&amp;amp;quot; and focusable=&amp;amp;quot;false&amp;amp;quot; For toggle buttons, use aria-pressed to indicate state For buttons that expand/collapse content, use aria-expanded &amp;amp;lt;!-- Toggle button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-toggle&amp;quot; aria-pressed=&amp;quot;false&amp;quot;&amp;gt;Dark Mode&amp;amp;lt;/button&amp;gt; &amp;amp;lt;!-- Expand/collapse button --&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-expand&amp;quot; aria-expanded=&amp;quot;false&amp;quot; aria-controls=&amp;quot;content-panel&amp;quot;&amp;gt; Show Details &amp;amp;lt;/button&amp;gt; Testing Guidelines Keyboard Testing Tab to the button using the keyboard Verify the focus state is clearly visible Press Enter or Space to activate the button Verify the button action is triggered Screen Reader Testing Navigate to the button using screen reader commands Verify the button&amp;#039;s name is announced correctly Verify the button&amp;#039;s role is announced correctly Verify any state information (pressed, expanded, etc.) is announced Activate the button and verify the result is announced appropriately Additional Tests Test with browser zoom at 200% Test with high contrast mode Test on mobile devices with screen readers Test with voice recognition software Common Accessibility Issues to Avoid Using non-semantic elements (&amp;amp;lt;div&amp;amp;gt;, &amp;amp;lt;span&amp;amp;gt;) as buttons Creating buttons with poor color contrast Making small buttons that are difficult to target Using ambiguous button text like &amp;amp;quot;Click Here&amp;amp;quot; or &amp;amp;quot;Submit&amp;amp;quot; Forgetting to include labels for icon-only buttons Removing focus styles Creating custom buttons that don&amp;#039;t support keyboard activation Not communicating loading or disabled states to screen readers",
        "description": "Accessibility guidelines for the Button component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Button Examples",
        "url": "/components/all/button/examples/",
        "content": "Button Examples Below are various examples of the Button component in different contexts and configurations. Button Variants Primary Button &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Primary Button&amp;amp;lt;/button&amp;gt; Primary Button Secondary Button &amp;amp;lt;button class=&amp;quot;btn btn-secondary&amp;quot;&amp;gt;Secondary Button&amp;amp;lt;/button&amp;gt; Secondary Button Tertiary Button &amp;amp;lt;button class=&amp;quot;btn btn-tertiary&amp;quot;&amp;gt;Tertiary Button&amp;amp;lt;/button&amp;gt; Tertiary Button Danger Button &amp;amp;lt;button class=&amp;quot;btn btn-danger&amp;quot;&amp;gt;Danger Button&amp;amp;lt;/button&amp;gt; Danger Button Ghost Button &amp;amp;lt;button class=&amp;quot;btn btn-ghost&amp;quot;&amp;gt;Ghost Button&amp;amp;lt;/button&amp;gt; Ghost Button Button Sizes Small Button &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-sm&amp;quot;&amp;gt;Small Button&amp;amp;lt;/button&amp;gt; Small Button Medium Button (Default) &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Medium Button&amp;amp;lt;/button&amp;gt; Medium Button Large Button &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-lg&amp;quot;&amp;gt;Large Button&amp;amp;lt;/button&amp;gt; Large Button Extra Large Button &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-xl&amp;quot;&amp;gt;Extra Large Button&amp;amp;lt;/button&amp;gt; Extra Large Button Button with Icons Button with Left Icon &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;btn-icon btn-icon-left&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0zM4.5 7.5a.5.5 0 0 0 0 1h5.793l-2.147 2.146a.5.5 0 0 0 .708.708l3-3a.5.5 0 0 0 0-.708l-3-3a.5.5 0 1 0-.708.708L10.293 7.5H4.5z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; Button with Icon &amp;amp;lt;/button&amp;gt; Button with Icon Button with Right Icon &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt; Next &amp;amp;lt;svg class=&amp;quot;btn-icon btn-icon-right&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; Next Icon-only Button &amp;amp;lt;button class=&amp;quot;btn btn-icon-only&amp;quot; aria-label=&amp;quot;Settings&amp;quot;&amp;gt; &amp;amp;lt;svg xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M9.405 1.05c-.413-1.4-2.397-1.4-2.81 0l-.1.34a1.464 1.464 0 0 1-2.105.872l-.31-.17c-1.283-.698-2.686.705-1.987 1.987l.169.311c.446.82.023 1.841-.872 2.105l-.34.1c-1.4.413-1.4 2.397 0 2.81l.34.1a1.464 1.464 0 0 1 .872 2.105l-.17.31c-.698 1.283.705 2.686 1.987 1.987l.311-.169a1.464 1.464 0 0 1 2.105.872l.1.34c.413 1.4 2.397 1.4 2.81 0l.1-.34a1.464 1.464 0 0 1 2.105-.872l.31.17c1.283.698 2.686-.705 1.987-1.987l-.169-.311a1.464 1.464 0 0 1 .872-2.105l.34-.1c1.4-.413 1.4-2.397 0-2.81l-.34-.1a1.464 1.464 0 0 1-.872-2.105l.17-.31c.698-1.283-.705-2.686-1.987-1.987l-.311.169a1.464 1.464 0 0 1-2.105-.872l-.1-.34zM8 10.93a2.929 2.929 0 1 1 0-5.86 2.929 2.929 0 0 1 0 5.858z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; &amp;amp;lt;/button&amp;gt; Button States Disabled Button &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; disabled&amp;gt;Disabled Button&amp;amp;lt;/button&amp;gt; Disabled Button Loading Button &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-loading&amp;quot; disabled&amp;gt; &amp;amp;lt;span class=&amp;quot;btn-spinner&amp;quot;&amp;gt;&amp;amp;lt;/span&amp;gt; &amp;amp;lt;span class=&amp;quot;btn-text&amp;quot;&amp;gt;Loading...&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/button&amp;gt; Loading... Button Width Variations Full-width Button &amp;amp;lt;button class=&amp;quot;btn btn-primary btn-full-width&amp;quot;&amp;gt;Full-width Button&amp;amp;lt;/button&amp;gt; Full-width Button Button Groups Horizontal Button Group &amp;amp;lt;div class=&amp;quot;btn-group&amp;quot;&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Left&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Middle&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Right&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; Left Middle Right Vertical Button Group &amp;amp;lt;div class=&amp;quot;btn-group-vertical&amp;quot;&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Top&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Middle&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Bottom&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; Top Middle Bottom Common Use Cases Form Submit Button &amp;amp;lt;form&amp;gt; &amp;amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;email&amp;quot;&amp;gt;Email&amp;amp;lt;/label&amp;gt; &amp;amp;lt;input type=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; required /&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;password&amp;quot;&amp;gt;Password&amp;amp;lt;/label&amp;gt; &amp;amp;lt;input type=&amp;quot;password&amp;quot; id=&amp;quot;password&amp;quot; required /&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Sign In&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/form&amp;gt; Email Password Sign In Button with Modal Trigger &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; data-toggle=&amp;quot;modal&amp;quot; data-target=&amp;quot;#exampleModal&amp;quot;&amp;gt; Open Modal &amp;amp;lt;/button&amp;gt; &amp;amp;lt;div class=&amp;quot;modal&amp;quot; id=&amp;quot;exampleModal&amp;quot; tabindex=&amp;quot;-1&amp;quot; aria-labelledby=&amp;quot;exampleModalLabel&amp;quot; aria-hidden=&amp;quot;true&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;modal-dialog&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;modal-content&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;modal-header&amp;quot;&amp;gt; &amp;amp;lt;h5 class=&amp;quot;modal-title&amp;quot; id=&amp;quot;exampleModalLabel&amp;quot;&amp;gt;Modal title&amp;amp;lt;/h5&amp;gt; &amp;amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn-close&amp;quot; data-dismiss=&amp;quot;modal&amp;quot; aria-label=&amp;quot;Close&amp;quot;&amp;gt;&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;modal-body&amp;quot;&amp;gt; Modal content goes here... &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;modal-footer&amp;quot;&amp;gt; &amp;amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-secondary&amp;quot; data-dismiss=&amp;quot;modal&amp;quot;&amp;gt;Close&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Save changes&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Open Modal Toggle Button &amp;amp;lt;button class=&amp;quot;btn btn-primary&amp;quot; aria-pressed=&amp;quot;false&amp;quot; id=&amp;quot;darkModeToggle&amp;quot;&amp;gt; &amp;amp;lt;svg class=&amp;quot;btn-icon btn-icon-left&amp;quot; xmlns=&amp;quot;http://www.w3.org/2000/svg&amp;quot; width=&amp;quot;16&amp;quot; height=&amp;quot;16&amp;quot; viewBox=&amp;quot;0 0 16 16&amp;quot; fill=&amp;quot;currentColor&amp;quot;&amp;gt; &amp;amp;lt;path d=&amp;quot;M8 11a3 3 0 1 1 0-6 3 3 0 0 1 0 6zm0 1a4 4 0 1 0 0-8 4 4 0 0 0 0 8zM8 0a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 0zm0 13a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-1 0v-2A.5.5 0 0 1 8 13zm8-5a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2a.5.5 0 0 1 .5.5zM3 8a.5.5 0 0 1-.5.5h-2a.5.5 0 0 1 0-1h2A.5.5 0 0 1 3 8zm10.657-5.657a.5.5 0 0 1 0 .707l-1.414 1.415a.5.5 0 1 1-.707-.708l1.414-1.414a.5.5 0 0 1 .707 0zm-9.193 9.193a.5.5 0 0 1 0 .707L3.05 13.657a.5.5 0 0 1-.707-.707l1.414-1.414a.5.5 0 0 1 .707 0zm9.193 2.121a.5.5 0 0 1-.707 0l-1.414-1.414a.5.5 0 0 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .707zM4.464 4.465a.5.5 0 0 1-.707 0L2.343 3.05a.5.5 0 1 1 .707-.707l1.414 1.414a.5.5 0 0 1 0 .708z&amp;quot;/&amp;gt; &amp;amp;lt;/svg&amp;gt; Light Mode &amp;amp;lt;/button&amp;gt; Light Mode",
        "description": "Examples of the Button component in various contexts",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Components",
        "url": "/components/",
        "content": "Enterprise Design System Components Welcome to the Enterprise Design System (EDS) component library. This section contains all the components available in the design system, organized in different ways to help you find what you need. Component Sections All Components Browse the complete library of components in a single, comprehensive view. Components are organized by type (layout, navigation, form, feedback, content) for easy discovery. Component Categories Components are also organized into functional categories: Layout Components: Components that define the structure and layout of pages Navigation Components: Components used for navigation and wayfinding Feedback Components: Components used to provide feedback to users Input Components: Components used for user input and forms Getting Started with Components Each component in the library includes: Overview: General information and usage guidelines Design: Visual specifications and design guidelines Code: Implementation details with examples in HTML/CSS and JavaScript frameworks Accessibility: Guidelines to ensure components are accessible to all users Examples: Interactive examples showing the component in various contexts Using the Component Library The component library is designed to help you: Find the right component for your specific needs Understand how to use it correctly in your design or implementation Copy code examples to implement the component in your project Ensure consistency across the enterprise by using standard components Looking for Something Specific? Use the search feature to find components by name or functionality Browse the All Components section to see everything at once Check out the component categories for functionally related components Need Help? If you can&amp;#039;t find what you&amp;#039;re looking for or need assistance with a component, please contact the design system team.",
        "description": "Enterprise Design System component library",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "All Components",
        "url": "/components/all/",
        "content": "All Components This page provides a comprehensive view of all components in the Enterprise Design System, organized by type. Layout Components Layout components help structure and organize content on a page. Accordion - Expandable containers for showing and hiding content Card - Containers for related content and actions Grid - Layout system for arranging content in rows and columns Container - Wrapper element that constrains content width Divider - Horizontal line that visually separates content Navigation Components Navigation components help users move through the interface. Breadcrumb - Shows the user&amp;#039;s current location in a hierarchical structure Menu - List of options that allow users to navigate Tabs - Organizes content into separate views Pagination - Helps navigate through multi-page content Feedback Components Feedback components communicate information to users about system status, errors, or notifications. Alert - Communicates important contextual feedback or information Progress - Shows the progress of an operation Toast - Temporary notification that appears and disappears Skeleton - Placeholder for content that is loading Input Components Input components allow users to enter data or interact with the interface. Button - Triggers an action when clicked Input - Single-line text field for user input Checkbox - Allows users to select multiple options Radio - Allows users to select a single option from a group Select - Dropdown selector for choosing from a list of options Textarea - Multi-line text input field Content Components Components for displaying and formatting content. Badge - Small count or status indicator Table - Displays tabular data Icon - Visual symbols for representing concepts and actions Typography - Text styling and formatting Utility Components Utility components that serve specific functional purposes. Modal - Dialog that appears over other content Tooltip - Small informational popup that appears on hover Popover - Displays additional content in a popup Recently Updated Components Alert - Updated with new accessibility guidelines and examples Button - Added new sizes and variants",
        "description": "Complete list of Enterprise Design System components",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Checkbox",
        "url": "/components/all/checkbox/",
        "content": "Checkbox A checkbox allows users to select one or more items from a set, or to mark an item as selected. Overview Checkboxes are form controls that allow users to select multiple options from a set or to toggle a single option on and off. Types Standard: Basic checkbox for selecting options Indeterminate: Represents a state that is neither checked nor unchecked, usually indicating that some but not all sub-items are selected Disabled: Non-interactive checkbox that cannot be toggled When to Use When users need to select multiple options from a list For binary choices like accepting terms and conditions When toggling a feature or setting on or off For a &amp;amp;quot;Select All&amp;amp;quot; option that controls a group of related checkboxes Best Practices Use clear and concise labels for checkboxes Group related checkboxes together Organize checkboxes logically with the most common options first Avoid using too many checkboxes in a single form Consider using checkboxes instead of toggle switches for binary options when saving a setting requires an explicit action Related Components Checkbox Group Radio Switch Toggle Tabs Design Code Accessibility Examples",
        "description": "A checkbox allows users to select one or more items from a set, or to mark an item as selected.",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Checkbox Design",
        "url": "/components/all/checkbox/design/",
        "content": "Checkbox Design Guidelines Anatomy The checkbox component consists of several key elements: Checkbox input: The actual control that toggles between checked and unchecked states Label: Text that describes the purpose of the checkbox Focus state: Visual indicator when the checkbox has keyboard focus Checkbox group container (optional): For grouping related checkboxes Visual Design Colors State Background Color Border Color Check Mark Color Default var(--color-white) var(--color-neutral-60) var(--color-primary) Hover var(--color-neutral-10) var(--color-neutral-70) var(--color-primary) Focus var(--color-white) var(--color-primary) var(--color-primary) Checked var(--color-primary) var(--color-primary) var(--color-white) Disabled Unchecked var(--color-neutral-20) var(--color-neutral-30) N/A Disabled Checked var(--color-neutral-30) var(--color-neutral-30) var(--color-neutral-50) Indeterminate var(--color-primary) var(--color-primary) var(--color-white) Typography Label: 16px/1rem, font-weight: 400 Label for required field: Include an asterisk (*) indicator Group label: 16px/1rem, font-weight: 600 Sizing and Spacing Checkbox size: 18px × 18px (1.125rem) Border radius: 2px (0.125rem) Border width: 1px Space between checkbox and label: 8px (0.5rem) Space between checkboxes in a group: 16px (1rem) Check mark icon size: 12px (0.75rem) States Default: Unchecked state Hover: Visual feedback when pointer is over the checkbox Focus: Visual indicator when the checkbox receives keyboard focus Checked: Selected state Indeterminate: Neither checked nor unchecked, typically used for &amp;amp;quot;select all&amp;amp;quot; checkboxes Disabled: Non-interactive state Error: Indicates validation issues (with appropriate messaging) Variations Standard Checkbox A single checkbox for toggling an option on or off. Required Checkbox Includes an asterisk to indicate the selection is required. Checkbox Group A collection of related checkboxes grouped together. Nested Checkbox Group Parent-child relationship between checkboxes, with indentation to show hierarchy. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Clearly label each checkbox with a descriptive text Group related checkboxes together Use consistent spacing between checkboxes in a group Consider keyboard accessibility in the visual design Use the indeterminate state for parent checkboxes in hierarchical selections Don&amp;#039;ts Create custom checkbox designs that don&amp;#039;t match platform expectations Place checkboxes too close together, making them difficult to select Use checkbox labels that are ambiguous or unclear Omit visual feedback for various states (hover, focus, etc.) Create oversized or undersized checkboxes that don&amp;#039;t match your design system",
        "description": "Design guidelines for the Checkbox component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Checkbox Code",
        "url": "/components/all/checkbox/code/",
        "content": "Checkbox Implementation HTML Structure &amp;amp;lt;!-- Basic Checkbox --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox1&amp;quot; name=&amp;quot;checkbox1&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox1&amp;quot;&amp;gt;Checkbox label&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;!-- Checkbox with Required State --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox2&amp;quot; name=&amp;quot;checkbox2&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; required&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox2&amp;quot;&amp;gt;Required checkbox &amp;amp;lt;span class=&amp;quot;required-indicator&amp;quot;&amp;gt;*&amp;amp;lt;/span&amp;gt;&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;!-- Disabled Checkbox --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox3&amp;quot; name=&amp;quot;checkbox3&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; disabled&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox3&amp;quot; class=&amp;quot;eds-label-disabled&amp;quot;&amp;gt;Disabled checkbox&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;!-- Checkbox Group --&amp;gt; &amp;amp;lt;fieldset class=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend&amp;gt;Select preferred contact methods:&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;contact-email&amp;quot; name=&amp;quot;contact&amp;quot; value=&amp;quot;email&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;contact-email&amp;quot;&amp;gt;Email&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;contact-phone&amp;quot; name=&amp;quot;contact&amp;quot; value=&amp;quot;phone&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;contact-phone&amp;quot;&amp;gt;Phone&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;contact-mail&amp;quot; name=&amp;quot;contact&amp;quot; value=&amp;quot;mail&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;contact-mail&amp;quot;&amp;gt;Mail&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; &amp;amp;lt;!-- Indeterminate Checkbox --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;select-all&amp;quot; name=&amp;quot;select-all&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;select-all&amp;quot;&amp;gt;Select all&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; CSS Implementation .checkbox-container { display: flex; align-items: center; margin-bottom: var(--spacing-3); } .eds-checkbox { appearance: none; -webkit-appearance: none; width: 18px; height: 18px; border: 1px solid var(--color-neutral-60); border-radius: 2px; margin: 0; background-color: var(--color-white); position: relative; cursor: pointer; transition: all 0.2s ease; } .eds-checkbox:hover { background-color: var(--color-neutral-10); border-color: var(--color-neutral-70); } .eds-checkbox:focus-visible { outline: 2px solid var(--color-primary); outline-offset: 2px; border-color: var(--color-primary); } .eds-checkbox:checked { background-color: var(--color-primary); border-color: var(--color-primary); } .eds-checkbox:checked::after { content: &amp;quot;&amp;quot;; display: block; position: absolute; top: 2px; left: 6px; width: 5px; height: 10px; border: solid white; border-width: 0 2px 2px 0; transform: rotate(45deg); } .eds-checkbox:disabled { background-color: var(--color-neutral-20); border-color: var(--color-neutral-30); cursor: not-allowed; } .eds-checkbox:disabled:checked { background-color: var(--color-neutral-30); } .eds-checkbox:disabled:checked::after { border-color: var(--color-neutral-50); } .eds-label-disabled { color: var(--color-neutral-60); cursor: not-allowed; } .checkbox-container label { margin-left: 8px; cursor: pointer; } .checkbox-container input:disabled + label { cursor: not-allowed; } .required-indicator { color: var(--color-error); margin-left: 2px; } .checkbox-group { border: none; padding: 0; margin: 0 0 var(--spacing-4) 0; } .checkbox-group legend { font-weight: 600; margin-bottom: var(--spacing-2); } JavaScript for Indeterminate State // Set indeterminate state for &amp;quot;Select All&amp;quot; checkbox const selectAllCheckbox = document.getElementById(&amp;#039;select-all&amp;#039;); const checkboxes = document.querySelectorAll(&amp;#039;input[name=&amp;quot;contact&amp;quot;]&amp;#039;); // Initialize the &amp;quot;Select All&amp;quot; checkbox state function updateSelectAllCheckbox() { const checkedCount = document.querySelectorAll(&amp;#039;input[name=&amp;quot;contact&amp;quot;]:checked&amp;#039;).length; if (checkedCount === 0) { selectAllCheckbox.checked = false; selectAllCheckbox.indeterminate = false; } else if (checkedCount === checkboxes.length) { selectAllCheckbox.checked = true; selectAllCheckbox.indeterminate = false; } else { selectAllCheckbox.indeterminate = true; } } // Add event listeners selectAllCheckbox.addEventListener(&amp;#039;change&amp;#039;, function() { const isChecked = this.checked; checkboxes.forEach(checkbox =&amp;gt; { checkbox.checked = isChecked; }); updateSelectAllCheckbox(); }); checkboxes.forEach(checkbox =&amp;gt; { checkbox.addEventListener(&amp;#039;change&amp;#039;, updateSelectAllCheckbox); }); // Initial state check updateSelectAllCheckbox(); React Implementation import React, { useState, useEffect } from &amp;#039;react&amp;#039;; import &amp;#039;./Checkbox.css&amp;#039;; // Single Checkbox Component const Checkbox = ({ id, label, disabled, required, checked, onChange }) =&amp;gt; { return ( &amp;amp;lt;div className=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id={id} name={id} className=&amp;quot;eds-checkbox&amp;quot; disabled={disabled} required={required} checked={checked} onChange={onChange} /&amp;gt; &amp;amp;lt;label htmlFor={id}&amp;gt; {label} {required &amp;amp;amp;&amp;amp;amp; &amp;amp;lt;span className=&amp;quot;required-indicator&amp;quot;&amp;gt;*&amp;amp;lt;/span&amp;gt;} &amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; ); }; // Checkbox Group Component const CheckboxGroup = ({ legend, options, onChange }) =&amp;gt; { const [selectedOptions, setSelectedOptions] = useState([]); const [selectAllState, setSelectAllState] = useState({ checked: false, indeterminate: false }); useEffect(() =&amp;gt; { // Update select all state based on selected options if (selectedOptions.length === 0) { setSelectAllState({ checked: false, indeterminate: false }); } else if (selectedOptions.length === options.length) { setSelectAllState({ checked: true, indeterminate: false }); } else { setSelectAllState({ checked: false, indeterminate: true }); } }, [selectedOptions, options.length]); useEffect(() =&amp;gt; { // Update the indeterminate property using a ref (cannot be set via React props) const selectAllCheckbox = document.getElementById(&amp;#039;select-all&amp;#039;); if (selectAllCheckbox) { selectAllCheckbox.indeterminate = selectAllState.indeterminate; } }, [selectAllState]); const handleCheckboxChange = (value) =&amp;gt; { setSelectedOptions(prev =&amp;gt; { if (prev.includes(value)) { return prev.filter(item =&amp;gt; item !== value); } else { return [...prev, value]; } }); }; const handleSelectAllChange = (e) =&amp;gt; { const isChecked = e.target.checked; if (isChecked) { setSelectedOptions(options.map(option =&amp;gt; option.value)); } else { setSelectedOptions([]); } }; return ( &amp;amp;lt;&amp;gt; &amp;amp;lt;div className=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;select-all&amp;quot; className=&amp;quot;eds-checkbox&amp;quot; checked={selectAllState.checked} onChange={handleSelectAllChange} /&amp;gt; &amp;amp;lt;label htmlFor=&amp;quot;select-all&amp;quot;&amp;gt;Select All&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;fieldset className=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend&amp;gt;{legend}&amp;amp;lt;/legend&amp;gt; {options.map((option) =&amp;gt; ( &amp;amp;lt;Checkbox key={option.id} id={option.id} label={option.label} disabled={option.disabled} checked={selectedOptions.includes(option.value)} onChange={() =&amp;gt; handleCheckboxChange(option.value)} /&amp;gt; ))} &amp;amp;lt;/fieldset&amp;gt; &amp;amp;lt;/&amp;gt; ); }; export { Checkbox, CheckboxGroup }; Usage Examples Basic Checkbox &amp;amp;lt;Checkbox id=&amp;quot;terms&amp;quot; label=&amp;quot;I accept the terms and conditions&amp;quot; onChange={(e) =&amp;gt; console.log(e.target.checked)} /&amp;gt; Required Checkbox &amp;amp;lt;Checkbox id=&amp;quot;privacy&amp;quot; label=&amp;quot;I acknowledge the privacy policy&amp;quot; required={true} onChange={(e) =&amp;gt; console.log(e.target.checked)} /&amp;gt; Checkbox Group const contactOptions = [ { id: &amp;#039;contact-email&amp;#039;, value: &amp;#039;email&amp;#039;, label: &amp;#039;Email&amp;#039; }, { id: &amp;#039;contact-phone&amp;#039;, value: &amp;#039;phone&amp;#039;, label: &amp;#039;Phone&amp;#039; }, { id: &amp;#039;contact-mail&amp;#039;, value: &amp;#039;mail&amp;#039;, label: &amp;#039;Mail&amp;#039; } ]; &amp;amp;lt;CheckboxGroup legend=&amp;quot;Select preferred contact methods:&amp;quot; options={contactOptions} onChange={(selected) =&amp;gt; console.log(selected)} /&amp;gt; Accessibility Considerations Ensure all checkbox inputs have associated labels Use fieldset and legend for checkbox groups Maintain sufficient color contrast for all states Support keyboard navigation and focus states Include ARIA attributes when necessary For custom checkboxes, ensure they work with screen readers",
        "description": "Implementation guidelines for the Checkbox component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Checkbox Accessibility",
        "url": "/components/all/checkbox/accessibility/",
        "content": "Checkbox Accessibility Guidelines Overview Checkboxes are a fundamental form control that must be accessible to all users, including those using assistive technologies. The following guidelines ensure that checkbox components meet accessibility standards. WCAG Compliance Checkbox components should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Information, structure, and relationships conveyed through presentation can be programmatically determined. 1.4.3 Contrast (Level AA): The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. 2.1.1 Keyboard (Level A): All functionality is operable through a keyboard interface. 2.4.7 Focus Visible (Level AA): Any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. 3.2.4 Consistent Identification (Level AA): Components that have the same functionality are identified consistently. 4.1.2 Name, Role, Value (Level A): For all user interface components, the name and role can be programmatically determined. Keyboard Accessibility Key Function Tab Moves focus to the checkbox Space Toggles the checkbox state between checked and unchecked Screen Reader Support Associate each checkbox with a label using the for attribute that matches the checkbox&amp;#039;s id attribute For checkbox groups, use fieldset and legend elements to provide context For the indeterminate state, add aria-checked=&amp;amp;quot;mixed&amp;amp;quot; when applicable Implementation Checklist Semantic HTML Use native &amp;amp;lt;input type=&amp;amp;quot;checkbox&amp;amp;quot;&amp;amp;gt; elements Associate labels with checkboxes using the for attribute Group related checkboxes with &amp;amp;lt;fieldset&amp;amp;gt; and &amp;amp;lt;legend&amp;amp;gt; Use the required attribute for mandatory fields Focus Management Ensure visible focus indication for keyboard navigation Maintain the default focus order Do not remove focus styles; they are essential for keyboard users Color and Contrast Maintain a minimum contrast ratio of 4.5:1 for the checkbox border against the background Ensure the check mark has sufficient contrast against the checkbox background Do not rely solely on color to indicate state changes States and Properties For custom checkboxes, maintain proper ARIA roles and states: role=&amp;amp;quot;checkbox&amp;amp;quot; (if not using a native checkbox) aria-checked=&amp;amp;quot;true|false|mixed&amp;amp;quot; (for indeterminate state) aria-disabled=&amp;amp;quot;true&amp;amp;quot; for disabled checkboxes aria-labelledby or aria-label if not using visible labels Testing Recommendations Automated Testing Run automated accessibility validators Check for proper HTML semantics Verify color contrast ratios Manual Testing Test with keyboard navigation only Test with screen readers (NVDA, JAWS, VoiceOver) Verify that state changes are announced Testing Scenarios Navigate to and operate checkboxes using only the keyboard Check that screen readers announce: Checkbox label Current state (checked/unchecked/mixed) Required status (if applicable) Verify that focus states are clearly visible Confirm that disabled checkboxes are properly announced Test checkbox groups to ensure the relationship is clear Best Practices Provide descriptive labels that clearly indicate the purpose of the checkbox Avoid using only &amp;amp;quot;Yes&amp;amp;quot; or &amp;amp;quot;No&amp;amp;quot; as checkbox labels Place related checkboxes in logical groups Include error messages that are programmatically associated with the relevant checkboxes Consider adding help text for complex options For &amp;amp;quot;Select All&amp;amp;quot; checkboxes with an indeterminate state, ensure this state is properly communicated to screen readers Code Example with Accessibility Features &amp;amp;lt;fieldset class=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend&amp;gt;Notification preferences (select all that apply):&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;!-- Select All with indeterminate support --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;select-all&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; aria-checked=&amp;quot;mixed&amp;quot; &amp;amp;lt;!-- When in indeterminate state --&amp;gt; &amp;gt; &amp;amp;lt;label for=&amp;quot;select-all&amp;quot;&amp;gt;Select all notification types&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;!-- Individual options --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;notify-email&amp;quot; name=&amp;quot;notification&amp;quot; value=&amp;quot;email&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; required aria-describedby=&amp;quot;notification-help&amp;quot; &amp;gt; &amp;amp;lt;label for=&amp;quot;notify-email&amp;quot;&amp;gt; Email notifications &amp;amp;lt;span class=&amp;quot;required-indicator&amp;quot;&amp;gt;*&amp;amp;lt;/span&amp;gt; &amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;notify-sms&amp;quot; name=&amp;quot;notification&amp;quot; value=&amp;quot;sms&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; &amp;gt; &amp;amp;lt;label for=&amp;quot;notify-sms&amp;quot;&amp;gt;SMS notifications&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;notify-app&amp;quot; name=&amp;quot;notification&amp;quot; value=&amp;quot;app&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; disabled aria-disabled=&amp;quot;true&amp;quot; &amp;gt; &amp;amp;lt;label for=&amp;quot;notify-app&amp;quot; class=&amp;quot;eds-label-disabled&amp;quot;&amp;gt; In-app notifications (currently unavailable) &amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div id=&amp;quot;notification-help&amp;quot; class=&amp;quot;form-help-text&amp;quot;&amp;gt; At least one notification type is required for account security. &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt;",
        "description": "Accessibility guidelines for the Checkbox component",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Checkbox Examples",
        "url": "/components/all/checkbox/examples/",
        "content": "Checkbox Examples Basic Checkbox The simplest form of checkbox with a label. &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;basic-checkbox&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;basic-checkbox&amp;quot;&amp;gt;I agree to receive updates&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; I agree to receive updates Required Checkbox A checkbox that must be checked to proceed, often used for terms and conditions. &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;required-checkbox&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; required&amp;gt; &amp;amp;lt;label for=&amp;quot;required-checkbox&amp;quot;&amp;gt;I accept the terms and conditions &amp;amp;lt;span class=&amp;quot;required-indicator&amp;quot;&amp;gt;*&amp;amp;lt;/span&amp;gt;&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;form-help-text&amp;quot;&amp;gt;This field is required&amp;amp;lt;/div&amp;gt; I accept the terms and conditions * This field is required Checked by Default A checkbox that starts in the checked state. &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checked-checkbox&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; checked&amp;gt; &amp;amp;lt;label for=&amp;quot;checked-checkbox&amp;quot;&amp;gt;Subscribe to newsletter&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; Subscribe to newsletter Disabled Checkboxes Checkboxes that cannot be interacted with. &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;disabled-checkbox&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; disabled&amp;gt; &amp;amp;lt;label for=&amp;quot;disabled-checkbox&amp;quot; class=&amp;quot;eds-label-disabled&amp;quot;&amp;gt;Option currently unavailable&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;disabled-checked-checkbox&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; disabled checked&amp;gt; &amp;amp;lt;label for=&amp;quot;disabled-checked-checkbox&amp;quot; class=&amp;quot;eds-label-disabled&amp;quot;&amp;gt;Default feature (cannot be disabled)&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; Option currently unavailable Default feature (cannot be disabled) Checkbox Group A group of related checkboxes. &amp;amp;lt;fieldset class=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend&amp;gt;Which features would you like to enable?&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;feature-1&amp;quot; name=&amp;quot;features&amp;quot; value=&amp;quot;auto-save&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;feature-1&amp;quot;&amp;gt;Auto-save documents&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;feature-2&amp;quot; name=&amp;quot;features&amp;quot; value=&amp;quot;dark-mode&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;feature-2&amp;quot;&amp;gt;Dark mode&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;feature-3&amp;quot; name=&amp;quot;features&amp;quot; value=&amp;quot;notifications&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;feature-3&amp;quot;&amp;gt;Desktop notifications&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Which features would you like to enable? Auto-save documents Dark mode Desktop notifications Indeterminate Checkbox A checkbox that represents a partial selection of child checkboxes. &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;select-all&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;select-all&amp;quot;&amp;gt;Select all options&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;fieldset class=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot; style=&amp;quot;margin-left: 24px;&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;option-1&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; name=&amp;quot;option&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;option-1&amp;quot;&amp;gt;Option 1&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot; style=&amp;quot;margin-left: 24px;&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;option-2&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; name=&amp;quot;option&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;option-2&amp;quot;&amp;gt;Option 2&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot; style=&amp;quot;margin-left: 24px;&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;option-3&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; name=&amp;quot;option&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;option-3&amp;quot;&amp;gt;Option 3&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; &amp;amp;lt;script&amp;gt; // This script sets up the indeterminate state const selectAllCheckbox = document.getElementById(&amp;#039;select-all&amp;#039;); const checkboxes = document.querySelectorAll(&amp;#039;input[name=&amp;quot;option&amp;quot;]&amp;#039;); selectAllCheckbox.addEventListener(&amp;#039;change&amp;#039;, function() { const isChecked = this.checked; checkboxes.forEach(checkbox =&amp;gt; checkbox.checked = isChecked); }); checkboxes.forEach(checkbox =&amp;gt; { checkbox.addEventListener(&amp;#039;change&amp;#039;, function() { const checkedCount = document.querySelectorAll(&amp;#039;input[name=&amp;quot;option&amp;quot;]:checked&amp;#039;).length; if (checkedCount === 0) { selectAllCheckbox.checked = false; selectAllCheckbox.indeterminate = false; } else if (checkedCount === checkboxes.length) { selectAllCheckbox.checked = true; selectAllCheckbox.indeterminate = false; } else { selectAllCheckbox.indeterminate = true; } }); }); // Set initial state - make &amp;quot;Select All&amp;quot; indeterminate for demonstration selectAllCheckbox.indeterminate = true; &amp;amp;lt;/script&amp;gt; Select all options Option 1 Option 2 Option 3 // Initialize indeterminate state for the demo document.addEventListener(&amp;#039;DOMContentLoaded&amp;#039;, function() { const selectAllCheckbox = document.getElementById(&amp;#039;select-all&amp;#039;); if (selectAllCheckbox) { selectAllCheckbox.indeterminate = true; } }); Validation States Checkboxes with validation states. &amp;amp;lt;!-- Error state --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container checkbox-error&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;error-checkbox&amp;quot; class=&amp;quot;eds-checkbox eds-checkbox-error&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;error-checkbox&amp;quot;&amp;gt;I accept the terms&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;form-error-text&amp;quot;&amp;gt;You must accept the terms to continue&amp;amp;lt;/div&amp;gt; &amp;amp;lt;!-- Success state --&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container checkbox-success&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;success-checkbox&amp;quot; class=&amp;quot;eds-checkbox eds-checkbox-success&amp;quot; checked&amp;gt; &amp;amp;lt;label for=&amp;quot;success-checkbox&amp;quot;&amp;gt;Email verification complete&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;form-success-text&amp;quot;&amp;gt;Verified successfully&amp;amp;lt;/div&amp;gt; I accept the terms You must accept the terms to continue Email verification complete Verified successfully With Additional Help Text Checkbox with additional explanation for the user. &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;help-checkbox&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; aria-describedby=&amp;quot;help-text&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;help-checkbox&amp;quot;&amp;gt;Enable data sharing&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div id=&amp;quot;help-text&amp;quot; class=&amp;quot;form-help-text&amp;quot;&amp;gt; Enabling this option allows us to share anonymous usage statistics to improve the product. No personal information will be shared. &amp;amp;lt;/div&amp;gt; Enable data sharing Enabling this option allows us to share anonymous usage statistics to improve the product. No personal information will be shared. Alignment Variations Different ways to align checkboxes within layouts. &amp;amp;lt;div class=&amp;quot;checkbox-align-example&amp;quot;&amp;gt; &amp;amp;lt;h4&amp;gt;Vertical alignment (default)&amp;amp;lt;/h4&amp;gt; &amp;amp;lt;div style=&amp;quot;display: flex; flex-direction: column; gap: 8px;&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-1&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-1&amp;quot;&amp;gt;Option 1&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-2&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-2&amp;quot;&amp;gt;Option 2&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-3&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-3&amp;quot;&amp;gt;Option 3&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;h4&amp;gt;Horizontal alignment&amp;amp;lt;/h4&amp;gt; &amp;amp;lt;div style=&amp;quot;display: flex; gap: 24px;&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-4&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-4&amp;quot;&amp;gt;Option A&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-5&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-5&amp;quot;&amp;gt;Option B&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-6&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-6&amp;quot;&amp;gt;Option C&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;h4&amp;gt;Grid alignment&amp;amp;lt;/h4&amp;gt; &amp;amp;lt;div style=&amp;quot;display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px;&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-7&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-7&amp;quot;&amp;gt;Grid item 1&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-8&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-8&amp;quot;&amp;gt;Grid item 2&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-9&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-9&amp;quot;&amp;gt;Grid item 3&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;align-10&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;align-10&amp;quot;&amp;gt;Grid item 4&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; Vertical alignment (default) Option 1 Option 2 Option 3 Horizontal alignment Option A Option B Option C Grid alignment Grid item 1 Grid item 2 Grid item 3 Grid item 4 Real-World Use Case: Privacy Settings Form A more complex example showing how checkboxes can be used in a real application. &amp;amp;lt;form class=&amp;quot;privacy-settings-form&amp;quot;&amp;gt; &amp;amp;lt;h3&amp;gt;Privacy Settings&amp;amp;lt;/h3&amp;gt; &amp;amp;lt;p class=&amp;quot;form-description&amp;quot;&amp;gt;Manage how your information is used across our services.&amp;amp;lt;/p&amp;gt; &amp;amp;lt;fieldset class=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend&amp;gt;Communication Preferences&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;privacy-all&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;privacy-all&amp;quot;&amp;gt;&amp;amp;lt;strong&amp;gt;Manage all communication preferences&amp;amp;lt;/strong&amp;gt;&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div style=&amp;quot;margin-left: 24px;&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;privacy-updates&amp;quot; name=&amp;quot;communication&amp;quot; value=&amp;quot;updates&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; checked&amp;gt; &amp;amp;lt;label for=&amp;quot;privacy-updates&amp;quot;&amp;gt;Product updates and announcements&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;privacy-marketing&amp;quot; name=&amp;quot;communication&amp;quot; value=&amp;quot;marketing&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;privacy-marketing&amp;quot;&amp;gt;Marketing and promotional emails&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;privacy-research&amp;quot; name=&amp;quot;communication&amp;quot; value=&amp;quot;research&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; checked&amp;gt; &amp;amp;lt;label for=&amp;quot;privacy-research&amp;quot;&amp;gt;Research and feedback requests&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;privacy-partners&amp;quot; name=&amp;quot;communication&amp;quot; value=&amp;quot;partners&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;privacy-partners&amp;quot;&amp;gt;Partner offers and recommendations&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; &amp;amp;lt;fieldset class=&amp;quot;checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend&amp;gt;Data Usage&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;data-personalization&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; checked&amp;gt; &amp;amp;lt;label for=&amp;quot;data-personalization&amp;quot;&amp;gt;Personalize my experience based on my usage&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;data-analytics&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; checked required&amp;gt; &amp;amp;lt;label for=&amp;quot;data-analytics&amp;quot;&amp;gt;Allow essential analytics &amp;amp;lt;span class=&amp;quot;required-indicator&amp;quot;&amp;gt;*&amp;amp;lt;/span&amp;gt;&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;form-help-text&amp;quot;&amp;gt;Required for service functionality&amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;checkbox-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;data-thirdparty&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;data-thirdparty&amp;quot;&amp;gt;Share anonymous data with trusted third parties&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; &amp;amp;lt;div class=&amp;quot;form-actions&amp;quot;&amp;gt; &amp;amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;primary-button&amp;quot;&amp;gt;Save Preferences&amp;amp;lt;/button&amp;gt; &amp;amp;lt;button type=&amp;quot;reset&amp;quot; class=&amp;quot;secondary-button&amp;quot;&amp;gt;Reset to Default&amp;amp;lt;/button&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/form&amp;gt; &amp;amp;lt;script&amp;gt; document.addEventListener(&amp;#039;DOMContentLoaded&amp;#039;, function() { const privacyAllCheckbox = document.getElementById(&amp;#039;privacy-all&amp;#039;); const communicationCheckboxes = document.querySelectorAll(&amp;#039;input[name=&amp;quot;communication&amp;quot;]&amp;#039;); // Set up indeterminate state function updatePrivacyAllCheckbox() { const checkedCount = document.querySelectorAll(&amp;#039;input[name=&amp;quot;communication&amp;quot;]:checked&amp;#039;).length; if (checkedCount === 0) { privacyAllCheckbox.checked = false; privacyAllCheckbox.indeterminate = false; } else if (checkedCount === communicationCheckboxes.length) { privacyAllCheckbox.checked = true; privacyAllCheckbox.indeterminate = false; } else { privacyAllCheckbox.indeterminate = true; } } // Add event listeners privacyAllCheckbox.addEventListener(&amp;#039;change&amp;#039;, function() { const isChecked = this.checked; communicationCheckboxes.forEach(checkbox =&amp;gt; { checkbox.checked = isChecked; }); }); communicationCheckboxes.forEach(checkbox =&amp;gt; { checkbox.addEventListener(&amp;#039;change&amp;#039;, updatePrivacyAllCheckbox); }); // Initial state updatePrivacyAllCheckbox(); }); &amp;amp;lt;/script&amp;gt; Privacy Settings Manage how your information is used across our services. Communication Preferences Manage all communication preferences Product updates and announcements Marketing and promotional emails Research and feedback requests Partner offers and recommendations Data Usage Personalize my experience based on my usage Allow essential analytics * Required for service functionality Share anonymous data with trusted third parties Save Preferences Reset to Default Additional Styling Custom CSS to enhance the appearance of examples on this page: .form-error-text { color: var(--color-error); font-size: 0.875rem; margin-top: 4px; } .form-success-text { color: var(--color-success); font-size: 0.875rem; margin-top: 4px; } .form-help-text { color: var(--color-neutral-70); font-size: 0.875rem; margin-top: 4px; } .eds-checkbox-error { border-color: var(--color-error) !important; } .eds-checkbox-success { border-color: var(--color-success) !important; } .checkbox-error label { color: var(--color-error); } .checkbox-success label { color: var(--color-success); } .example-preview { background-color: var(--color-neutral-5); border: 1px solid var(--color-neutral-20); border-radius: 4px; padding: 20px; margin: 16px 0; } .privacy-settings-form { max-width: 600px; } .form-description { color: var(--color-neutral-70); margin-bottom: 20px; } .form-actions { margin-top: 24px; display: flex; gap: 12px; } .primary-button, .secondary-button { padding: 8px 16px; border-radius: 4px; font-weight: 500; cursor: pointer; } .primary-button { background-color: var(--color-primary); color: white; border: none; } .secondary-button { background-color: transparent; color: var(--color-primary); border: 1px solid var(--color-primary); } .checkbox-align-example h4 { margin-top: 24px; margin-bottom: 12px; }",
        "description": "Examples of different checkbox variants and use cases",
        "type": "Page",
        "date": "2025-03-03"
      },
    
  
    
      {
        "title": "Checkbox Group",
        "url": "/components/all/checkbox-group/",
        "content": "Checkbox Group Brief description of the checkbox group component. Overview Overview of the checkbox group component, its purpose, and typical use cases. Checkbox groups allow users to select multiple options from a set. Types Standard: A vertical list of checkboxes Horizontal: Checkboxes arranged horizontally Grouped with Fieldset: Checkboxes within a fieldset with legend When to Use When users need to select multiple options from a list When displaying a list of independent options When users need to toggle options on or off When all options need to be visible to the user at once Best Practices Group related checkboxes Use clear and concise labels Avoid using checkboxes for binary choices when a toggle switch would be more appropriate Maintain consistent spacing between checkboxes Consider using a &amp;amp;quot;Select All&amp;amp;quot; option for longer lists Related Components Checkbox Radio Group Field Group Tabs Design Code Accessibility Examples",
        "description": "Checkbox Group component for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-04"
      },
    
  
    
      {
        "title": "Checkbox Group Design",
        "url": "/components/all/checkbox-group/design/",
        "content": "Checkbox Group Design Guidelines Anatomy The checkbox group component consists of several key elements: Container: A wrapper that contains all checkboxes Checkbox Items: Individual checkbox components Group Label: Describes the entire group of checkboxes Item Labels: Describes each individual checkbox Optional Helper Text: Additional information about the group Visual Design Colors State Property Value Default Background var(--color-neutral-10) Default Border var(--color-neutral-40) Hover Background var(--color-neutral-20) Hover Border var(--color-primary) Selected Background var(--color-primary-light) Selected Border var(--color-primary) Typography Group Label: 16px/1rem, font-weight: 600 Item Labels: 14px/0.875rem, font-weight: 400 Helper Text: 12px/0.75rem, font-weight: 400, font-style: italic Sizing and Spacing Padding between items: 12px (0.75rem) Margin around group: 16px (1rem) Minimum clickable area: 44px × 44px (2.75rem × 2.75rem) States Default: Normal appearance of checkboxes Hover: Visual indicator when user hovers over a checkbox Selected: Visual indicator for selected checkboxes Focus: Visual indicator when a checkbox has keyboard focus Disabled: Visual indicator for unavailable checkboxes Error: Visual indicator when there&amp;#039;s an error with the selection Variations Vertical Layout (Default) The standard layout where checkboxes are stacked vertically, making each option distinct and easy to read. Horizontal Layout Checkboxes arranged side by side, suitable for short labels and limited options. Nested Checkboxes Hierarchical structure where selecting a parent checkbox affects child checkboxes. Card-Style Checkboxes Each checkbox and its label are contained within a card-like container. Design Do&amp;#039;s and Don&amp;#039;ts Do&amp;#039;s Clearly indicate which checkboxes are selected Use consistent spacing between checkboxes Use fieldset and legend for proper grouping Provide clear group and individual labels Maintain sufficient contrast for accessibility Don&amp;#039;ts Don&amp;#039;t place checkboxes too close together Don&amp;#039;t use long labels that wrap to multiple lines if avoidable Don&amp;#039;t use checkbox groups when only one selection is allowed (use radio buttons instead) Don&amp;#039;t use custom checkbox designs that don&amp;#039;t clearly indicate their state Don&amp;#039;t position checkboxes inconsistently within a group",
        "description": "Design guidelines for the Checkbox Group component",
        "type": "Page",
        "date": "2025-03-04"
      },
    
  
    
      {
        "title": "Checkbox Group Code",
        "url": "/components/all/checkbox-group/code/",
        "content": "Checkbox Group Implementation HTML Structure &amp;amp;lt;!-- Basic Checkbox Group --&amp;gt; &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Group Label&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__helper&amp;quot;&amp;gt;Optional helper text&amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox1&amp;quot; name=&amp;quot;checkboxGroup&amp;quot; value=&amp;quot;option1&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox1&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Option 1&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox2&amp;quot; name=&amp;quot;checkboxGroup&amp;quot; value=&amp;quot;option2&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox2&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Option 2&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox3&amp;quot; name=&amp;quot;checkboxGroup&amp;quot; value=&amp;quot;option3&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox3&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Option 3&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; CSS Implementation .eds-checkbox-group { display: block; margin: var(--spacing-4) 0; border: none; padding: 0; } .eds-checkbox-group__label { display: block; font-size: 1rem; font-weight: 600; margin-bottom: var(--spacing-2); } .eds-checkbox-group__helper { display: block; font-size: 0.75rem; font-style: italic; color: var(--color-neutral-70); margin-bottom: var(--spacing-2); } .eds-checkbox-group__items { display: flex; flex-direction: column; gap: var(--spacing-3); } .eds-checkbox-group--horizontal .eds-checkbox-group__items { flex-direction: row; flex-wrap: wrap; gap: var(--spacing-4); } .eds-checkbox-group__item { display: flex; align-items: center; } .eds-checkbox { margin-right: var(--spacing-2); } .eds-checkbox-group--error .eds-checkbox-group__label { color: var(--color-error); } JavaScript // Checkbox Group with &amp;quot;Select All&amp;quot; functionality function initializeCheckboxGroup(groupId) { const container = document.getElementById(groupId); const selectAllCheckbox = container.querySelector(&amp;#039;.eds-checkbox-group__select-all&amp;#039;); const checkboxes = container.querySelectorAll(&amp;#039;.eds-checkbox-group__item .eds-checkbox&amp;#039;); if (selectAllCheckbox) { selectAllCheckbox.addEventListener(&amp;#039;change&amp;#039;, function() { const isChecked = this.checked; checkboxes.forEach(checkbox =&amp;gt; { checkbox.checked = isChecked; }); }); // Update select all checkbox when individual checkboxes change checkboxes.forEach(checkbox =&amp;gt; { checkbox.addEventListener(&amp;#039;change&amp;#039;, function() { const allChecked = Array.from(checkboxes).every(cb =&amp;gt; cb.checked); const someChecked = Array.from(checkboxes).some(cb =&amp;gt; cb.checked); selectAllCheckbox.checked = allChecked; selectAllCheckbox.indeterminate = someChecked &amp;amp;amp;&amp;amp;amp; !allChecked; }); }); } } React Implementation import React, { useState } from &amp;#039;react&amp;#039;; import &amp;#039;./checkbox-group.css&amp;#039;; const CheckboxGroup = ({ label, helperText, options, name, onChange, horizontal = false, error = false, ...props }) =&amp;gt; { const [selectedValues, setSelectedValues] = useState([]); const handleChange = (event) =&amp;gt; { const value = event.target.value; const isChecked = event.target.checked; const newValues = isChecked ? [...selectedValues, value] : selectedValues.filter(val =&amp;gt; val !== value); setSelectedValues(newValues); if (onChange) { onChange(newValues); } }; const groupClasses = [ &amp;#039;eds-checkbox-group&amp;#039;, horizontal ? &amp;#039;eds-checkbox-group--horizontal&amp;#039; : &amp;#039;&amp;#039;, error ? &amp;#039;eds-checkbox-group--error&amp;#039; : &amp;#039;&amp;#039;, ].filter(Boolean).join(&amp;#039; &amp;#039;); return ( &amp;amp;lt;fieldset className={groupClasses} {...props}&amp;gt; {label &amp;amp;amp;&amp;amp;amp; &amp;amp;lt;legend className=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;{label}&amp;amp;lt;/legend&amp;gt;} {helperText &amp;amp;amp;&amp;amp;amp; &amp;amp;lt;div className=&amp;quot;eds-checkbox-group__helper&amp;quot;&amp;gt;{helperText}&amp;amp;lt;/div&amp;gt;} &amp;amp;lt;div className=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; {options.map((option, index) =&amp;gt; ( &amp;amp;lt;div key={index} className=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id={`${name}-${index}`} name={name} value={option.value} checked={selectedValues.includes(option.value)} onChange={handleChange} className=&amp;quot;eds-checkbox&amp;quot; disabled={option.disabled} /&amp;gt; &amp;amp;lt;label htmlFor={`${name}-${index}`} className=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt; {option.label} &amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; ))} &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; ); }; export default CheckboxGroup; Usage Examples Basic Usage &amp;amp;lt;CheckboxGroup label=&amp;quot;Notification Preferences&amp;quot; helperText=&amp;quot;Select all that apply&amp;quot; name=&amp;quot;notifications&amp;quot; options={[ { label: &amp;quot;Email&amp;quot;, value: &amp;quot;email&amp;quot; }, { label: &amp;quot;SMS&amp;quot;, value: &amp;quot;sms&amp;quot; }, { label: &amp;quot;Push Notifications&amp;quot;, value: &amp;quot;push&amp;quot; } ]} onChange={(values) =&amp;gt; console.log(&amp;#039;Selected:&amp;#039;, values)} /&amp;gt; Horizontal Layout &amp;amp;lt;CheckboxGroup label=&amp;quot;Available Days&amp;quot; name=&amp;quot;days&amp;quot; options={[ { label: &amp;quot;Mon&amp;quot;, value: &amp;quot;monday&amp;quot; }, { label: &amp;quot;Tue&amp;quot;, value: &amp;quot;tuesday&amp;quot; }, { label: &amp;quot;Wed&amp;quot;, value: &amp;quot;wednesday&amp;quot; }, { label: &amp;quot;Thu&amp;quot;, value: &amp;quot;thursday&amp;quot; }, { label: &amp;quot;Fri&amp;quot;, value: &amp;quot;friday&amp;quot; } ]} horizontal={true} /&amp;gt; Accessibility Considerations Use &amp;amp;lt;fieldset&amp;amp;gt; and &amp;amp;lt;legend&amp;amp;gt; to properly group related checkboxes Ensure proper label association with each checkbox using matching for and id attributes Maintain adequate spacing for touch targets (at least 44x44 pixels) Support keyboard navigation and focus management",
        "description": "Implementation guidelines for the Checkbox Group component",
        "type": "Page",
        "date": "2025-03-04"
      },
    
  
    
      {
        "title": "Checkbox Group Accessibility",
        "url": "/components/all/checkbox-group/accessibility/",
        "content": "Checkbox Group Accessibility Guidelines Overview Ensuring checkbox groups are accessible is essential for users with disabilities. This component must be operable by keyboard and properly exposed to assistive technologies. WCAG Compliance This component should meet the following WCAG 2.1 success criteria: 1.3.1 Info and Relationships (Level A): Use proper HTML elements like &amp;amp;lt;fieldset&amp;amp;gt; and &amp;amp;lt;legend&amp;amp;gt; to group related checkboxes. 1.4.3 Contrast (Level AA): Maintain sufficient color contrast (4.5:1) for text and visual indicators. 2.1.1 Keyboard (Level A): Ensure all checkboxes are navigable and operable using only a keyboard. 2.4.3 Focus Order (Level A): Implement a logical keyboard focus sequence. 2.4.7 Focus Visible (Level AA): Ensure a visible focus indicator is available when users navigate with a keyboard. 4.1.2 Name, Role, Value (Level A): Ensure all form elements have appropriate names, roles, and values. Keyboard Accessibility Key Function Tab Moves focus to the next checkbox in the group Shift + Tab Moves focus to the previous checkbox in the group Space Toggles the focused checkbox selection Screen Reader Support Use &amp;amp;lt;fieldset&amp;amp;gt; and &amp;amp;lt;legend&amp;amp;gt; to provide context for the entire group of checkboxes Ensure each checkbox has a properly associated label Maintain a logical structure for screen reader navigation Provide appropriate ARIA attributes when needed Implementation Checklist Semantic Structure &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Group Label&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__helper&amp;quot;&amp;gt;Optional helper text&amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;checkbox1&amp;quot; name=&amp;quot;checkboxGroup&amp;quot; value=&amp;quot;option1&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;checkbox1&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Option 1&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;!-- Additional checkboxes --&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Focus Management Ensure focus is visible on all checkboxes Focus indicators should have sufficient contrast Focus should follow a logical order through the checkbox group State Communication Selected state should be communicated both visually and to assistive technology Error states should be clearly indicated and associated with the appropriate checkbox Required Selections If selections are required, clearly communicate this requirement Error messages should be associated with the fieldset using aria-describedby &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group eds-checkbox-group--error&amp;quot; aria-describedby=&amp;quot;checkbox-group-error&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Required Selections&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;!-- Checkboxes --&amp;gt; &amp;amp;lt;div id=&amp;quot;checkbox-group-error&amp;quot; class=&amp;quot;eds-checkbox-group__error&amp;quot;&amp;gt; Please select at least one option &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Testing Recommendations Automated Testing Validate HTML to ensure proper structure Use accessibility testing tools to catch common issues Run automated contrast checks on all visual elements Manual Testing Keyboard Testing Navigate to the checkbox group using Tab Ensure each checkbox can be focused individually Verify Space toggles the checkbox state Check that focus indication is clearly visible Screen Reader Testing Verify the group label is announced when entering the group Ensure individual checkboxes are announced with their labels and states Confirm state changes are announced when toggling checkboxes Verify error messages are properly announced Accessible Examples Standard Checkbox Group &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Notification Preferences&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__helper&amp;quot;&amp;gt;Select all that apply&amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;email&amp;quot; name=&amp;quot;notifications&amp;quot; value=&amp;quot;email&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;email&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Email notifications&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;sms&amp;quot; name=&amp;quot;notifications&amp;quot; value=&amp;quot;sms&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;sms&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;SMS notifications&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;push&amp;quot; name=&amp;quot;notifications&amp;quot; value=&amp;quot;push&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;push&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Push notifications&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; With Error State &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group eds-checkbox-group--error&amp;quot; aria-describedby=&amp;quot;privacy-error&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Privacy Settings&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;privacy-terms&amp;quot; name=&amp;quot;privacy&amp;quot; value=&amp;quot;terms&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; required&amp;gt; &amp;amp;lt;label for=&amp;quot;privacy-terms&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;I agree to the Terms and Conditions&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div id=&amp;quot;privacy-error&amp;quot; class=&amp;quot;eds-checkbox-group__error&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; You must agree to the Terms and Conditions to continue &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt;",
        "description": "Accessibility guidelines for the Checkbox Group component",
        "type": "Page",
        "date": "2025-03-04"
      },
    
  
    
      {
        "title": "Checkbox Group Examples",
        "url": "/components/all/checkbox-group/examples/",
        "content": "Checkbox Group Examples Basic Example Basic usage of the checkbox group component with vertical alignment (default). &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Select Features&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__helper&amp;quot;&amp;gt;Choose all that apply&amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;feature1&amp;quot; name=&amp;quot;features&amp;quot; value=&amp;quot;feature1&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;feature1&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Automated Reports&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;feature2&amp;quot; name=&amp;quot;features&amp;quot; value=&amp;quot;feature2&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;feature2&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Data Analytics&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;feature3&amp;quot; name=&amp;quot;features&amp;quot; value=&amp;quot;feature3&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;feature3&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Custom Dashboards&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Select Features Choose all that apply Automated Reports Data Analytics Custom Dashboards Horizontal Layout Checkboxes arranged horizontally, suitable for limited options with short labels. &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group eds-checkbox-group--horizontal&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Select Days&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;day1&amp;quot; name=&amp;quot;days&amp;quot; value=&amp;quot;mon&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;day1&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Mon&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;day2&amp;quot; name=&amp;quot;days&amp;quot; value=&amp;quot;tue&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;day2&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Tue&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;day3&amp;quot; name=&amp;quot;days&amp;quot; value=&amp;quot;wed&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;day3&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Wed&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;day4&amp;quot; name=&amp;quot;days&amp;quot; value=&amp;quot;thu&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;day4&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Thu&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;day5&amp;quot; name=&amp;quot;days&amp;quot; value=&amp;quot;fri&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;day5&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Fri&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Select Days Mon Tue Wed Thu Fri With &amp;amp;quot;Select All&amp;amp;quot; Option Adds a &amp;amp;quot;Select All&amp;amp;quot; checkbox that toggles all options. &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group&amp;quot; id=&amp;quot;topics-group&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Topic Subscriptions&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__select-all-container&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;select-all-topics&amp;quot; class=&amp;quot;eds-checkbox eds-checkbox-group__select-all&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;select-all-topics&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Select All&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;topic1&amp;quot; name=&amp;quot;topics&amp;quot; value=&amp;quot;news&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;topic1&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;News Updates&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;topic2&amp;quot; name=&amp;quot;topics&amp;quot; value=&amp;quot;product&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;topic2&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Product Announcements&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;topic3&amp;quot; name=&amp;quot;topics&amp;quot; value=&amp;quot;events&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;topic3&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Upcoming Events&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;topic4&amp;quot; name=&amp;quot;topics&amp;quot; value=&amp;quot;tips&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;topic4&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Tips &amp;amp;amp; Tutorials&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; &amp;amp;lt;script&amp;gt; document.addEventListener(&amp;#039;DOMContentLoaded&amp;#039;, function() { initializeCheckboxGroup(&amp;#039;topics-group&amp;#039;); }); function initializeCheckboxGroup(groupId) { const container = document.getElementById(groupId); const selectAllCheckbox = container.querySelector(&amp;#039;.eds-checkbox-group__select-all&amp;#039;); const checkboxes = container.querySelectorAll(&amp;#039;.eds-checkbox-group__item .eds-checkbox&amp;#039;); if (selectAllCheckbox) { selectAllCheckbox.addEventListener(&amp;#039;change&amp;#039;, function() { const isChecked = this.checked; checkboxes.forEach(checkbox =&amp;gt; { checkbox.checked = isChecked; }); }); // Update select all checkbox when individual checkboxes change checkboxes.forEach(checkbox =&amp;gt; { checkbox.addEventListener(&amp;#039;change&amp;#039;, function() { const allChecked = Array.from(checkboxes).every(cb =&amp;gt; cb.checked); const someChecked = Array.from(checkboxes).some(cb =&amp;gt; cb.checked); selectAllCheckbox.checked = allChecked; selectAllCheckbox.indeterminate = someChecked &amp;amp;amp;&amp;amp;amp; !allChecked; }); }); } } &amp;amp;lt;/script&amp;gt; Topic Subscriptions Select All News Updates Product Announcements Upcoming Events Tips &amp;amp; Tutorials Error State Example of a checkbox group with validation error. &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group eds-checkbox-group--error&amp;quot; aria-describedby=&amp;quot;terms-error&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Terms and Conditions&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;terms&amp;quot; name=&amp;quot;terms&amp;quot; value=&amp;quot;accepted&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; required&amp;gt; &amp;amp;lt;label for=&amp;quot;terms&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;I agree to the Terms of Service and Privacy Policy&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div id=&amp;quot;terms-error&amp;quot; class=&amp;quot;eds-checkbox-group__error&amp;quot; role=&amp;quot;alert&amp;quot;&amp;gt; You must accept the terms and conditions to continue &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Terms and Conditions I agree to the Terms of Service and Privacy Policy You must accept the terms and conditions to continue Disabled State Example of a checkbox group with disabled options. &amp;amp;lt;fieldset class=&amp;quot;eds-checkbox-group&amp;quot;&amp;gt; &amp;amp;lt;legend class=&amp;quot;eds-checkbox-group__label&amp;quot;&amp;gt;Plan Options&amp;amp;lt;/legend&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__helper&amp;quot;&amp;gt;Some options may not be available&amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__items&amp;quot;&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;plan1&amp;quot; name=&amp;quot;plans&amp;quot; value=&amp;quot;basic&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;plan1&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Basic Plan&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;plan2&amp;quot; name=&amp;quot;plans&amp;quot; value=&amp;quot;pro&amp;quot; class=&amp;quot;eds-checkbox&amp;quot;&amp;gt; &amp;amp;lt;label for=&amp;quot;plan2&amp;quot; class=&amp;quot;eds-checkbox__label&amp;quot;&amp;gt;Professional Plan&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;div class=&amp;quot;eds-checkbox-group__item&amp;quot;&amp;gt; &amp;amp;lt;input type=&amp;quot;checkbox&amp;quot; id=&amp;quot;plan3&amp;quot; name=&amp;quot;plans&amp;quot; value=&amp;quot;enterprise&amp;quot; class=&amp;quot;eds-checkbox&amp;quot; disabled&amp;gt; &amp;amp;lt;label for=&amp;quot;plan3&amp;quot; class=&amp;quot;eds-checkbox__label eds-checkbox__label--disabled&amp;quot;&amp;gt;Enterprise Plan (Currently Unavailable)&amp;amp;lt;/label&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/div&amp;gt; &amp;amp;lt;/fieldset&amp;gt; Plan Options Some options may not be available Basic Plan Professional Plan Enterprise Plan (Currently Unavailable)",
        "description": "Examples of different checkbox group variants and use cases",
        "type": "Page",
        "date": "2025-03-04"
      },
    
  
    
      {
        "title": "Enterprise Design System",
        "url": "/",
        "content": "Welcome to the Enterprise Design System The Enterprise Design System (EDS) provides a comprehensive set of design guidelines, components, and resources for building consistent, accessible, and user-friendly enterprise applications. Our goal is to streamline the design and development process, reduce redundancy, and create a cohesive user experience across all enterprise products. Recent Updates Version 2.0 Released: Our latest version includes improved accessibility, new components, and enhanced documentation. Learn more Dark Mode Support: All components now support dark mode out of the box, with seamless theme switching. Expanded Component Library: We&amp;#039;ve added 15 new components based on user feedback and real-world use cases. About the Design System The Enterprise Design System is built on the following principles: Consistency: Creating a unified experience across all enterprise applications. Accessibility: Ensuring all components meet WCAG 2.1 AA standards. Flexibility: Providing components that can be customized to meet various needs. Performance: Optimizing components for fast load times and smooth interactions. Maintainability: Creating a system that is easy to update and extend. Visit our getting started guide to learn how to integrate the design system into your projects.",
        "description": "A comprehensive design system for building consistent, accessible, and beautiful enterprise applications",
        "type": "Page",
        "date": "2025-03-05"
      },
    
  
    
      {
        "title": "Enterprise Design System",
        "url": "/alternative-home/",
        "content": "Enterprise Design System A unified platform for building consistent, accessible, and high-quality enterprise applications Get Started View Components What&amp;#039;s New Version 2.0 Released February 15, 2025 We&amp;#039;ve released version 2.0 of the Enterprise Design System with new components, improved documentation, and better accessibility. Read more New Data Table Component February 10, 2025 The new Data Table component provides a powerful way to display and interact with structured data in your applications. View component Improved Accessibility February 5, 2025 All components have been audited and updated to ensure compliance with WCAG 2.1 AA accessibility standards. Read guidelines Component Categories All Components View all All Components components Layout Accordion stable Card stable Grid stable Container stable View all Layout components Navigation Breadcrumb stable Menu stable Tabs stable Pagination stable View all Navigation components Feedback Alert stable Progress stable Toast stable Skeleton experimental View all Feedback components Inputs Button stable Input stable Checkbox stable Radio stable View all Inputs components Get Started Design Tokens Learn how to use our design tokens to maintain consistent styling across your applications. Explore design tokens Guidelines Discover our design and development guidelines to ensure consistency across your projects. Review guidelines Patterns Explore common UI patterns and learn how to solve common design challenges in your applications. Explore patterns Resources Figma Library Access our Figma component library to kickstart your design process. Sketch Library Download our Sketch component library for designing with the Enterprise Design System. Icon Library Browse and download our comprehensive collection of UI icons. Starter Templates Get a head start with our application templates and boilerplates.",
        "description": "A unified documentation platform for the Enterprise Design System",
        "type": "Page",
        "date": "2025-03-05"
      },
    
  
    
      {
        "title": "Sample Component",
        "url": "/migrated/test-migration/sample-component/",
        "content": "&amp;lt;!DOCTYPE html&amp;gt; Sample Component | Enterprise Design System // Wait until the DOM is fully loaded document.addEventListener(&amp;#039;DOMContentLoaded&amp;#039;, function() { // Give a moment for everything to render setTimeout(function() { // Find all navigation toggle buttons var toggleButtons = document.querySelectorAll(&amp;#039;button.nav-toggle&amp;#039;); console.log(&amp;#039;Inline script found &amp;#039; + toggleButtons.length + &amp;#039; navigation toggle buttons&amp;#039;); // Set up click handler for each button toggleButtons.forEach(function(button) { button.addEventListener(&amp;#039;click&amp;#039;, function(e) { e.preventDefault(); var isExpanded = this.getAttribute(&amp;#039;aria-expanded&amp;#039;) === &amp;#039;true&amp;#039;; var targetId = this.getAttribute(&amp;#039;aria-controls&amp;#039;); var targetMenu = document.getElementById(targetId); console.log(&amp;#039;Toggle clicked: &amp;#039; + targetId + &amp;#039;, current state: &amp;#039; + (isExpanded ? &amp;#039;expanded&amp;#039; : &amp;#039;collapsed&amp;#039;)); // Toggle expanded state this.setAttribute(&amp;#039;aria-expanded&amp;#039;, !isExpanded); // Toggle submenu visibility if (targetMenu) { if (isExpanded) { targetMenu.classList.add(&amp;#039;hidden&amp;#039;); // Rotate chevron down var chevron = this.querySelector(&amp;#039;.chevron-icon svg&amp;#039;); if (chevron) { chevron.innerHTML = &amp;#039;&amp;#039;; } } else { targetMenu.classList.remove(&amp;#039;hidden&amp;#039;); // Rotate chevron up var chevron = this.querySelector(&amp;#039;.chevron-icon svg&amp;#039;); if (chevron) { chevron.innerHTML = &amp;#039;&amp;#039;; } } } }); }); }, 500); }); /* Global icon sizing fix */ svg { max-width: 100%; max-height: 100%; height: 1em; width: 1em; } /* Ensure proper sizing for specific icons */ svg.h-5 { height: 1.25rem !important; width: 1.25rem !important; } svg.h-6 { height: 1.5rem !important; width: 1.5rem !important; } svg.h-8 { height: 2rem !important; width: 2rem !important; } /* Typography improvements */ .prose { color: var(--color-text) !important; } .prose h1, .prose h2, .prose h3, .prose h4 { color: var(--color-text) !important; } .prose a { color: var(--color-primary) !important; text-decoration-color: var(--color-primary) !important; } .prose code { background-color: var(--color-bg-alt) !important; color: var(--color-text) !important; } Enterprise Design System Overview Foundations Components Browse Main Navigation Overview Foundations Components Browse Browse Components By Channel By Type By Owner Resources Getting Started Guidelines Templates Resources What&amp;#039;s New Switch to Light Mode Switch to Dark Mode Enterprise Design System A comprehensive design system for building consistent, accessible, and beautiful enterprise applications. Resources Getting Started Examples Templates Release Notes Navigation Browse by Channel Browse by Type Browse by Owner Search Support Help &amp;amp;amp; Support FAQ Contribute Contact Us © 2025 Enterprise Design System. All rights reserved. Privacy Policy Terms of Service Sitemap",
        "description": "",
        "type": "Page",
        "date": "2025-03-05"
      }
    
  
]